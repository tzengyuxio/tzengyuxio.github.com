<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: python | Tzeng Yuxio]]></title>
  <link href="http://tzengyuxio.me/blog/tags/python/atom.xml" rel="self"/>
  <link href="http://tzengyuxio.me/"/>
  <updated>2012-12-15T06:19:44+08:00</updated>
  <id>http://tzengyuxio.me/</id>
  <author>
    <name><![CDATA[Tzeng Yuxio]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[將 IMDb Top 250 排行榜轉為 CSV]]></title>
    <link href="http://tzengyuxio.me/blog/2012/12/14/fetch-imdb-top-250-into-csv/"/>
    <updated>2012-12-14T16:23:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/12/14/fetch-imdb-top-250-into-csv</id>
    <content type="html"><![CDATA[<p><a href="http://www.imdb.com/chart/top">IMDb Top 250</a> 是許多喜愛電影人士的觀影參考。這份排行榜不知道多久更新一次，今天心血來潮，想要記錄一下目前的排行，然後隔一陣子再來比較。但是如果只是把網頁存下來，或是貼到 Evernote 去，到時候想要比較資料免不了又是一陣人力活，於是想到將排行榜的內容抓下來存為 CSV 檔，以後看是要做進一步的處理或分析都好辦。</p>

<p>所幸有 Python，抓網頁、分析 HTML，以及處理 CSV 檔這些事情不會太難應付。</p>

<p><img src="https://lh3.googleusercontent.com/-7DYOVts_O60/UMtwCCcLcYI/AAAAAAAALOI/2N9PUfenXiw/s800/imdb-top250-csv.png" alt="" /></p>

<!-- more -->


<p>用來抓取網頁並轉存 CSV 的工具我放在 Gist 上，<a href="https://gist.github.com/4284108">連結在此</a>，程式不大，120 行左右，其中還有 20 幾行是直接從 Python 文件拿來用的，所以實際寫不到 100 行。</p>

<p>以下就程式碼做個簡單說明：</p>

<ol>
<li><p>程式主要就 <code>UnicodeWriter</code>, <code>IMDbTop250HTMLParser</code> 這兩個 Class。</p></li>
<li><p><code>UnicodeWriter</code> 是從 <a href="http://docs.python.org/2/library/csv.html">Python Documentation</a> 直接拿來用的 Class，作用是 unicode 編碼 csv 檔的輸出。</p></li>
<li><p><code>IMDbTop250HTMLParser</code> 則是繼承自 <code>HTMLParser</code>，繼承後要做的事就是覆寫 <code>handle_starttag</code>, <code>handle_endtag</code>, <code>handle_data</code> 這些個方法。比方說遇到 <code>&lt;tr&gt;</code> 就開始記錄一筆電影資料的 list，等到遇到 <code>&lt;\tr&gt;</code> 時就結束該筆記錄。</p></li>
</ol>


<p>IMDb 這網站有多年歷史了，其 HTML 的撰寫也是相當原始，有許多不規範的地方。這也是撰寫這個小程式時主要遇到的困難點。例如在 IMDb Top 250 頁面的原始碼中有這麼一段：</p>

<p><code>&lt;a href=http://www.imdb.com/games/guess/title:top_250?ref_=ch_qz&gt;</code></p>

<p>注意，在屬性 <code>href</code> 之後的網址前後是沒有引號包夾的，這會造成 <code>HTMLParser</code> 解析時的錯誤。本來是想在 Parse 前把這個連結整個拿掉的，不過算了，這只是個小工具，不需要也不應該大費周章；所以用簡單的 hack 來解決就行。程式碼中的底下兩行有點突兀 (行號 13, 14)，其實就是在幫上述連結加引號。</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">html</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;href=http&#39;</span><span class="p">,</span> <span class="s">&#39;href=&quot;http&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">html</span> <span class="o">=</span> <span class="n">html</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s">&#39;ch_qz&#39;</span><span class="p">,</span> <span class="s">&#39;ch_qz&quot;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>另一個麻煩就是 IMDb 其實並不真正支援 Unicode，畢竟是那麼多年的老網站了。所以在英文字母之外的文字都會以 <code>&amp;#x1234;</code> 之類的形式出現。例如電影 "8½"，這兩個字實際在 HTML 中的樣子是 <code>8&amp;#xBD;</code>。這邊要將十六進位碼（在本例中為 "xBD"）轉為對應的 Unicode Char，實際的作法可以看代碼中的 <code>UnicodeWriter.handle_charref()</code> 這個方法。</p>

<p>程式完成後，接著只要執行程式，就會得到以日期為檔名的 CSV 檔，本文最上方的圖片就是成果。圖片中的表格是在 Finder 快速檢視的視窗，如果想要在 Finder 中按空白鍵就能檢視 CSV 檔的內容，可以參考<a href="/blog/2012/03/11/tips-for-mac-os-x-quick-look/">這篇文章</a>。</p>

<p>喔，對了，寫這程式需要花多少時間？嗯…大概比寫這篇文章的時間還要少一點吧……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 與 Ruby 的模組安裝]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/29/install-module-in-python-and-ruby/"/>
    <updated>2012-03-29T08:39:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/29/install-module-in-python-and-ruby</id>
    <content type="html"><![CDATA[<p>其實這兩個語言的模組安裝都很簡單。不過我不是個成天都在安裝新玩意兒的人，偶爾因為業務需求或是心血來潮想要裝個模組，卻又忘了指令怎下，免不了得又得上網搜尋。</p>

<p>雖說資料不難找，但每次都問 google 也是折騰，索性自己記個筆記，將來若有需要時，翻自己筆記總比上網搜尋來得快速。</p>

<p>更重要的是，才不會因為上網問 google 然後<strong>開一堆網頁邊看又繼續邊開連結搞到最後開了一大堆自己好像有興趣但其實跟原本問題一點也不相干的文章</strong>。我真是太容易<em>分心</em>了。</p>

<!-- more -->


<h2>Python 的 easy_install</h2>

<p>Python 的 easy_install 人如其名，真的很 easy。比方說我看到 <a href="http://pypi.python.org/pypi/Markdown">Markdown 2.1.1 : Python Package Index</a> 這個套件想要安裝，我只要到終端機輸入下面指令就行了：</p>

<pre><code>$ easy_install markdown
</code></pre>

<p>要刪除模組的話則是輸入：</p>

<pre><code>$ easy_install -m markdown
</code></pre>

<p>easy_install 主要的功能就是安裝，如果需要進一步說明，可以參考</p>

<pre><code>$ easy_install --help
</code></pre>

<h2>Ruby 的 gem</h2>

<p>相比之下，Ruby 的 gem 就不僅僅只是個安裝工具，它是個完整的<strong>套件管理工具</strong>。例如我想安裝一個叫 <a href="http://toodledo.rubyforge.org/toodledo/">toodledo</a> 的套件，可以這麼輸入：</p>

<pre><code>$ gem install toodledo
</code></pre>

<p>或是指定版本號：</p>

<pre><code>$ gem install toodledo --version 1.3.8
</code></pre>

<p>移除的話是：</p>

<pre><code>$ gem uninstall toodledo
</code></pre>

<p>我想知道有沒有跟 markdown 相關的套件，我可以用如下方式尋找：</p>

<pre><code>$ gem list markdown --remote
</code></pre>

<p>如果沒有加上 <code>--remote</code>, 則會列出本機已經安裝的套件。</p>

<pre><code>$ gem list
</code></pre>

<p>更詳細的說明可以參考線上說明。</p>

<pre><code>$ gem help
</code></pre>

<h2>在 Mac 上</h2>

<p>上面這兩個工具程式在 Mac OS X 中都是預設已經安裝在系統中的，省了不少麻煩。安裝的過程如果有遇到權限問題，那麼就在上面所列的指令最前面加上 <code>sudo</code> 再執行就好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 遞迴處理路徑下檔案與資料夾]]></title>
    <link href="http://tzengyuxio.me/blog/2012/01/30/python-path-walk/"/>
    <updated>2012-01-30T16:13:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/01/30/python-path-walk</id>
    <content type="html"><![CDATA[<p>取得某個路徑下的所有檔案與資料夾是經常會使用到的功能，尤其是在寫一些小工具來處理硬碟上的檔案時。早先我都是用傳統寫 C++ 的方式來思考，所以在 Python 的文件中找到了 <code>listdir()</code> 這個函式，然後寫了類似以下的代碼：</p>

<!-- more -->


<p>``` python
import os</p>

<p>def doInDir(somedir):</p>

<pre><code>print somedir
fileList = os.listdir(somedir)
for f in fileList:
    fullpath = os.path.join(somedir, f)
    if os.path.isdir(fullpath):
        doInDir(fullpath)
    elif os.path.isfile(fullpath):
        print fullpath
</code></pre>

<p>doInDir("/tmp/")
```</p>

<p>不過最近發現在 Python 下做事其實可以更簡單，內建的 <code>os.walk()</code> 就提供了非常強大的功能，使用的方式如下：</p>

<p>``` python
import os</p>

<p>for root, dirs, files in os.walk("/tmp/"):</p>

<pre><code>print root
for f in files:
    print os.path.join(root, f)
</code></pre>

<p>```</p>

<p>相比之下，同樣的功能用 <code>os.walk()</code> 就精簡了許多。上面兩段程式碼做的事情基本上是一樣的，都是列出指定資料夾下的所有檔案與子資料夾；不過有個小小地方需要注意一下，就是用兩種方法索處理的內部順序並不相同。<code>listdir()</code> 會按照深度優先搜索的順序，一層一層往下深入，其中檔案與資料夾的先後順序是交替穿插的；而 <code>os.walk()</code> 因為把檔案與文件夾都歸類好放在各自的 list 中，因此兩者的處理是分開的。以下是上面兩段程式針對同一個範例資料夾的輸出，可以看出處理順序的不同。</p>

<h3><code>os.walk()</code></h3>

<pre><code>/testtree/
/testtree/1file
/testtree/3file
/testtree/2dir
/testtree/2dir/21file
/testtree/2dir/24file
/testtree/2dir/22dir
/testtree/2dir/22dir/221file
/testtree/2dir/23dir
/testtree/4dir
</code></pre>

<h3><code>os.listdir()</code></h3>

<pre><code>/testtree/
/testtree/1file
/testtree/2dir
/testtree/2dir/21file
/testtree/2dir/22dir
/testtree/2dir/22dir/221file
/testtree/2dir/23dir
/testtree/2dir/24file
/testtree/3file
/testtree/4dir
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 計算檔案的 CRC32 驗證碼]]></title>
    <link href="http://tzengyuxio.me/blog/2012/01/24/python-crc32/"/>
    <updated>2012-01-24T17:02:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/01/24/python-crc32</id>
    <content type="html"><![CDATA[<p>用 Python 計算 CRC32 很簡單，只要使用內建的 binascii 模組即可。</p>

<p><code>python
import binascii
print binascii.crc32("hello world")
</code></p>

<p>要反覆計算的話，可以用：</p>

<p><code>python
crc = binascii.crc32("hello")
crc = binascii.crc32(" world", crc)
</code></p>

<p>其中的第二行，將前一步驟所計算的 CRC 結果作為參數再次傳入函式中。</p>

<p>如果要計算檔案的 CRC32，可以透過以下函式來計算：</p>

<!-- more -->


<p>``` python
import binascii
def computeFileCRC(filename):</p>

<pre><code>try:
    blocksize = 1024 * 64
    f = open(filename, "rb")
    str = f.read(blocksize)
    crc = 0
    while len(str) != 0:
        crc = binascii.crc32(str,crc) &amp; 0xffffffff
        str = f.read(blocksize)
    f.close()
except:
    print "compute file crc failed!"
    return 0
return crc
</code></pre>

<p>```</p>

<p>上面比較特別要注意的是這行：</p>

<p><code>python
crc = binascii.crc32(str,crc) &amp; 0xffffffff
</code></p>

<p>根據官方文件，在 Python 2.x 的版本中，binascii.crc32 所計算出來的 CRC 值域為 [-2<sup>31,</sup> 2<sup>31-1]</sup> 之間的有號整數，為了要與一般 C 所實作的 CRC 結果作比對，需要將其轉為無號整數，所以加上 <code>&amp; 0xffffffff</code> 這段來做轉換。如果是 Python 3.x 的版本，其計算結果為 [0, 2<sup>32-1]</sup> 間的無號整數，因此不需額外加上修正。</p>

<p>另外，上述 <code>computeFileCRC</code> 計算的結果為十進位整數，而通常見到的 CRC32 字串會以 16 進位方式表示，所以可以這樣轉換：</p>

<p><code>python
crcstr = hex(computeFileCRC("somefile"))[2:]
</code></p>

<p>或是，如果要直接使用在字串中，也可以用 format 的方式轉換成 16 進位格式：</p>

<p><code>python
print ("crc32: %08x" % computeFileCRC("somefile"))
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Eclipse 開發 Python]]></title>
    <link href="http://tzengyuxio.me/blog/2011/12/26/eclipse-for-python/"/>
    <updated>2011-12-26T11:25:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2011/12/26/eclipse-for-python</id>
    <content type="html"><![CDATA[<p>這篇文章是<a href="/blog/2011/12/26/eclipse-setup-note/">〈Eclipse 安裝筆記〉</a>系列之一，算是個人的安裝過程紀錄。以下是安裝時的環境參考：</p>

<ul>
<li>作業系統：Mac OS X 10.7.2</li>
<li>程式版本：Eclipse Indigo 3.7.1,IDE for Java Developers</li>
</ul>


<!-- more -->


<p>步驟流程如下</p>

<h3>Step 1. 準備 Python 的編譯環境</h3>

<p>同樣的，這步驟在 Mac 上可以略過。在 Windows 上要做的也很簡單，就上 Python 官網抓個 Python Binary 來安裝就好了。相對於 C++ 的準備工作來得簡單些。</p>

<h3>Step 2. 安裝 PyDev</h3>

<p>在 Eclipse Indigo 之後，套件的安裝變得簡單許多，只要透過滑鼠就可以搞定。首先，先上 <a href="http://marketplace.eclipse.org">Eclipse Marketplace</a>, 一個類似 firefox Extensions 或 Android Market 的地方。搜尋「pydev」，找到後點進去套件頁面，在套件 Logo 下可以看到一個「Install」按鈕，只要將該按鈕拖曳到 Eclipse 視窗中，就可以開始安裝了。</p>

<p><span class='caption-wrapper'><img class='caption' src='http://3.bp.blogspot.com/-C_V3nxc2Z0I/TvfjPTDCbfI/AAAAAAAAJFU/ygD2IDbYz1k/s800/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-12-26+%25E4%25B8%258A%25E5%258D%258810.58.51.png' width='' height='' alt='拖曳圖中紫色說明區塊所指向的按鈕就能直接安裝' title='拖曳圖中紫色說明區塊所指向的按鈕就能直接安裝'><span class='caption-text'>拖曳圖中紫色說明區塊所指向的按鈕就能直接安裝</span></span></p>

<h3>Step 3. 開始寫 Python</h3>

<p>安裝完後重開 Eclipse，如果在選單「File」→「New」→「Project」的對話視窗有看到如下圖的 PyDev 選項資料夾，就表示安裝成功了，可以開始寫 Python 的程式。</p>

<p><img src="http://1.bp.blogspot.com/-kvvmlpzhScs/TvfoxGUi98I/AAAAAAAAJFs/xaKtFOwcTQk/s800/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-12-26+%25E4%25B8%258A%25E5%258D%258811.08.08.png" alt="" /></p>

<p>不過，等等，要讓齒輪動起來，還少了點東西。CDT 可以自動找到 C++ Compiler 的所在，可是 PyDev 不行，我們得手動指定 Python 直譯器的路徑。</p>

<p>從選單列開啟 Eclipse 的「偏好設定」，切到 PyDev 如下的頁面，點選上半部視窗的「New...」按鈕，輸入路徑 <code>/usr/bin/python</code>，至於名字可以任意輸入，我習慣加上個版本號。完成之後，PyDev 會自動抓取 <code>PYTHONPATH</code>，也就是下圖中下半部份的視窗。好在這部份不用傷神輸入。</p>

<p><img src="http://2.bp.blogspot.com/--dQy7oHi8XU/Tvfockstk5I/AAAAAAAAJFg/s59aFMnJvZ4/s800/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-12-26+%25E4%25B8%258A%25E5%258D%258811.18.55.png" alt="" /></p>
]]></content>
  </entry>
  
</feed>
