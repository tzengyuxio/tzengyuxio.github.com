<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: talks | Tzeng Yuxio]]></title>
  <link href="http://tzengyuxio.me/blog/categories/talks/atom.xml" rel="self"/>
  <link href="http://tzengyuxio.me/"/>
  <updated>2012-04-18T07:12:33+08:00</updated>
  <id>http://tzengyuxio.me/</id>
  <author>
    <name><![CDATA[Tzeng Yuxio]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[我不和運氣差的人合作，嗎？]]></title>
    <link href="http://tzengyuxio.me/blog/2012/04/11/to-hire-lucky-or-unlucky-its-a-question/"/>
    <updated>2012-04-11T10:44:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/04/11/to-hire-lucky-or-unlucky-its-a-question</id>
    <content type="html"><![CDATA[<p>最近讀到 <a href="http://raganwald.posterous.com/i-dont-hire-unlucky-people">I don't hire unlucky people - raganwald's posterous</a> 這篇文章，有些想法跟 <a href="http://mr6.cc/?p=7363#more-7363">你有膽量說：「我不和運氣差的人合作」？ (Mr. 6)</a> 這一篇所寫的不太一樣。想法不同也就算了，文章本來就是個別讀者與單一作者之間的心靈互動，讀者不同，互動不同，激發出的想法自然也不同，這無可厚非。</p>

<p>不過對於文章內容的解讀也不一樣，這讓我不由得想寫一篇文章來談談 "I don't hire unlucky…" 這篇的內容。這篇文章很長，以對話小說式的方式來描述，講述如何節省 hire people 的時間與 hiring 時的考量，我懶得逐字翻譯，所以會簡單帶過故事內容。</p>

<h2>Part 1</h2>

<p>故事可以分成上下兩部分。第一個部分有兩個主角，Bertram 和 Ernestine，Bertram 負責招募零售商店的學徒，Ernestine 的工作則是在招募軟體開發的 programmer。Ernestine 有天問 Bertram，她手上有上百份履歷，要怎麼減少不必要的電話與面試呢？</p>

<p>Bertram 說很簡單，他拿起一整疊履歷，丟掉一半，然後回答，<strong>「不要雇用運氣不好的人就好啦。」</strong>Ernestine 聽了之後想要試試看，於是回去問 Mark 意見，Mark 是她公司的 CFO 以及天使投資人，對於軟體產業也有些瞭解。Mark 點出了 Ernestine 與 Bertram 環境的不同。</p>

<blockquote><p>Bert 那邊有相當多符合條件的人 (qualified people) 在應徵他的工作，假設 100 個裡面有 50 個好了，就算他刪去一半的人，平均來講，剩下的 50 個裡也還有 25 個符合條件的人可以挑選。而妳在招募的 programmer, 可能一百份履歷裡面只有一兩個符合資格的，<strong>妳如果一口氣刷掉一半的履歷，妳可能在剩下的那 50 份裡完全找不到半個合適的人。</strong></p></blockquote>

<p>於是 Ernestine 放棄了 Bertram 告訴她的方法。開始不斷嘗試、調整，試著去找出自己的方法。</p>

<h2>Part 2</h2>

<p>故事來到兩年後。Oscar 是 Ernestine 公司裡的程式主管，他也有面對一堆履歷不知從何著手的問題，於是像她的上司 Ernestine 請教。</p>

<p>Ernestine 告訴 Oscar，首先，她不再去注意<strong>一份履歷是否「專業」</strong>，比方說履歷的格式或是文字中是否有錯字等等。因為去在意這些東西，其實<strong>跟隨機丟掉一半運氣不好的履歷，是沒什麼兩樣的</strong>。</p>

<p>於是 Oscar 提出質疑，Oscar 的質疑也是我們一般會有的想法：「可是從履歷的完整度，我們可以看出求職者的用心，知道對方是不是有熱誠想要進我們的公司不是嗎？」</p>

<p>Ernestine 的回答點出了重點。如果我們今天有 50 個不錯的人才，那我很樂意找出到底哪一半的人有進公司的熱誠，哪一半沒有。但如果我們今天的履歷裡有 99 個庸才跟一個天才，<strong>那我的首要目標是要想辦法找出這一個天才是誰，至於誰比較有進公司的熱誠則是次要的了</strong>。</p>

<p>Ernestine 繼續說下去，她用同樣的想法貫穿整個人才的挑選：她挑或不挑一個人，是決定於與工作技能本身相關的直接或間接衡量 (direct measurement or indirect measurement)，例如學歷算是間接衡量指標。</p>

<p>講到這邊，Oscar 又打斷，並且說明了學歷的重要，學歷反應許多資訊，不應該只是間接衡量。Ernestine 大致上同意 Oscar 的看法：</p>

<blockquote><p>幾乎每一個我們所雇用的都有大學學歷，但我在看履歷時不會依照他們的學位或學校排出優劣。我只是看他們的工作經驗或是提供的代碼範例。而結果就是，我們所想要的每個有經驗的人才都具有大學學歷。</p></blockquote>

<p>但是她接下來的回答很有意思，值得令人多加思考：</p>

<blockquote><p>然而把「關連性 (correlation)」與「因果關係 (causation)」兩件事搞混是非常危險的。而更糟糕的則是把「關連性」跟「必要性 (necessity)」搞混。如果說，有念過大學對 programmer 來說是一件好事，那麼我們在看他的經歷、程式代碼，或是與之面談時，也可以發現他的能力優秀。</p></blockquote>

<p>所以我的理解是，念過大學可以幫助一個程式設計師成長，但這些成長會表現在他的工作經歷或是代碼上。所以經歷或是代碼是直接的衡量標準。大學教育與優秀的程式設計師有關連性，但不是必然的因果，更不是必要的條件。</p>

<p>Ernestine 繼續說到，當她在看求職者的 blog 時也用同樣的標準去檢視。比如說有個求職者喜歡攀岩，聽起來不錯，公司裡也有許多同事喜歡攀岩，不過 Ernestine 會忽略掉興趣這項訊息。</p>

<blockquote><p>畢竟，如果因為興趣不對就被刷掉，是非常不走運 (unlucky) 的。而我不想僅僅只是因為一份履歷不走運就把它刷掉。</p></blockquote>

<p>這裡有句重點：</p>

<p><strong>hiring programmers, not ascetics or rock stars</strong></p>

<p>Ernestine 甚至會抗拒去查看求職者在社交媒體上分享的資訊。她不想因為求職者在政治、興趣等觀點上與她志趣相投或是理念不同，而產生偏見，進而影響求職者被錄用與不錄用（這在美國也是違法的），同時這對公司也不是件好事。她雇用時，<strong>單純只考量求職者在專業技能上是否滿足條件</strong>。從招聘的觀點來看，去考慮對方是否跟你合不合得來，其實就只是種運氣的問題，而非適任不適任的問題。</p>

<p>Ernestine 最後提到招募廣告，她現在開始使用平舖直敘的文字廣告來招募。她之前也曾使用過「徵求忍者！搖滾巨星！」之類的誇張廣告。但她發現這類的廣告也許會吸引到喝 Dry Martini 的人（意指比較外向積極），但是那些不喝 Dry Martini 不見得就不適合這份工作。所以登「我們需要忍者！需要超級巨星！」這類廣告，跟單單只是因為不喜歡沒運氣的人而刷掉一半，其實沒什麼兩樣。</p>

<p>接下來的問答很有趣，programmer 應該都會有更深的體會。Oscar 問到：「要是如果忍者廣告比起直白廣告真的能吸引到更多符合條件 (qualified) 的人前來應徵呢？」</p>

<p>Ernestine 的回答相當妙了：「當你寫程式時，你怎麼知道哪一段 code 需要最佳化呢？」Oscar 回答：「我會去測量（measure）, Premature optimization is the—Oh, I get it!」這邊 Oscar 的話雖然講到一半，但是這句話相信 programmer 都應該熟悉：</p>

<blockquote><p>Premature optimization is the root of all evil.</p>

<p>過早優化是萬惡之源。</p>

<p>-- Donald Knuth</p></blockquote>

<p>所以 Ernestine 會有這樣的結論也是測量過後的結果。她說，登廣告找人，跟登廣告賣東西都是一樣的，你必須追蹤測量所有數據 (track &amp; measure everything)，你才能分析，知道有沒有效果。</p>

<h2>結論</h2>

<p>所以，Ernestine 減少處理上百份履歷時間的方式，並不是用什麼隨機丟掉一半，把運氣不好的人排除掉。也不是什麼像下面這段所說的尋找一個點，一個感動、注意、雙眼為之一亮的點。不是尋找什麼鳳毛麟角。</p>

<blockquote><p>作者建議，當100選1的時候，應該直接隨便看一張履歷表，看看此人是否有哪個「點」讓你感動、讓你注意、讓你雙眼為之一亮？不是想辦法刪去，而是「尋找」那個鳳毛麟角之特色。</p></blockquote>

<p>Ernestine 的方法很簡單。今天如果我要找程式設計師，<strong>我就只專注在相關的技能、經驗或作品上。而不是看著履歷表上洋洋灑灑一大堆與適任與否無關的資訊或情報。</strong></p>

<hr />

<p>看完了這個故事，是不是覺得英文閱讀能力很重要呢？多培養自己的英文閱讀，直接吸收第一手資訊，才能夠間接提高自己的好運度喔！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你怎麼知道如何判斷運氣好壞？]]></title>
    <link href="http://tzengyuxio.me/blog/2012/04/11/how-do-you-know-you-can-hire-lucky-people-by-this-way/"/>
    <updated>2012-04-11T08:53:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/04/11/how-do-you-know-you-can-hire-lucky-people-by-this-way</id>
    <content type="html"><![CDATA[<p>這幾天在 Facebook 出現一篇分享率很高的文章，叫做〈<a href="http://mr6.cc/?p=7363#more-7363">你有膽量說：「我不和運氣差的人合作」？ (Mr. 6)</a>〉，帶給我很多想法，在這裡分享一下。</p>

<p>什麼叫做「不和運氣差的人合作」？</p>

<p>這位作者舉了一個例子，如果你是某間店的店主，現在要找店員，現在收到了 100 份履歷，但你很忙，沒有時間一個一個看。最簡單的方式就是索性從 100 份中<strong>隨機挑出 10 份</strong>，然後從 10 份中挑出一個最棒的。至於那些被過濾掉的 90 份，只能怪他們<strong>運氣不好啦</strong>！</p>

<p>聽起來很帥氣，不是嗎？</p>

<p>這過濾的方法真是簡單、漂亮又優雅－－但我深深覺得還有哪裡不夠。</p>

<p>「你怎麼確定被挑出的代表運氣好？萬一，我是說萬一，你的店下個月突然發生意外，週轉不靈發不出薪水，那麼<strong>被挑出的反而都是倒楣的人</strong>，真正運氣好的人早在你挑的時候成為漏網之魚，從你手中逃掉啦！」</p>

<p>是的，華生，你突破盲點了。</p>

<p>我相信，運氣好的人是會互相吸引的。所以在我使用這個「隨機運氣過濾法」之前，我得要先確定一下自己的運氣到底是好是壞：如果我運氣好，那麼被我挑到的人他們也都是具有好運的；如果我生來就是不走運，那麼沒被我挑到的人才是真正運氣好的人。只要我能夠知道自己的運氣是好或壞，我就能夠知道到底我要從被我挑出的那 10 份裡面去挑人，還是從被我放棄的那 90 份裡面去挑人。</p>

<p>那麼要怎麼確定自己的運氣是好或壞呢？我想到兩個方法。第一方法呢，就是如法炮製，我把我的履歷寄到另外一間採用同樣「隨機運氣過濾法」的公司，如果有被挑上，那我就是運氣好；如果沒被挑上，那我就是壞運氣－－等等，不對，我怎麼知道另外一間公司負責挑選員工的雇主也是好運氣呢？如果我被挑上，但是另外一間公司的雇主是壞運氣的，那不就表示我被挑上但其實是壞運氣的？這豈不成了無窮迴圈？</p>

<p>好吧，看來第一個方法行不通，換下一個。第二個方案就比較簡單了：<strong>去買樂透</strong>。中了就中了，沒中就沒中，一翻兩瞪眼，多乾脆。不過要是我今天運氣好，中了樂透，我索性就把店收了，退休度假去，何必還在那邊辛辛苦苦地煩惱到底要雇用什麼樣的員工呢？</p>

<hr />

<p>每個人都想要和「運氣好」的人一起合作，但問題就出在於什麼叫做「運氣好」？成為「在 100 份履歷中被挑出的 10 份中的其中之一」就算運氣好嗎？我不以為然。即便是中了樂透，也未必是就真的是運氣好的人－－對於許多心理尚未做好準備的人，中了樂透往往是人生悲劇的開始：中了樂透之後到達人生最高潮，然後朋友反目、妻離子散、揮霍度日、散盡家產這樣的故事俯拾皆是，我也懶得舉例了。所謂<strong>「塞翁失馬，焉知非福？」</strong>一件事情究竟是好是壞，其實是沒辦法從當下發生的事情本身來判斷的。</p>

<p>所以到底什麼算是「運氣好」的人呢？我覺得只要「有做好準備」的人，就很容易遇到好運氣。運氣這東西，不外乎就是種機率。即使單一事件成功的機率極低，然而當你準備的越多，準備的越周全，這個極低機率發生成功的可能性就越大，成功的可能性比其他人來得大，自然就可以看做是「運氣好」的人了。</p>

<p>讓我們這樣來看：假設開發一百款遊戲中只有一款會成功，也就是說，成功的機率是百分之一，失敗的機率是 0.99。那麼，<a href="http://www.rovio.com/">作了 52 款遊戲的公司</a>，至少有一款成功的機率是多少？換個角度想或許會比較簡單，52 款遊戲全部都失敗的機率是多少？</p>

<p>答案是，52 款遊戲都失敗的機率是 59%，所以相反的，有逾四成的機率這家公司能夠有一款以上的成功遊戲。<strong>四成</strong>跟<strong>百分之一</strong>，很大的差距不是？而只要能有一款成功的遊戲，這家公司就能夠開始踏上好運的高速公路，吸引到更多「運氣好」的員工一起加入，進入正向循環。</p>

<p>所以，運氣人人都有，但你準備的越多越充分，你就能夠比其他人來得更強運。</p>

<hr />

<p>關於給六先生帶來許多想法的這篇 <a href="http://raganwald.posterous.com/i-dont-hire-unlucky-people">I don't hire unlucky people - raganwald's posterous</a>，我運氣很好，剛好也看了。有一些不太一樣的解讀。可惜這裡空白的地方太小，寫不下，只好<a href="/blog/2012/04/11/to-hire-lucky-or-unlucky-its-a-question/">另外寫一篇來討論</a>了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近的 7-ELEVEN 啊]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/07/seven-eleven/"/>
    <updated>2012-02-07T10:48:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/07/seven-eleven</id>
    <content type="html"><![CDATA[<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-CMrUObFVmYE/TzCC180FvYI/AAAAAAAAJRU/_Ut6VVenz_c/s1600/IMG_2123.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="241" src="http://3.bp.blogspot.com/-CMrUObFVmYE/TzCC180FvYI/AAAAAAAAJRU/_Ut6VVenz_c/s640/IMG_2123.jpg" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">重慶南路的7-11由街角處（現為艾美麗）搬移到了巷子中。攝於2012-01-30</td></tr></tbody></table>


<div class="separator" style="clear: both; text-align: left;"><br /></div>


<div class="separator" style="clear: both; text-align: left;"></div>


<div style="text-align: -webkit-auto;">最近注意到有幾家 7-11 作了同樣的事情，就是從原本的街角的黃金地帶搬到附近不遠處，距離原店址大約三四戶的地方。如果只有一家店搬，我只會單純想到是租約到期之類的原因，但短時間內同時見到數家 7-11 都有類似的搬遷動作，就不得不讓人去思考背後是否有某種經營策略上的調整？</div>


<div style="text-align: -webkit-auto;"></div>


<br /><div style="text-align: -webkit-auto;">顯而易見的，這樣的搬遷使得原本 7-11 店鋪的可見性降低，畢竟街角是路口四方向都可以看到的點，來往的人潮也最多，而路邊或巷邊的 7-11 則只有同條路上的人才能見到。基於以上道理，三角窗（街角）的租金向來也比周遭店面來得高，甚至會高到倍數以上。不過我不覺得 7-11 搬到非街角地段，純粹只有租金考量。</div><div style="text-align: -webkit-auto;"><br /></div><div style="text-align: -webkit-auto;">就我看來，7-11 的搬遷，其實某種程度反應了便利商店（尤其是 7-11）在我們生活中扮演的角色，已經從「剛好、順便去一下」的商店，成為「被尋找的主體」。</div><div style="text-align: -webkit-auto;"><br /></div><div style="text-align: -webkit-auto;">住在都市的朋友，相信都會在自己或周遭朋友上看到一個現象：就是每當前往一個風景區或新地點時，總是會下意識尋找「麥當勞」或其他熟悉的連鎖速食店的店面。就算不一定會去吃，但至少在想不到吃什麼時，也不失為一個選擇。</div><div style="text-align: -webkit-auto;"><br /></div><div style="text-align: -webkit-auto;">前面所提到的 7-11，便是成為這樣的一個存在。我出門不是為了「去隨便一間商店買個喝的」，而是為了「要去 7-11 領博客來的書／繳水電費／去 ATM 領錢」這樣明確的目的（然後順便買個喝的）。所以 7-11 就算開在不顯目的非三角窗地帶，也不怕你不來，因為你會去找他。</div><div style="text-align: -webkit-auto;"><br /></div><div style="text-align: -webkit-auto;">所以進一步觀察，不難發現到店址的搬遷只是變化之一，搬遷後的店面通常也會伴隨著店面空間的擴大。而空間越大，就能提供更多硬體上的服務，包括 ATM、用餐區，甚至是廁所。以往是鄉下省道旁比較容易見到有帶停車場與廁所的 7-11，作為簡易休息區的替代，而現在都會區中很多 7-11 也開始都有提供廁所了。</div><div style="text-align: -webkit-auto;"><br /></div><div style="text-align: -webkit-auto;">寫到這邊讓我想起以前短暫待過出版社時，曾經問過上頭的編輯一個問題：「為什麼有些雜誌的 Logo 標準字體蓋在封面人物上，而有些則是封面人物蓋在 Logo 字體上？哪一種比較好？」</div><div style="text-align: -webkit-auto;"><br /></div><div style="text-align: -webkit-auto;">編輯告訴我，沒有哪一種比較好，純粹是考量出發點不同。至於為什麼會有不同的作法？其實答案就和 7-11 在不在街角開店是一樣的。</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的程式語言之路]]></title>
    <link href="http://tzengyuxio.me/blog/2011/07/26/my-way-as-a-coder/"/>
    <updated>2011-07-26T10:54:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2011/07/26/my-way-as-a-coder</id>
    <content type="html"><![CDATA[<p>從大學以來，這十幾年的工作與生活總與程式設計脫不了關係。前前後後寫了不少的 Code, 也接觸過許許多多不同的 Programming Language。這邊就來記錄一下自己現在還有印象的程式語言，也許十年之後再來回顧，又是另一種不同的想法吧。</p>

<h2>QBasic</h2>

<p>高中時候獲得人生的第一台電腦，當時還是 DOS 的年代，每個裝了 MS-DOS 的電腦都會內附 QBasic。還記得用 QBasic 寫過一些簡單的遊戲，像是 1A2B、迷宮產生之類的，但是真要說自己寫的其實也不是，很多都是照著當時雜誌（例如「第三波」）上的代碼 key 進電腦中而已。</p>

<h2>Turbo C++</h2>

<p>說真的，我已經不記得是 Turbo C 或是 Turbo C++ 了，但可以肯定的一點是，我當時一定只用到 C 的語法概念，沒有物件，只有單純的流程控制，對指標有似懂非懂的感覺。其實嚴格說起來，Turbo C++ 只能算是種 IDE，不算程式語言。</p>

<h2>Borland C++ Builder</h2>

<p>這也是 IDE，不過因為同樣的 C++ 語言在不同的 IDE 與不同的基本函式庫下會呈現出截然不同的個性，所以我就單列了。記得在我還是學生的時代，BCB 的出現帶來革命性的軟體開發方式，只要簡單拉一拉就可以有個像樣的視窗程式。當時蔚為風潮，我也趕流行玩了一陣子，不過也沒拿來寫過什麼東西就是。</p>

<h2>Visual Basic</h2>

<p>很簡單的程式語言。我曾經用 VB 寫過一個「光榮三國志臉譜瀏覽程式」的工具，可以讀取《三國志》四代、五代的頭像檔案。可惜現在原始碼與二進位檔都沒有留下，只有留下當時<a href="http://webbbs.gamer.com.tw/readSrhPost.php?brd=KOEI&amp;pos=448&amp;author=tzengyu&amp;keyword=">在巴哈姆特發佈時的帖子</a>。如果有人看到這篇文章，又碰巧有留當年的程式的話，歡迎跟我聯絡。也許哪天我心血來潮會再重寫一遍也說不定。 ;-)</p>

<h2>Common Lisp &amp; ML</h2>

<p>這兩個都是因為學校的課程而接觸的。剛開始學 Lisp，腦袋會打結，就是一層又一層的括號，常見的數學運算也都得換成前置式；不過作業寫到後來我還蠻喜歡寫 Lisp 的感覺。ML 也是，跟一般我們常見的 C-like 語法結構都不一樣。那時候我還蠻愛這兩個語言的，一直到畢業後的幾年間，我只要重灌電腦完要重新安裝軟體時，我就會把這兩個程式語言給裝進去，就像現在我會安裝 Python 一樣。</p>

<h2>ASP</h2>

<p>大四時接了一個學姊的家教網案子，那時候用的開發語言就是 ASP。不過說真的現在我對 ASP 都忘光光了。附帶一提，那個網站現在還活著，當然已經轉型了就是，不再是以媒介家教資訊為主。</p>

<h2>Java</h2>

<p>學生時代有寫過一些 Java applet，那時候的網頁很流行水波效果，幾乎十個個人網站有八個的 banner 都要來一下水波盪漾。Applet 也是淺嚐個大概而已，倒是 Java Servlet 因為工作的關係寫了蠻長久一段時間，從學生時代到退伍後都還有在接觸。話說事隔多年後，因為最近工作的關係，又開始跟 Java 打交道了。</p>

<h2>HTML &amp; JavaScript</h2>

<p>還在唸書時因為有協助維護一個購物網站，因此免不了要碰到 HTML 與 Java Script 的撰寫。當時那個購物網站使用的技術，有一部分是上面提到的 Java Servlet，另外也有用到 PHP 的部份。之後過了好幾年，有一個跟朋友合作開發 Facebook 遊戲的機會，在那次開發中又重新溫習了一次 Java Script，並且大量採用 Ajax 技術。可惜那個遊戲在發佈之前就胎死腹中了。</p>

<h2>PHP</h2>

<p>最主要就是上面提到的購物網站與 Facebook 遊戲這兩個案子用到，不過卻前前後後持續寫了蠻長久的一段時間。維護購物網站的時後基本上都還是程式碼硬幹，到了寫 Facebook 遊戲的時候，就有現成的框架了，我選了一個叫 CodeIgniter 的框架，大體上類似 ROR 的寫法。其實一開始選的是 CakePHP，比較完整，不過真的是太龐大了，所以才換成 CodeIgniter。此外，由於以前經常安裝討論區、部落格、Wiki、購物車等網站套件，其中許多是 PHP 寫的，常常需要 hack 部分代碼，因此對 PHP 還算蠻熟悉的，有陣子甚至拿 PHP 當 Shell Script 來使用，用來解決手邊的小問題。</p>

<h2>SQL</h2>

<p>說到網站程式就不能不提到資料庫。前前後後接觸過一些不同的資料庫，學生時代在 IBM 打工時是 DB2，前面提到的購物網站是 MySQL，進了遊戲公司之後，陸續又接觸到 PostgreSQL、Microsoft SQL Server，Oracle。其實單就 SQL 來看的話都大同小異，各資料庫 Server 之間最大的差異性還是在 Server 的管理與調校上，以及各種千奇百怪的程式介接函式庫寫法。</p>

<h2>Shell Script</h2>

<p>除了用 PHP 當 Shell Script 外，在我還在第一家遊戲公司時，由於是在 Linux 平台上開發的關係，也用 BASH 寫了不少方便日常工作或是開發的 Script。有少部分的代碼用 Perl 寫，用 Perl 寫起來很快，不過寫完看起來真的像天書一樣，真的是「寫完即丟」的語言。在 Windows 上，也曾經用 Batch 檔或是 Power Shell 寫過一些臨時性的小工具。</p>

<h2>C++</h2>

<p>進入遊戲公司後，幾乎就一直過著與 C++ 分不開的生活。早先是在 Linux 下寫 Server，能用的就是 Emacs 或是 Vim，後來換了公司，改用 Visual C++ 寫，一開始我還真的很不習慣，這麼複雜而多功能的介面，有時常常不曉得從哪邊開始下手。雖然在念書時學過，但我是從進遊戲公司之後，才真正重新認識了 C++，學到物件導向、Template、設計模式、重構等概念。當然，上面有些概念是跨語言通用的，不過因為 C++ 是我這幾年來長期接觸的語言，自然也成為前述幾個概念的學習媒介。</p>

<p>C++ 是個頗具爭議性的語言，他使用者多，但批評者更多，C 語言的陣營批評 C++ 不夠簡潔、純粹，STL 更是把許多工作變成讓人摸不著頭的黑箱；反之 Java 或 C# 的支持者又覺得 C++ 不夠完善，要寫個功能還要到處找函式庫，同個功能可能還有好幾種不同的函式庫，不同的實作與不同的使用概念，令人眼花撩亂。我自己是覺得，C++ 雖然亂，雖然我也對此感到困擾，但是也正因為他的兼容並蓄，使得各種各樣的想法與實作都能在上面獲得實踐。不過話說回來，對於產品開發而言，有時候工具還是單純點好。</p>

<h2>Auto Hotkey Script</h2>

<p>為了玩 Facebook 遊戲更「方便」而去學的程式。有寫了餐城（Restaurant City）的自動撿垃圾、自動到別人家評分，以及 Farmville 的自動種植、收割、耕地等功能，Mafia Wars 的連續任務。這些工具都是自娛，沒有對外釋出。隨著社群遊戲不斷的改版，這些工具也早就失效不能使用了。</p>

<h2>Lua</h2>

<p>在之前待過的公司中有用過，之後自己出來做的案子也有用。雖然如此，自己還是覺得對 Lua 的使用還不夠熟。曾經有寫過一個專案，使可以整合 C++ 與 Lua / Python / Squirrel 這三種 Script Language，目的是可以從 C++ 呼叫寫在 Script 的函式，也可以反過來。不過當初只寫了一個方向（C++ 呼叫外部），反過來的方向由於各 Script 語言存在的差異較大，自己的能力也不夠，就沒繼續開發下去了。</p>

<h2>Python</h2>

<p>這語言已經成為我這一兩年來的最愛了。在 Script Language 的領域中，一開始我是對 Lua 比較有興趣的，畢竟公司專案在用，而且 WOW 的 Custom UI 也都是用 Lua 撰寫，有 Billizard 的光芒加持，自然讓人不得不多看 Lua 幾眼。不過自從寫過 Python 的 Code 之後，我發現寫 Python 的過程可以獲得一種純粹的程式撰寫樂趣，我面對的是「程式所要解決的問題」本身，而不再是陣列、記憶體配置、指標、堆疊等等這些瑣碎的雜事。去年開發一個簡單的動畫編輯器，就是以 Python + wxPython 作的；而最早接觸 Python 的起點呢？喔，那是為了寫一個 Travian 的找資源點的工具，比較了幾個語言後發現用 Python 來抓網頁資料進行解析最為方便，於是就一頭踏入 Python 的思考領域了。</p>

<h2>NSIS (Nullsoft Scriptable Install System)</h2>

<p>最近才開始摸的東西，是用來寫安裝程式的語言。除了一開始入門門檻稍高外，不算太難，只要跨進去後剩下的就簡單了。之所以說一開始稍難，是因為最簡單的安裝軟體也要做許多事情，畢竟安裝軟體可不像其他語言只要秀秀 "Hello World" 就算完成第一個程式了。NSIS 也有 function 跟 macro，不過 function 沒有傳入參數，反正所有變數都是全域，也就不用傳入什麼了；如果真的需要傳入參數的話，倒是可以用 macro，雖然意義上不是，但程式碼看起來更接近傳參數的函式。這算是最近寫 NSIS 的一個小小心得吧。</p>

<h2>Objective-C</h2>

<p>這是目前正在進行的專案所用的語言。如果熟悉 C++/Java/PHP 這類 C-like 的語言，要學 Objective-C 真的很快。比較大的不同在於 message 的概念，前面的幾個語言不管是 function 或是 method，都是圓括弧呼叫的方式，在 Objectiv-C 中，函式的呼叫變成了訊息的傳遞，而且每個變數都必須寫出變數名字。剛開始看的確會有些彆扭不習慣，但是徹底改用「訊息傳遞」的角度去思考理解的話，其實 Objective-C 的這種寫法還蠻可愛與口語化的。</p>

<h2>後記</h2>

<p>看了一下 <a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">TIOBE Programming Community Index for July 2011</a>，前十名的程式語言中，除了 C# 之外，有九個我都接觸過或多或長的一段時間。其實之前為了研究 XNA，也有稍微看過 C# 的 code，不過稍微看看也不算寫過就是。但是 Windows Phone 的開發免不了得靠 C#，或許再不久的將來有機會寫 C# 也說不定？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[七段你非看不可的 Lip Dup 影片]]></title>
    <link href="http://tzengyuxio.me/blog/2011/06/19/seven-lip-dup/"/>
    <updated>2011-06-19T07:01:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2011/06/19/seven-lip-dup</id>
    <content type="html"><![CDATA[<p>好爛的標題，實在是懶得想標題了，索性用個最常見且無腦的 "Top-List" Style。最近有段交大電子所拍攝的畢業影片超熱門，不但一鏡到底，而且還「倒映如流」。據說這叫「LIPDUB風」，上 YouTube 一找，果然還不少。底下就來紀錄一下我看過且覺得不錯的 LIPDUB 影片吧。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-6pFVGMTM2S8/Tf0ccdkvxOI/AAAAAAAAAQ0/3XehEFUWquU/s1600/%25E4%25BA%25A4%25E5%25A4%25A7%25E9%259B%25BB%25E5%25AD%2590100%25E7%25B4%259A%25E7%2595%25A2%25E6%25A5%25AD%25E5%25BD%25B1%25E7%2589%2587+LIPDUB.1080p.mp4_20110619_052846.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="180" src="http://3.bp.blogspot.com/-6pFVGMTM2S8/Tf0ccdkvxOI/AAAAAAAAAQ0/3XehEFUWquU/s320/%25E4%25BA%25A4%25E5%25A4%25A7%25E9%259B%25BB%25E5%25AD%2590100%25E7%25B4%259A%25E7%2595%25A2%25E6%25A5%25AD%25E5%25BD%25B1%25E7%2589%2587+LIPDUB.1080p.mp4_20110619_052846.jpg" width="320" /></a></div><br />在看影片前先來認識一下「什麼是 LIPDUB？」根據維基百科上的敘述，LIPDUB 應該寫作 Lip dub，代表 Lip synching (對嘴) 與 Audio dubbing (配音) 兩個縮寫字。也就是影片中的人物對嘴唱歌，錄製完成後，再把歌曲的原聲作為配音取代掉錄製影片中的聲音。<br /><br />這種形式曾經在國外形成一股風潮，許多學校的畢業影片都是採用 Lip dub 風格製作。這種影片看似簡單，實際上呢，也還不難就是－－如果只有對嘴配音的部份的話；不過其實很多以 Lip dub 風格製作的畢業影片都會在校舍之間走來走去，動員大量人力，甚至像交大學生一樣，還用倒拍的方式進行。要規劃設計、並且將這些想法付諸實現，那就真的不簡單、而且很不簡單了。<br /><br />1. <b><span class="Apple-style-span" style="color: red;">交大電子100級畢業影片 LIPDUB。</span></b>雖然是 Lip dub，但是沒什麼對嘴，不過倒著拍本來就不好對嘴，這也無可厚非。這支影片最神奇的地方，就是一路逆向播放的影片到了結尾時竟然變成正向播放了，如果看了幾遍看不出端倪的話，可以把後面括號內的字反白，裡頭有提示（<span class="Apple-style-span" style="color: white;">仔細注意 4:40 秒處，這不是真的一鏡到底</span>）。這段影片據說拍了 12 次（引用自 YouTube 影片下方評論），光想到要是拍失敗，地上的紙屑道具或黑板等東西就得清理掉後重新來過，就讓人不得不佩服這群學生的毅力與精神。<br /><br /><br /><div class="separator" style="clear: both; text-align: center;"><object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://2.gvt0.com/vi/tMjTYfebIRY/0.jpg" height="266" width="320"><param name="movie" value="http://www.youtube.com/v/tMjTYfebIRY&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><embed width="320" height="266"  src="http://www.youtube.com/v/tMjTYfebIRY&fs=1&source=uds" type="application/x-shockwave-flash"></embed></object></div><br />附帶一題，2010 台大藝術季也有拍過一段五分多鐘的影片，據稱是全球第一支華文 Lip dub，可惜台大那支影片裡學生的表情動作都顯得生澀僵硬，較感覺不到歡樂氣息，鏡頭的晃動幅度也很大，看起來有點不舒服，所以這裡就不附影片了。<br /><br />2. <b><span class="Apple-style-span" style="color: red;">Shorewood Lip Dub。</span></b>Shorewood 是華盛頓州的一間高中，這個影片原本是同屬華盛頓州的 Shorewood 與 Shorecrest 兩所高中學生的一項挑戰，要看看誰做的 Lib dub MV 更棒。從結果上來看當然是 Shorewood 勝出了。<br /><br />這部影片也是用「倒映法」的方式播放，同樣一鏡到底，更難能可貴的是，負責每個鏡頭主要角色的學生們，都很努力的在對嘴。要知道，在倒著拍的時後，你根本不知道你念的是什麼鬼。<br /><br /><div class="separator" style="clear: both; text-align: center;"><object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://3.gvt0.com/vi/T7TI-AJi2O8/0.jpg" height="266" width="320"><param name="movie" value="http://www.youtube.com/v/T7TI-AJi2O8&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><embed width="320" height="266"  src="http://www.youtube.com/v/T7TI-AJi2O8&fs=1&source=uds" type="application/x-shockwave-flash"></embed></object></div><br />對於他們倒拍影片過程有興趣的，還可以看看下面這段製作花絮（其實就是順向播放的影片啦）。<br /><br /><div class="separator" style="clear: both; text-align: center;"><object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://0.gvt0.com/vi/2bAWFWG8eYw/0.jpg" height="266" width="320"><param name="movie" value="http://www.youtube.com/v/2bAWFWG8eYw&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><embed width="320" height="266"  src="http://www.youtube.com/v/2bAWFWG8eYw&fs=1&source=uds" type="application/x-shockwave-flash"></embed></object></div><br />3.&nbsp;<b><span class="Apple-style-span" style="color: red;">LIPDUB - I Gotta Feeling (Comm-UQAM 2009)。</span></b>這是 UQAM (加拿大魁北克大學蒙特羅分校) 學生所拍的畢業影片。Lip dub 風格的畢業影片就是由這段影片所掀起的一股風潮，在這影片推出後，日本、西班牙、巴西、西班牙等國家都有學生使用同一首歌（I Gotta Feeling）來製作 Lip dub 影片<br /><br /><div class="separator" style="clear: both; text-align: center;"><object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://2.gvt0.com/vi/-zcOFN_VBVo/0.jpg" height="266" width="320"><param name="movie" value="http://www.youtube.com/v/-zcOFN_VBVo&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><embed width="320" height="266"  src="http://www.youtube.com/v/-zcOFN_VBVo&fs=1&source=uds" type="application/x-shockwave-flash"></embed></object></div><br />4.&nbsp;<b><span class="Apple-style-span" style="color: red;">Train - Hey, Soul Sister - LIPDUB UVic University (Official)。</span></b>這個是加拿大維多利亞大學拍攝的 Lip dub 影片，這支影片是讓我看了覺得最開心的一支。色彩明亮鮮豔，大家臉上都掛著笑容，感覺像是一場校園內的嘉年華會。<br /><br /><div class="separator" style="clear: both; text-align: center;"><object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://0.gvt0.com/vi/EeGDRSWB46w/0.jpg" height="266" width="320"><param name="movie" value="http://www.youtube.com/v/EeGDRSWB46w&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><embed width="320" height="266"  src="http://www.youtube.com/v/EeGDRSWB46w&fs=1&source=uds" type="application/x-shockwave-flash"></embed></object></div><br />5.&nbsp;<b><span class="Apple-style-span" style="color: red;">LIP DUB UPF "Wake me up before you go-go" (Barcelona, 2010)。</span></b>接下來這個是西班牙 Pompeu Fabra University (查不到正式中文我就不翻了) 製作的 Lip dub 影片。這隻影片裡每個參與的人表情都很豐富，而且很多帥哥正妹，歌曲也好聽，是大家都耳熟能詳的曲子。中間有段坐電梯的插曲很有意思。<br /><br /><div class="separator" style="clear: both; text-align: center;"><object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://2.gvt0.com/vi/V1ZqSyqORX4/0.jpg" height="266" width="320"><param name="movie" value="http://www.youtube.com/v/V1ZqSyqORX4&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><embed width="320" height="266"  src="http://www.youtube.com/v/V1ZqSyqORX4&fs=1&source=uds" type="application/x-shockwave-flash"></embed></object></div><br />6.&nbsp;<b><span class="Apple-style-span" style="color: red;">University LipDub #1。</span></b>根據維基百科上的紀錄，這是最早在大學校園中使用 Lip dub 方式拍攝的影片，可以看到學生們一個接著一個地（對嘴）唱歌。由德國的富特旺根應用科學大學，數位媒體系學生所製作。<br /><br /><div class="separator" style="clear: both; text-align: center;"><object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://1.gvt0.com/vi/tVRrjxtm9Pk/0.jpg" height="266" width="320"><param name="movie" value="http://www.youtube.com/v/tVRrjxtm9Pk&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><embed width="320" height="266"  src="http://www.youtube.com/v/tVRrjxtm9Pk&fs=1&source=uds" type="application/x-shockwave-flash"></embed></object></div><br />7.&nbsp;<b><span class="Apple-style-span" style="color: red;">The Grand Rapids LipDub (NEW WORLD RECORD)。</span></b>最後壓軸的可了不起了，是世界金氏紀錄最多人參與拍攝的 Lip dub 音樂影片。這影片剛開始看我覺得沒什麼，只是一堆人在路上邊走邊唱歌罷了，耐著性子看到 1:30 之後，我發現我錯了，這根本是整個城市的人下去拍的影片，前面的幾個影片都是在校園裡、教室中走走逛逛，相比之下都太小家子氣了。這段近九分鐘的影片有五千名市民參與拍攝，想想看，有許多大專院校搞不好學生和教職員加一加都不到五千人呢！<br /><br /><div class="separator" style="clear: both; text-align: center;"><object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://2.gvt0.com/vi/ZPjjZCO67WI/0.jpg" height="266" width="320"><param name="movie" value="http://www.youtube.com/v/ZPjjZCO67WI&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><embed width="320" height="266"  src="http://www.youtube.com/v/ZPjjZCO67WI&fs=1&source=uds" type="application/x-shockwave-flash"></embed></object></div><br />----<br />延伸閱讀<br /><a href="http://en.wikipedia.org/wiki/Lip_dub">Lip dub - Wikipedia, the free encyclopedia</a></p>
]]></content>
  </entry>
  
</feed>
