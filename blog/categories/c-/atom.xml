<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: c++ | Tzeng Yuxio]]></title>
  <link href="http://tzengyuxio.me/blog/categories/c-/atom.xml" rel="self"/>
  <link href="http://tzengyuxio.me/"/>
  <updated>2012-04-05T09:52:29+08:00</updated>
  <id>http://tzengyuxio.me/</id>
  <author>
    <name><![CDATA[Tzeng Yuxio]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在 Eclipse 開發 C/C++]]></title>
    <link href="http://tzengyuxio.me/blog/2011/12/26/eclipse-for-cplusplus/"/>
    <updated>2011-12-26T10:15:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2011/12/26/eclipse-for-cplusplus</id>
    <content type="html"><![CDATA[<p>這篇文章是<a href="http://coder.aqualuna.me/2011/12/eclipse.html">〈Eclipse 安裝筆記〉</a>系列之一，算是個人的安裝過程紀錄。以下是安裝時的環境參考：<br /><br />作業系統：Mac OS X 10.7.2<br />程式版本：Eclipse Indigo 3.7.1,IDE for Java Developers<br /><br />步驟流程如下<br /><br /><u>1. 準備 C/C++ 的編譯環境</u><br /><br />這步驟在 Mac 上可以略過。在 Windows 上的話則要安裝 MinGW, 關於 MinGW 的安裝可以參考<a href="http://nknush.kh.edu.tw/~johnsirhp/Eclipse+CDT+MinGW.htm">這篇文章</a>。<br /><br /><br /><u>2. 將 CDT (C/C++ Development Tooling) 加入 Software Sites 列表</u><br /><br />由於 CDT 是由 Eclipse 官方提供的，因此在預設的「Available Software Sites」列表中可以找到。開啟 Eclipse 的「偏好設定」，並切到「Available Software Sites」頁面，可以看到如下畫面。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-QayvoraAzKA/TvfV9NUGZ1I/AAAAAAAAJEE/q12pUzYG1co/s1600/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-12-26+%25E4%25B8%258A%25E5%258D%25889.57.14.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em; text-align: center;"><img border="0" height="203" src="http://3.bp.blogspot.com/-QayvoraAzKA/TvfV9NUGZ1I/AAAAAAAAJEE/q12pUzYG1co/s320/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-12-26+%25E4%25B8%258A%25E5%258D%25889.57.14.png" width="320" /></a></div><br />如果看到的畫面沒有像上圖那麼多的空白選項，那麼應該是剛安裝好 Eclipse, 還在從 Server 上抓取清單。放著 Eclipse 幾分鐘不動，它會自動於背景抓取選項清單，再打開「Available Software Sites」就可以看到如上畫面了。<br /><br />接著在「type filter text」的欄位中輸入「cdt」，可以過濾出 CDT 的軟體網址，在前面的格子中打個勾，按「OK」鈕關閉視窗，就完成了這一步驟。<br /><br /><br /><u>3. 安裝 CDT</u><br /><br />完成上一個步驟後，點選單列的「Help」→「Install New Software」開啟 Install 對話視窗。這時候可以在「Work with:」的下拉選單中找到剛剛加入的 CDT Site，如下圖。選取之後會出現安裝內容，我只勾選了「CDT Main Features」，按視窗右下角的「Finish」按鈕，接著就是照著畫面的提示操作了。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-1dcgAwlIcSU/TvfcWB5tVrI/AAAAAAAAJEw/ToSvE_LSGfo/s1600/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-12-26+%25E4%25B8%258A%25E5%258D%258810.15.14-1.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="284" src="http://3.bp.blogspot.com/-1dcgAwlIcSU/TvfcWB5tVrI/AAAAAAAAJEw/ToSvE_LSGfo/s320/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-12-26+%25E4%25B8%258A%25E5%258D%258810.15.14-1.jpg" width="320" /></a></div><br />安裝完後會要求重新啟動 Eclipse，就給它重開吧！<br /><br /><br /><u>4. 開始寫 C++</u><br /><br />重開後在選單「File」→「New」→「Project」的對話視窗如果有看到如下的 C++ 專案選項，就表示安裝完成，可以開始寫 C/C++ 囉～<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://4.bp.blogspot.com/-iEQbEUewMEA/TvfdRQJFckI/AAAAAAAAJE8/Ndosd3iUtyE/s1600/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-12-26+%25E4%25B8%258A%25E5%258D%258810.32.42.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="305" src="http://4.bp.blogspot.com/-iEQbEUewMEA/TvfdRQJFckI/AAAAAAAAJE8/Ndosd3iUtyE/s320/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-12-26+%25E4%25B8%258A%25E5%258D%258810.32.42.png" width="320" /></a></div><br />等等，這個世界沒有那麼美好。當你建了一個 C++ 專案之後，一編譯下去你會看到 Eclipse 跳出一個 Unable To Launch 的錯誤訊息。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-3mwVlb3DwUA/Tvffz3ugo2I/AAAAAAAAJFI/3Nl35p7xKw0/s1600/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-12-26+%25E4%25B8%258A%25E5%258D%258810.36.13.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="242" src="http://2.bp.blogspot.com/-3mwVlb3DwUA/Tvffz3ugo2I/AAAAAAAAJFI/3Nl35p7xKw0/s320/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-12-26+%25E4%25B8%258A%25E5%258D%258810.36.13.png" width="320" /></a></div><br />會出現這個錯誤，主要是因為 Eclipse 編譯完要輸出可執行檔，可是卻沒有對應的資料夾可以輸出，輸出失敗，因此會找不到執行檔來 Launch。解決的方式是在左側的 Project Explorer 對專案按右鍵叫出選單，選擇「Build Configurations」→「Build All」，這個動作可以讓 Eclipse 生成對應的輸出資料夾，這樣下次直接 Run 時便可正確產生編譯好的執行檔了。<br /><ol></ol></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse 安裝筆記 - 前言與目錄]]></title>
    <link href="http://tzengyuxio.me/blog/2011/12/26/eclipse-setup-note/"/>
    <updated>2011-12-26T04:17:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2011/12/26/eclipse-setup-note</id>
    <content type="html"><![CDATA[<p>用了 Eclipse 也好一陣子了，不過每次需要重新安裝 Eclipse 的時候，或多或少總還是會遇到一些問題。雖然說現在網路很方便，google 一下都可以找到這些問題的解決方式，但為了這些問題免不了又是花上一些時間在搜尋與嘗試上，許多甚至還是以前遇過又重新碰到的問題。因此，不如乾脆自己寫點筆記，既加深印象，就算下次忘了，至少也不用再到茫茫網海中搜尋解決方案。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-NjNp_x0dh8E/TveErHlc8nI/AAAAAAAAJD4/RGELy-s4xto/s1600/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-12-26+%25E4%25B8%258A%25E5%258D%25884.15.34.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="172" src="http://3.bp.blogspot.com/-NjNp_x0dh8E/TveErHlc8nI/AAAAAAAAJD4/RGELy-s4xto/s320/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2011-12-26+%25E4%25B8%258A%25E5%258D%25884.15.34.png" width="320" /></a></div>先列出我的 Eclipse 開發環境需求：<br /><ul><li>程式語言：C++, Java, Python</li><li>版本管理：Subversion, Git</li></ul><div>應該還算簡單。其實還有一些其他想裝的，比方說 php 或 Lua 或 JavaScript 或 Mercurial，這些都是將來哪天說不準會用到的東西。要是以前的我，可能就會想說一開始就全部裝到好，一次搞定；不過現在的我比較傾向<u>「還沒用到的東西就先不安裝」</u>，因為可能就真的一直都用不到，裝了也不過是裝個心安而已。專案開發也是一樣道理，我們經常在分析設計時加入過多的功能與設計，然而許多時候這些功能或設計都是壓根用不到或是不被需要的，這點有機會的話再討論，此處就不多做贅言。<br /><br />在目前主流的三大 IDE 中，我一直覺得 Eclipse 是最不友善的一個，儘管它的功能很強大，擴充上也具有彈性。<u>Eclipse 的不友善，從下載時候就開始了</u>，官網上提供各種功能不同的 Package，看似方便，其實增加許多障礙。我在教學時，超過一半的學生在下載這邊就會卡住；即便是有經驗的程式設計師，要是他有開發 C++ 與 Java 的需求，第一次來到 Eclipse 的下載頁面，相信他也會面臨第一道選擇題：<br /><blockquote class="tr_bq">到底我要下載 for Java 的版本還是 for C/C++ 的版本還是都下載？</blockquote>當然，有經驗的 Eclipse 開發者知道各個語言的開發套件都可以事後安裝，進一步說，Eclipse 用來安裝擴充套件的「Install New Software」幾乎是每個 Eclipse 開發者都會使用到的功能，至少你得安裝個 CVS 以外的版本控制系統。既然如此，那麼何不一開始就只提供一個不含開發語言的 Eclipse 包，第一次執行時便強制讓使用者透過「Install New Software」的機制來選擇要使用的開發語言，順便也是強迫學習「Install New Software」的流程。<br /><br />不過話說回來，這個「Install New Software」的功能設計的也不友善就是。或許我早被荼毒已久，自己使用上還沒感覺，可是在看學生操作時，才發現「Install New Software」的 UI 處處是陷阱，很難第一時間了解要以什麼樣的順序在什麼地方輸入什麼資料。<br /><br />還有一點要抱怨的是，Eclipse 裡的術語眾多，頭字語滿天飛，CDT, RAP, ATF 什麼的一堆，我要裝個 Git 還得先搞懂 EGit 跟 JGit 到底有什麼差別。術語和頭字語的問題在程式語言開發的領域中在所難免，這我可以理解，可是 Eclipse 的世界中硬是比其他開發環境多出許多，一眼看去彷彿有字天書。<u>工具是用來解決問題的，不過這下反而製造了更多的問題讓使用者學習。</u>寫到這裡我突然想感謝 Microsoft 沒有在 Visual Studio 的安裝介面選項中將「Microsoft SQL Server」縮寫成 MSS。<br /><br />啦哩拉雜提了一堆，該回到正題。我的 Eclipse 安裝了以下套件：</div><ul><li><a href="http://www.eclipse.org/cdt/downloads.php">C/C++ Development Tooling (CDT)</a></li><li><a href="http://marketplace.eclipse.org/content/pydev-python-ide-eclipse">PyDev - Python IDE for Eclipse</a></li><li><a href="http://eclipse.org/egit/downloads">EGit - Git Team Provider</a></li><li><a href="http://marketplace.eclipse.org/content/subclipse">Subclipse</a></li><li><a href="http://marketplace.eclipse.org/content/eclipse-color-theme">Eclipse Color Theme</a><br />主要是為了 <a href="http://slinky.imukuppi.org/zenburn/">zenburn</a> 這個 color theme</li></ul><div>為了方便起見，分成以下四篇文章說明：</div><div><ul><li><a href="http://coder.aqualuna.me/2011/12/eclipse-cc.html">在 Eclipse 開發 C/C++</a></li><li><a href="http://coder.aqualuna.me/2011/12/eclipse-python.html">在 Eclipse 開發 Python</a></li><li><a href="http://coder.aqualuna.me/2011/12/eclipse-git-svn.html">在 Eclipse 使用 Git 與 SVN</a></li><li><a href="http://coder.aqualuna.me/2011/12/eclipse_27.html">我的 Eclipse 初始設定調教</a></li></ul><div>最後補充一點說明，我的安裝環境是 Mac OS X, 所以 C++ 的 compiler 與 Python 的 interpreter 都已經系統內建。在 Windows 上對應的話，得要先安裝個 MinGW 與 Python for Windows 來提供編譯與直譯環境。</div></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的程式語言之路]]></title>
    <link href="http://tzengyuxio.me/blog/2011/07/26/my-way-as-a-coder/"/>
    <updated>2011-07-26T10:54:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2011/07/26/my-way-as-a-coder</id>
    <content type="html"><![CDATA[<p>從大學以來，這十幾年的工作與生活總與程式設計脫不了關係。前前後後寫了不少的 Code, 也接觸過許許多多不同的 Programming Language。這邊就來記錄一下自己現在還有印象的程式語言，也許十年之後再來回顧，又是另一種不同的想法吧。</p>

<h2>QBasic</h2>

<p>高中時候獲得人生的第一台電腦，當時還是 DOS 的年代，每個裝了 MS-DOS 的電腦都會內附 QBasic。還記得用 QBasic 寫過一些簡單的遊戲，像是 1A2B、迷宮產生之類的，但是真要說自己寫的其實也不是，很多都是照著當時雜誌（例如「第三波」）上的代碼 key 進電腦中而已。</p>

<h2>Turbo C++</h2>

<p>說真的，我已經不記得是 Turbo C 或是 Turbo C++ 了，但可以肯定的一點是，我當時一定只用到 C 的語法概念，沒有物件，只有單純的流程控制，對指標有似懂非懂的感覺。其實嚴格說起來，Turbo C++ 只能算是種 IDE，不算程式語言。</p>

<h2>Borland C++ Builder</h2>

<p>這也是 IDE，不過因為同樣的 C++ 語言在不同的 IDE 與不同的基本函式庫下會呈現出截然不同的個性，所以我就單列了。記得在我還是學生的時代，BCB 的出現帶來革命性的軟體開發方式，只要簡單拉一拉就可以有個像樣的視窗程式。當時蔚為風潮，我也趕流行玩了一陣子，不過也沒拿來寫過什麼東西就是。</p>

<h2>Visual Basic</h2>

<p>很簡單的程式語言。我曾經用 VB 寫過一個「光榮三國志臉譜瀏覽程式」的工具，可以讀取《三國志》四代、五代的頭像檔案。可惜現在原始碼與二進位檔都沒有留下，只有留下當時<a href="http://webbbs.gamer.com.tw/readSrhPost.php?brd=KOEI&amp;pos=448&amp;author=tzengyu&amp;keyword=">在巴哈姆特發佈時的帖子</a>。如果有人看到這篇文章，又碰巧有留當年的程式的話，歡迎跟我聯絡。也許哪天我心血來潮會再重寫一遍也說不定。 ;-)</p>

<h2>Common Lisp &amp; ML</h2>

<p>這兩個都是因為學校的課程而接觸的。剛開始學 Lisp，腦袋會打結，就是一層又一層的括號，常見的數學運算也都得換成前置式；不過作業寫到後來我還蠻喜歡寫 Lisp 的感覺。ML 也是，跟一般我們常見的 C-like 語法結構都不一樣。那時候我還蠻愛這兩個語言的，一直到畢業後的幾年間，我只要重灌電腦完要重新安裝軟體時，我就會把這兩個程式語言給裝進去，就像現在我會安裝 Python 一樣。</p>

<h2>ASP</h2>

<p>大四時接了一個學姊的家教網案子，那時候用的開發語言就是 ASP。不過說真的現在我對 ASP 都忘光光了。附帶一提，那個網站現在還活著，當然已經轉型了就是，不再是以媒介家教資訊為主。</p>

<h2>Java</h2>

<p>學生時代有寫過一些 Java applet，那時候的網頁很流行水波效果，幾乎十個個人網站有八個的 banner 都要來一下水波盪漾。Applet 也是淺嚐個大概而已，倒是 Java Servlet 因為工作的關係寫了蠻長久一段時間，從學生時代到退伍後都還有在接觸。話說事隔多年後，因為最近工作的關係，又開始跟 Java 打交道了。</p>

<h2>HTML &amp; JavaScript</h2>

<p>還在唸書時因為有協助維護一個購物網站，因此免不了要碰到 HTML 與 Java Script 的撰寫。當時那個購物網站使用的技術，有一部分是上面提到的 Java Servlet，另外也有用到 PHP 的部份。之後過了好幾年，有一個跟朋友合作開發 Facebook 遊戲的機會，在那次開發中又重新溫習了一次 Java Script，並且大量採用 Ajax 技術。可惜那個遊戲在發佈之前就胎死腹中了。</p>

<h2>PHP</h2>

<p>最主要就是上面提到的購物網站與 Facebook 遊戲這兩個案子用到，不過卻前前後後持續寫了蠻長久的一段時間。維護購物網站的時後基本上都還是程式碼硬幹，到了寫 Facebook 遊戲的時候，就有現成的框架了，我選了一個叫 CodeIgniter 的框架，大體上類似 ROR 的寫法。其實一開始選的是 CakePHP，比較完整，不過真的是太龐大了，所以才換成 CodeIgniter。此外，由於以前經常安裝討論區、部落格、Wiki、購物車等網站套件，其中許多是 PHP 寫的，常常需要 hack 部分代碼，因此對 PHP 還算蠻熟悉的，有陣子甚至拿 PHP 當 Shell Script 來使用，用來解決手邊的小問題。</p>

<h2>SQL</h2>

<p>說到網站程式就不能不提到資料庫。前前後後接觸過一些不同的資料庫，學生時代在 IBM 打工時是 DB2，前面提到的購物網站是 MySQL，進了遊戲公司之後，陸續又接觸到 PostgreSQL、Microsoft SQL Server，Oracle。其實單就 SQL 來看的話都大同小異，各資料庫 Server 之間最大的差異性還是在 Server 的管理與調校上，以及各種千奇百怪的程式介接函式庫寫法。</p>

<h2>Shell Script</h2>

<p>除了用 PHP 當 Shell Script 外，在我還在第一家遊戲公司時，由於是在 Linux 平台上開發的關係，也用 BASH 寫了不少方便日常工作或是開發的 Script。有少部分的代碼用 Perl 寫，用 Perl 寫起來很快，不過寫完看起來真的像天書一樣，真的是「寫完即丟」的語言。在 Windows 上，也曾經用 Batch 檔或是 Power Shell 寫過一些臨時性的小工具。</p>

<h2>C++</h2>

<p>進入遊戲公司後，幾乎就一直過著與 C++ 分不開的生活。早先是在 Linux 下寫 Server，能用的就是 Emacs 或是 Vim，後來換了公司，改用 Visual C++ 寫，一開始我還真的很不習慣，這麼複雜而多功能的介面，有時常常不曉得從哪邊開始下手。雖然在念書時學過，但我是從進遊戲公司之後，才真正重新認識了 C++，學到物件導向、Template、設計模式、重構等概念。當然，上面有些概念是跨語言通用的，不過因為 C++ 是我這幾年來長期接觸的語言，自然也成為前述幾個概念的學習媒介。</p>

<p>C++ 是個頗具爭議性的語言，他使用者多，但批評者更多，C 語言的陣營批評 C++ 不夠簡潔、純粹，STL 更是把許多工作變成讓人摸不著頭的黑箱；反之 Java 或 C# 的支持者又覺得 C++ 不夠完善，要寫個功能還要到處找函式庫，同個功能可能還有好幾種不同的函式庫，不同的實作與不同的使用概念，令人眼花撩亂。我自己是覺得，C++ 雖然亂，雖然我也對此感到困擾，但是也正因為他的兼容並蓄，使得各種各樣的想法與實作都能在上面獲得實踐。不過話說回來，對於產品開發而言，有時候工具還是單純點好。</p>

<h2>Auto Hotkey Script</h2>

<p>為了玩 Facebook 遊戲更「方便」而去學的程式。有寫了餐城（Restaurant City）的自動撿垃圾、自動到別人家評分，以及 Farmville 的自動種植、收割、耕地等功能，Mafia Wars 的連續任務。這些工具都是自娛，沒有對外釋出。隨著社群遊戲不斷的改版，這些工具也早就失效不能使用了。</p>

<h2>Lua</h2>

<p>在之前待過的公司中有用過，之後自己出來做的案子也有用。雖然如此，自己還是覺得對 Lua 的使用還不夠熟。曾經有寫過一個專案，使可以整合 C++ 與 Lua / Python / Squirrel 這三種 Script Language，目的是可以從 C++ 呼叫寫在 Script 的函式，也可以反過來。不過當初只寫了一個方向（C++ 呼叫外部），反過來的方向由於各 Script 語言存在的差異較大，自己的能力也不夠，就沒繼續開發下去了。</p>

<h2>Python</h2>

<p>這語言已經成為我這一兩年來的最愛了。在 Script Language 的領域中，一開始我是對 Lua 比較有興趣的，畢竟公司專案在用，而且 WOW 的 Custom UI 也都是用 Lua 撰寫，有 Billizard 的光芒加持，自然讓人不得不多看 Lua 幾眼。不過自從寫過 Python 的 Code 之後，我發現寫 Python 的過程可以獲得一種純粹的程式撰寫樂趣，我面對的是「程式所要解決的問題」本身，而不再是陣列、記憶體配置、指標、堆疊等等這些瑣碎的雜事。去年開發一個簡單的動畫編輯器，就是以 Python + wxPython 作的；而最早接觸 Python 的起點呢？喔，那是為了寫一個 Travian 的找資源點的工具，比較了幾個語言後發現用 Python 來抓網頁資料進行解析最為方便，於是就一頭踏入 Python 的思考領域了。</p>

<h2>NSIS (Nullsoft Scriptable Install System)</h2>

<p>最近才開始摸的東西，是用來寫安裝程式的語言。除了一開始入門門檻稍高外，不算太難，只要跨進去後剩下的就簡單了。之所以說一開始稍難，是因為最簡單的安裝軟體也要做許多事情，畢竟安裝軟體可不像其他語言只要秀秀 "Hello World" 就算完成第一個程式了。NSIS 也有 function 跟 macro，不過 function 沒有傳入參數，反正所有變數都是全域，也就不用傳入什麼了；如果真的需要傳入參數的話，倒是可以用 macro，雖然意義上不是，但程式碼看起來更接近傳參數的函式。這算是最近寫 NSIS 的一個小小心得吧。</p>

<h2>Objective-C</h2>

<p>這是目前正在進行的專案所用的語言。如果熟悉 C++/Java/PHP 這類 C-like 的語言，要學 Objective-C 真的很快。比較大的不同在於 message 的概念，前面的幾個語言不管是 function 或是 method，都是圓括弧呼叫的方式，在 Objectiv-C 中，函式的呼叫變成了訊息的傳遞，而且每個變數都必須寫出變數名字。剛開始看的確會有些彆扭不習慣，但是徹底改用「訊息傳遞」的角度去思考理解的話，其實 Objective-C 的這種寫法還蠻可愛與口語化的。</p>

<h2>後記</h2>

<p>看了一下 <a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">TIOBE Programming Community Index for July 2011</a>，前十名的程式語言中，除了 C# 之外，有九個我都接觸過或多或長的一段時間。其實之前為了研究 XNA，也有稍微看過 C# 的 code，不過稍微看看也不算寫過就是。但是 Windows Phone 的開發免不了得靠 C#，或許再不久的將來有機會寫 C# 也說不定？</p>
]]></content>
  </entry>
  
</feed>
