<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: html | Tzeng Yuxio]]></title>
  <link href="http://tzengyuxio.me/blog/categories/html/atom.xml" rel="self"/>
  <link href="http://tzengyuxio.me/"/>
  <updated>2012-04-18T07:12:33+08:00</updated>
  <id>http://tzengyuxio.me/</id>
  <author>
    <name><![CDATA[Tzeng Yuxio]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Solarized for google-code-prettify]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/11/solarized-for-google-code-prettify/"/>
    <updated>2012-03-11T07:20:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/11/solarized-for-google-code-prettify</id>
    <content type="html"><![CDATA[<p><a href="http://tzengyuxio.me/blog/2011/08/07/embeded-code-with-google-code-prettify/">我用 google-code-prettify 來做 blog 文章中的代碼上色</a>，google-code-prettify 本身有<a href="http://google-code-prettify.googlecode.com/svn/trunk/styles/index.html">附上幾個 Color Scheme</a>, 然而除了預設的之外，都是以暗色背景為主。</p>

<p>昨天心血來潮將 <a href="http://ethanschoonover.com/solarized">Solarized</a> 這個 Color Scheme 移植到 google-code-prettify 下，同樣也是 dark/light 雙版本。關於 Solarized 的介紹可以參考<a href="http://coder.aqualuna.me/2012/02/zenburn-solarized.html">這篇文章</a>。</p>

<h2>下載 / Download</h2>

<ul>
<li>Solarized Light

<ul>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.css">Normal version</a></li>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.min.css">Minified version</a></li>
</ul>
</li>
<li>Solarized Dark

<ul>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.css">Normal version</a></li>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.min.css">Minified version</a></li>
</ul>
</li>
</ul>


<h2>代碼 / Code</h2>

<h3>Solarized Light</h3>

<p>正常排版版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#657b83}
@media screen{
    .str{color:#2aa198}
    .kwd{color:#859900}
    .com{color:#93a1a1}
    .typ{color:#b58900}
    .lit{color:#2aa198}
    .pun,.opn,.clo{color:#657b83}
    .tag{color:#268bd2}
    .atn{color:#93a1a1}
    .atv{color:#2aa198}
    .dec,.var{color:#268bd2}
    .fun{color:red}
}
@media print,projection{
    .str{color:#060}
    .kwd{color:#006;font-weight:bold}
    .com{color:#600;font-style:italic}
    .typ{color:#404;font-weight:bold}
    .lit{color:#044}
    .pun{color:#440}
    .tag{color:#006;font-weight:bold}
    .atn{color:#404}
    .atv{color:#060}
}
pre.prettyprint{padding:5px;border:1px solid #888;background:#fdf6e3}
ol.linenums{margin-top:0;margin-bottom:0}
li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}
li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}
</code></pre>


<p>最小化版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.min.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#657b83}@media screen{.str{color:#2aa198}.kwd{color:#859900}.com{color:#93a1a1}.typ{color:#b58900}.lit{color:#2aa198}.pun,.opn,.clo{color:#657b83}.tag{color:#268bd2}.atn{color:#93a1a1}.atv{color:#2aa198}.dec,.var{color:#268bd2}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:5px;border:1px solid #888;background:#fdf6e3}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}
</code></pre>


<h3>Solarized Dark</h3>

<p>正常排版版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#839496}
@media screen{
    .str{color:#2aa198}
    .kwd{color:#859900}
    .com{color:#586175}
    .typ{color:#b58900}
    .lit{color:#2aa198}
    .pun,.opn,.clo{color:#839496}
    .tag{color:#268bd2}
    .atn{color:#586175}
    .atv{color:#2aa198}
    .dec,.var{color:#268bd2}
    .fun{color:red}
}
@media print,projection{
    .str{color:#060}
    .kwd{color:#006;font-weight:bold}
    .com{color:#600;font-style:italic}
    .typ{color:#404;font-weight:bold}
    .lit{color:#044}
    .pun{color:#440}
    .tag{color:#006;font-weight:bold}
    .atn{color:#404}
    .atv{color:#060}
}
pre.prettyprint{padding:5px;border:1px solid #888;background:#002b36}
ol.linenums{margin-top:0;margin-bottom:0}
li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}
li.L1,li.L3,li.L5,li.L7,li.L9{background:#111}
</code></pre>


<p>最小化版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.min.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#839496}@media screen{.str{color:#2aa198}.kwd{color:#859900}.com{color:#586175}.typ{color:#b58900}.lit{color:#2aa198}.pun,.opn,.clo{color:#839496}.tag{color:#268bd2}.atn{color:#586175}.atv{color:#2aa198}.dec,.var{color:#268bd2}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:5px;border:1px solid #888;background:#002b36}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#111}
</code></pre>


<h2>範例 / Example (in dark version)</h2>

<pre class="prettyprint lang-java"><code>import java.util.Map;
import java.util.TreeSet;

public class GetEnv {
  /**
   * let's test generics
   * @param args the command line arguments
   */
  public static void main(String[] args) {
    // get a map of environment variables
    Map&lt;String, String&gt; env = System.getenv();
    // build a sorted set out of the keys and iterate
    for(String k: new TreeSet&lt;String&gt;(env.keySet())) {
      System.out.printf("%s = %s\n", k, env.get(k));
    }
  }    
}
</code></pre>


<hr />

<p>網路上有找到<a href="http://subtech.g.hatena.ne.jp/h2u/20110408/1302198319">這篇也有 solarized color for google-pretty-code</a>, 不過只有暗色背景的版本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging with Markdown]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/10/blogging-with-markdown/"/>
    <updated>2012-02-10T13:24:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/10/blogging-with-markdown</id>
    <content type="html"><![CDATA[<h1>用 Markdown 寫部落格</h1>


<p>前陣子<a href="http://coder.aqualuna.me/2011/10/asciidoc-markdown-restructuredtext.html">比較了一些輕量級標記語言</a>，想作為之後自己撰寫文件的格式依據。其中 reStructuredText 太過複雜，就不考慮了；剩下的 AsciiDoc 與 Markdown 兩者中，剛開始我比較喜歡 AsciiDoc 多一些。因為 AsciiDoc 有支援表格的語法，而 Markdown 則必須透過 Inline HTML 的方式，這麼一來如果文章中想包含表格，免不了還是得塞入一堆礙眼的 HTML 語法。</p>


<p>不過比起 AsciiDoc, Markdown 的應用支援顯然要來得廣泛得多，除了 GitHub 與 BitBucket 等網站外，有相當多的工具或編輯器支援 Markdown 語法，例如 Day One, iA Writer 或是 Byword，這方面壓倒性勝過 AsciiDoc。於是乎 Markdown 便逐漸成為我的首選，至於不能製作表格的問題嘛，反正作表格的機會也不是那麼多，大部分時候也可以用清單方式來呈現資料，所以倒不是太大問題。</p>


<p>決定用 Markdown 作為主要規範後，第一個想到的就是用 Markdown 來寫 blog。不過 blogger 本身沒有支援 Markdown 語法，也沒有外掛或工具支援直接將 Markdown 寫好的文章發佈。大部分用 Markdown 在 blogger 寫文章的方式，都與 <a href="http://notely.blogspot.com/2011/08/how-to-use-markdown-in-blogspot-posts.html">Notely: How to use Markdown in Blogspot posts</a> 這篇文章的作業流程大同小異：</p>


<ol><li>在你的電腦中用文字編輯器撰寫文章並儲存成檔案（原作者 Joel 使用 yyyy-mm-dd post title.txt 的檔案命名方式）</li><li>開啟 <a href="http://daringfireball.net/projects/markdown/dingus">Daring Fireball: Markdown Web Dingus</a> 網站，複製貼上文章內容，進行轉換。</li><li>最後，將轉換完成的 HTML 碼貼到 blogspot 的新文章中。</li></ol>


<p>另外，貼上時要注意以下兩點：</p>


<ol><li>在貼上新文章時，確定文字輸入區上方的模式是在「HTML」下而非「撰寫」。</li><li>開啟右側「文章設定」最下方的選項，<ol><li>「撰寫模式」勾選<strong>解譯輸入的 HTML</strong>。</li><li>「換行符號」勾選<strong>使用 &lt;br&gt; 標記</strong>。</li></ol></li></ol>


<p>我目前也是採用類似的流程。比較特別要提的有以下幾點：</p>


<ol><li>標題除了作為檔名外，檔案內的第一行也會放上一級標題；最後一行則是列出這篇文章的標籤。所以在轉換為 HTML 時，要去首尾行。</li><li>檔案存放在 dropbox 空間中。這樣可以確保文章有多份備份。</li><li>文章是<a href="http://blog.aqualuna.me/2012/02/byword-ia-writer.html">用 iA Writer 寫</a>的。寫完之後用<a href="http://coder.aqualuna.me/2012/02/os-x-markdown-html.html">〈在 OS X 中隨時隨地將 Markdown 轉為 HTML〉</a>這一篇提到的方法轉換為 HTML 碼，這樣就不用再開啟線上轉換的網頁了。</li></ol>


<hr /><p>這篇文章就是用上述流程所寫的，你可以<a href="http://dl.dropbox.com/u/1324456/2012-02-10%20Blogging%20with%20Markdown.md">到這邊看看原始模樣</a>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 OS X 中隨時隨地將 Markdown 轉為 HTML]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/10/markdown-to-html-in-osx/"/>
    <updated>2012-02-10T00:03:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/10/markdown-to-html-in-osx</id>
    <content type="html"><![CDATA[<p>很多人喜歡用 Markdown 寫純文字的文件，包括我。簡單又有規範，而且幾乎所有文書軟體／編輯器都可以開啟（應該沒有不支援純文字的編輯器吧？），也可以轉成 HTML 在網路上發表。</p>


<p>在 Markdown 作者 John Gruber 的網站上有提供了一個 perl 寫的 Markdown 轉換指令稿，可以將 Markdown 轉換成 HTML。不過每次要轉檔都要進終端機下指令也是麻煩，今天剛好看到一篇文章，可以在 OS X 中加入一項服務，透過該服務，任何只要提供文字編輯的應用程式，都可以經由右鍵選單輕鬆將 Markdown 轉換成 HTML。</p>


<p>原始文章： <br /><a href="http://gothick.org.uk/2010/08/04/installing-markdown-as-a-os-x-service-using-automator-in-snow-leopard/">Installing Markdown as an OS X Services Menu Item Using Automator</a></p>


<p>懶得看原文的也可以看下面步驟。原文中的作法是將轉好的 HTML 直接取代掉原始 Markdown，因為我的需求不同，所以以下的步驟還會加上將轉好的 HTML 放到剪貼簿中。</p>


<p>先下載 John Gruber 所寫轉換指令稿：<a href="http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip">Markdown.pl</a> <br />下載後找個地方存放，我是放在 "/usr/local/bin/" 下面。</p>


<p>然後開啟 Automator，選擇新增一項「服務」</p>


<p><img src="https://lh4.googleusercontent.com/-4jbqH4ULE6w/TzPgHEeogEI/AAAAAAAAJSc/bgQzB6TYjgY/s800/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258B%25E5%258D%25887.51.41.jpg" alt="automator service" title="" /></p>


<p>接著會在視窗中看到如下內容。勾選「輸出會取代所選文字」，如果你只複製到剪貼簿而不需替換掉原本文字，可以不用勾選。</p>


<p><img src="https://lh4.googleusercontent.com/-LuRLdVga0Y4/TzPgKjA6mHI/AAAAAAAAJS8/58PItFCGXgk/s800/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258A%25E5%258D%258811.14.07.png" alt="replace selected text" title="" /></p>


<p>在左側程式庫列表中找到「執行 Shell 工序指令」，拉到右側。然後在文字區域中輸入 "/usr/local/bin/Markdown.pl" （請依照下載時所存放位置作適當修改）</p>


<p><img src="https://lh5.googleusercontent.com/-Q8wzbS2X0Dw/TzPgHcbkCGI/AAAAAAAAJSo/xw4nFzqOFCA/s640/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258B%25E5%258D%25889.26.17.jpg" alt="run shell script" title="" /></p>


<p><img src="https://lh3.googleusercontent.com/-10YQiOu5AW4/TzPgG5s0EBI/AAAAAAAAJSU/4eNQAfG3Yrg/s640/%25E6%259C%25AA%25E5%2591%25BD%25E5%2590%258D.jpg" alt="type the path" title="" /></p>


<p>如果只是要產生 HTML 碼，到上個步驟就可以了。若還要把轉換後的 HTML 存到剪貼簿中，一樣在左側程式庫列表中找到「拷貝到剪貼板」，然後拉到右側剛剛的指令下方。</p>


<p><img src="https://lh6.googleusercontent.com/-TJAWpA8GPnk/TzPgGgTcfwI/AAAAAAAAJSY/8PGij1g0vIk/s640/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258B%25E5%258D%258812.03.42.jpg" alt="copy to clipboard" title="" /></p>


<p>存檔，大功告成！</p>


<p><img src="https://lh4.googleusercontent.com/-G-8wSTDEsNc/TzPgK0JVenI/AAAAAAAAJS4/96P8mzPIa9k/s800/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258A%25E5%258D%258811.18.21.png" alt="save and finish" title="" /></p>


<p>接下來實驗看看。打開「文字編輯」或是任何可以編寫純文字的程式，隨便打一段 Markdown 指令。輸入完後全選，叫出右鍵選單，可以看到我們剛才辛苦的結晶：</p>


<p><img src="https://lh5.googleusercontent.com/-R9N1rdjFFw8/TzPgGUUk5TI/AAAAAAAAJSQ/Y1AvgdQZ85c/s640/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258B%25E5%258D%258811.00.51.jpg" alt="markdown to html" title="" /></p>


<p>用力給他按下去－－噹啦～全部變成 HTML 了，很方便不是？</p>


<p><img src="https://lh3.googleusercontent.com/-Qa59zBrnckQ/TzPsFo4ZL-I/AAAAAAAAJUA/WbZnbPmarsk/s800/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258B%25E5%258D%258811.03.25.png" alt="markdown to html converted" title="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在網頁中嵌入 Facebook 與 twitter 社交按鈕]]></title>
    <link href="http://tzengyuxio.me/blog/2011/08/09/embeded-facebook-and-twitter-button-in-page/"/>
    <updated>2011-08-09T19:02:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2011/08/09/embeded-facebook-and-twitter-button-in-page</id>
    <content type="html"><![CDATA[<p>Facebook 常見的社交按鈕有兩種：<strong>Facebook Share</strong> 與 <strong>Facebook Like</strong>，不過前者已經不在 Facebook 官方提供的 Plugin 列表中，連到<a href="http://developers.facebook.com/docs/share">舊的 Facebook Share 說明頁面</a>會自動導向 <a href="http://developers.facebook.com/docs/reference/plugins/like/">Facebook Like 的說明頁面</a>，看起來 Facebook 似乎有意以 Like 取代 Share 的地位。雖然如此，兩種功能還是有其不同的定位，目前也都能夠共存並用。關於兩者差異的說明，可以參考<a href="http://daggle.com/facebook-button-facebook-share-keeping-1792">這篇文章（英文）</a>。下面則是 Facebook 與 twitter 各種社交功能與外觀的顯示範例與分享代碼。</p>

<h2>Facebook Share 的分享代碼</h2>

<h3>按鈕配置</h3>

<p><a href="http://www.facebook.com/sharer.php" name="fb_share" type="button_count">分享</a></p>

<pre class="prettyprint"><code>&lt;a name="fb_share" type="button_count" href="http://www.facebook.com/sharer.php"&gt;分享&lt;/a&gt;&lt;script src="http://static.ak.fbcdn.net/connect.php/js/FB.Share" type="text/javascript"&gt;&lt;/script&gt;
</code></pre>


<h3>方塊配置</h3>

<p><a href="http://www.facebook.com/sharer.php" name="fb_share" type="box_count">分享</a></p>

<pre class="prettyprint"><code>&lt;a name="fb_share" type="box_count" href="http://www.facebook.com/sharer.php"&gt;分享&lt;/a&gt;&lt;script src="http://static.ak.fbcdn.net/connect.php/js/FB.Share" type="text/javascript"&gt;&lt;/script&gt;
</code></pre>




<script src="http://static.ak.fbcdn.net/connect.php/js/FB.Share" type="text/javascript">
</script>


<h2>Facebook Like 的分享代碼</h2>

<h3>標準配置</h3>

<iframe allowtransparency="true" frameborder="0" scrolling="no" src="http://www.facebook.com/plugins/like.php?app_id=147491145332691&amp;href=http://coder.aqualuna.me/2011/08/facebook-twitter.html&amp;send=false&amp;layout=standard&amp;width=450&amp;show_faces=true&amp;action=like&amp;colorscheme=light&amp;font&amp;height=20" style="border: none; height: 20px; overflow: hidden; width: 450px;"></iframe>




<pre class="prettyprint"><code>&lt;iframe allowTransparency='true' expr:src='&amp;quot;http://www.facebook.com/plugins/like.php?href=&amp;quot; + data:post.url + &amp;quot;&amp;amp;send=false&amp;amp;layout=standard&amp;amp;width=450&amp;amp;show_faces=false&amp;amp;action=like&amp;amp;colorscheme=light&amp;amp;font=tahoma&amp;amp;height=20&amp;quot;' frameborder='0' scrolling='no' style='border:none; overflow:hidden; width:450px; height:20px;'&gt;&lt;/iframe&gt;
</code></pre>


<h3>按鈕配置</h3>

<iframe allowtransparency="true" frameborder="0" scrolling="no" src="http://www.facebook.com/plugins/like.php?app_id=147491145332691&amp;href=http://coder.aqualuna.me/2011/08/facebook-twitter.html&amp;send=false&amp;layout=button_count&amp;width=90&amp;show_faces=true&amp;action=like&amp;colorscheme=light&amp;font&amp;height=20" style="border: none; height: 20px; overflow: hidden; width: 90px;"></iframe>




<pre class="prettyprint"><code>&lt;iframe allowTransparency='true' expr:src='&amp;quot;http://www.facebook.com/plugins/like.php?href=&amp;quot; + data:post.url + &amp;quot;&amp;amp;send=false&amp;amp;layout=button_count&amp;amp;width=90&amp;amp;show_faces=false&amp;amp;action=like&amp;amp;colorscheme=light&amp;amp;font=tahoma&amp;amp;height=20&amp;quot;' frameborder='0' scrolling='no' style='border:none; overflow:hidden; width:90px; height:20px;'&gt;&lt;/iframe&gt;
</code></pre>


<h3>方塊配置</h3>

<iframe allowtransparency="true" frameborder="0" scrolling="no" src="http://www.facebook.com/plugins/like.php?app_id=147491145332691&amp;href=http://coder.aqualuna.me/2011/08/facebook-twitter.html&amp;send=false&amp;layout=box_count&amp;width=90&amp;show_faces=true&amp;action=like&amp;colorscheme=light&amp;font&amp;height=63" style="border: none; height: 63px; overflow: hidden; width: 90px;"></iframe>




<pre class="prettyprint"><code>&lt;iframe allowTransparency='true' expr:src='&amp;quot;http://www.facebook.com/plugins/like.php?href=&amp;quot; + data:post.url + &amp;quot;&amp;amp;send=false&amp;amp;layout=box_count&amp;amp;width=90&amp;amp;show_faces=false&amp;amp;action=like&amp;amp;colorscheme=light&amp;amp;font=tahoma&amp;amp;height=63&amp;quot;' frameborder='0' scrolling='no' style='border:none; overflow:hidden; width:90px; height:63px;'&gt;&lt;/iframe&gt;
</code></pre>


<h2>twitter 的分享代碼</h2>

<h3>水平按鈕</h3>

<p><a class="twitter-share-button" href="http://twitter.com/share">Tweet</a></p>

<pre class="prettyprint"><code>&lt;script src='http://platform.twitter.com/widgets.js' type='text/javascript'/&gt;
&lt;a class='twitter-share-button' href='http://twitter.com/share' expr:data-url='data:post.url' expr:data-text='data:post.title'&gt;Tweet&lt;/a&gt;
</code></pre>


<h3>垂直按鈕</h3>

<p><a class="twitter-share-button" data-count="vertical" href="http://twitter.com/share">Tweet</a></p>

<pre class="prettyprint"><code>&lt;script src='http://platform.twitter.com/widgets.js' type='text/javascript'/&gt;
&lt;a class='twitter-share-button' href='http://twitter.com/share' expr:data-url='data:post.url' expr:data-text='data:post.title' data-count='vertical'&gt;Tweet&lt;/a&gt;
</code></pre>


<h2>參考資料</h2>

<ul>
<li><a href="http://developers.facebook.com/docs/reference/plugins/like/">Like Button - Facebook Developers</a></li>
<li><a href="https://dev.twitter.com/docs/tweet-button">Tweet Button | Twitter Developers</a></li>
<li><a href="http://daggle.com/facebook-button-facebook-share-keeping-1792">Facebook Like Button Vs. Facebook Share: Why I’m Keeping Both</a></li>
<li><a href="http://jinnsblog.blogspot.com/2010/12/facebook-share-link-button-widget.html">[Blogger] 臉書的「分享」、「讚」推文按扭語法分享-靖 ● 技場</a></li>
<li><a href="http://jasonblog.tw/2010/05/add-facebook-share-button-on-blogger.html">在Blogger裝置具有計數功能的Facebook分享按鈕 | 哲生博客 Jason Blog</a></li>
<li><a href="http://jasonblog.tw/2010/04/add-facebook-like-button-on-your.html">在Blogger嵌入Facebook的讚(Like)按鈕 | 哲生博客 Jason Blog</a></li>
<li><a href="http://clonn.blogspot.com/2011/05/bloggerfacebook-add-facebook-like.html">[教學] Blogger當中加入facebook 讚！ Add facebook like button in Blogger template</a></li>
<li><a href="http://www.bloggerplugins.org/2010/08/twitter-share-buttons-for-blogger-tweet.html">Official Twitter Share Button (Tweet Button) for Blogger ~ Blogger Widgets</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 google-code-prettify 在網頁中嵌入代碼]]></title>
    <link href="http://tzengyuxio.me/blog/2011/08/07/embeded-code-with-google-code-prettify/"/>
    <updated>2011-08-07T09:13:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2011/08/07/embeded-code-with-google-code-prettify</id>
    <content type="html"><![CDATA[<p>作為一個以程式技術為主的網誌，文章中免不了得出現一兩段程式碼。原本我使用 <a href="https://github.com/">github</a> 的 <a href="http://www.gist.com/">gist</a> 服務來將程式代碼內嵌到網頁（<a href="http://tzengyuxio.me/blog/2011/07/26/which-uigesturerecognizer-will-response/">使用效果見此</a>），另一方面 gist 也可以用來當作是自己的小小代碼備忘錄，許多程式碼片段直接丟上去就好了，非常便利，可說是一舉兩得。</p>

<p>不過有時候只是想要顯示幾行代碼，這些代碼也許不具有完整性，如果將代碼一股腦兒地全丟上 gist，總有一天代碼庫會變成亂葬崗。所以除了 gist 之外，我也找了其他網頁貼程式碼的方案。原本前幾天已經物色好了 <a href="http://alexgorbatchev.com/SyntaxHighlighter/">SyntaxHighlighter</a>，打算趁週末有空時來實裝測試。結果因為在安裝前四處蒐集資訊，意外又發現到 <a href="http://code.google.com/p/google-code-prettify/">google-code-prettify</a>，看了一下立刻就變心決定改用 google-code-prettify。</p>

<p>其實就功能上而言，SyntaxHighlighter 遠遠勝過 google-code-prettify，之所以選擇了 google-code-prettify，最主要的原因就在於「<strong>簡單</strong>」。兩者的比較如下（分別簡稱為 GCP 和 SH）：</p>

<ul>
<li>遇到過長的程式碼，SH 可以顯示出 Scrollbar，維持原排版；而 GCP 則會強制換行。</li>
<li>SH 預設有行號，GCP 也可加入行號，但不方便。</li>
<li>兩者都支援顏色主題。包含預設的在內，SH 現有 7 種顏色主題，GCP 則有 4 種。</li>
<li>SH 支援 23 種程式語法，GCP 預設內建的也有 20 種左右。</li>
<li>就安裝上，GCP 只要加入兩個檔案，就可以處理大多數的語言；SH 則除了得加入核心的 CSS 與 JavaScript 檔共三個檔外，還必須加入對應使用程式語言的 JavaScript。</li>
<li>使用上兩者差異不大。SH 除了 <code>&lt;pre&gt;</code> 標籤外也提供了 <code>&lt;script&gt;</code> 的使用方式；GCP 則是可以省略語法指定，自動判斷。</li>
</ul>


<p>由於我經常跨不同程式語言撰寫，因此 SH 在安裝上對我而言就顯得比較不便。雖然新版提供了 Autoloader 來動態決定要載入哪些程式語言語法的 JavaScript，不過我最後還是選擇單純一點的 GCP。GCP 對我而言最大的缺點就是沒有行號，我在 IDE 上寫 code 一定會打開行號顯示，不過反正網頁上顯示的代碼行數都不多，沒有行號這一點倒是還可以接受。</p>

<p>以下就是我的 google-code-prettify 安裝筆記：</p>

<h2>Step 1.</h2>

<p>到 <a href="http://code.google.com/p/google-code-prettify/">google-code-prettify</a> 首頁下載好檔案後，解壓放到自己的網路空間上。我是放到 Dropbox 的 public 資料夾下。</p>

<h2>Step 2.</h2>

<p>然後再修改自己網頁的範本。有兩個地方要修改，一個是在 <code>&lt;/head&gt;</code> 標籤之前加上 css 與 javascript 的載入；另外一個是在 <code>&lt;body&gt;</code> 標籤內加上 onLoad 函式。</p>

<pre class="prettyprint lang-html"><code>&lt;head&gt;
  &lt;-- 中略 --&gt;
  &lt;-- 1. 在 /head 標籤前加入下面兩行 --&gt;
  &lt;link href="http://my.url.to/prettify.css" rel="stylesheet" type="text/css"/&gt;
  &lt;script src="http://my.url.to/prettify.js" type="text/javascript"/&gt;
&lt;/head&gt;

&lt;-- 2. 在 body 標籤內加入 onload 設定 --&gt;
&lt;body onload='prettyPrint()'&gt;
&lt;/body&gt;
</code></pre>


<h2>Step 3.</h2>

<p>接下來只要在想要使用代碼的地方，用 <code>&lt;pre&gt;</code> 或 <code>&lt;code&gt;</code> 包起來，並且設定 class 為 prettiprint 即可。google-code-prettify 會自動判斷裡面的代碼是屬於何種語言。</p>

<pre class="prettyprint lang-html"><code>&lt;pre class="prettyprint"&gt;
#include &lt;stdio.h&gt;
 
int main(void)
{
   printf("Hello, world!\n");
   return 0;
}
&lt;/pre&gt;
</code></pre>


<p>上面這段代碼的結果如下：</p>

<pre class="prettyprint"><code>#include &lt;stdio.h&gt;
 
int main(void)
{
   printf("Hello, world!\n");
   return 0;
}
</code></pre>


<p>如果想要自己指定區塊內的程式語言，可以再加上 <code>lang-*</code>，其中 * 要替換成該程式語言的代碼。</p>

<pre class="prettyprint"><code>&lt;pre class="prettyprint lang-html"&gt;
  &lt;-- HTML 的場合 --&gt;
&lt;/pre&gt;
&lt;pre class="prettyprint lang-c"&gt;
  /* C 的場合 */
&lt;/pre&gt;
&lt;pre class="prettyprint lang-py"&gt;
  " Python 的場合
&lt;/pre&gt;
</code></pre>


<p>目前支援的代碼有</p>

<blockquote><p>"bsh", "c", "cc", "cpp", "cs", "csh", "cyc", "cv", "htm", "html", "java", "js", "m", "mxml", "perl", "pl", "pm", "py", "rb", "sh", "xhtml", "xml", "xsl"</p></blockquote>

<p>看得出來是以程式碼的副檔名做區隔。基本上常見的幾乎都包含在裡面了。</p>

<hr />

<p>參考資訊：</p>

<ul>
<li><a href="http://code.google.com/p/google-code-prettify/">google-code-prettify</a></li>
<li><a href="http://alexgorbatchev.com/SyntaxHighlighter/">SyntaxHighlighter</a></li>
<li><a href="http://www.vixual.net/blog/archives/197">在 Blogger 中使用 google-code-prettify 顯示程式碼 | Vixual</a></li>
<li><a href="http://www.vixual.net/blog/archives/198">在 Blogger 中使用 dp.SyntaxHighlighter 顯示程式碼 | Vixual</a></li>
<li><a href="http://yuanfarn.blogspot.com/2009/10/google-code-prettify.html">幻影千瞳的部落格: 使用 google-code-prettify</a></li>
<li><a href="http://yuanfarn.blogspot.com/2009/10/syntaxhighlighter.html">幻影千瞳的部落格: 使用 SyntaxHighlighter</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
