<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tzeng Yuxio]]></title>
  <link href="http://tzengyuxio.me/atom.xml" rel="self"/>
  <link href="http://tzengyuxio.me/"/>
  <updated>2012-04-18T18:46:47+08:00</updated>
  <id>http://tzengyuxio.me/</id>
  <author>
    <name><![CDATA[Tzeng Yuxio]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[形形色色的標籤機制]]></title>
    <link href="http://tzengyuxio.me/blog/2012/04/18/inconsistency-of-tagging-formats/"/>
    <updated>2012-04-18T09:53:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/04/18/inconsistency-of-tagging-formats</id>
    <content type="html"><![CDATA[<p><img src="http://tzengyuxio.me/images/2012/2012-04-18-inconsistency-of-tags.jpg" alt="inconsistency of tags" /></p>

<p>「標籤」功能，在今天的網站應用中，已經是極為普遍的一種機制，甚至在許多桌面的應用上也可以見到「標籤」的蹤跡。在不同的地方，標籤可能有不同的名字，例如：</p>

<ul>
<li><code>tag</code>: Picasa, Flickr, YouTube, amazon, WordPress, 豆瓣</li>
<li><code>label</code>: Gmail, Blogger</li>
<li><code>keyword</code>: iPhoto, Aperture</li>
<li><code>hashtag</code>: Twitter, Google+</li>
<li><code>category</code>: Anobii, WordPress</li>
</ul>


<p>考慮到中文翻譯的話，又更加混亂：</p>

<ul>
<li><strong>標籤</strong>：Flickr, Gmail, Blogger, 豆瓣, WordPress</li>
<li><strong>標記</strong>：Picasa, YouTube</li>
<li><strong>關鍵字</strong>：iPhoto</li>
<li><strong>分類</strong>：Anobii, WordPress</li>
</ul>


<p>針對以上的清單進行耙梳，我們可以得到下面幾個觀察：</p>

<ol>
<li><p>這些類似的功能中，最常見的英文名字是 &#8220;tag&#8221;，中文名字是「標籤／标签」。</p></li>
<li><p>然而在 Google 的產品中，&#8221;tag&#8221; 通常翻作「標記」；「標籤」這詞則是用在 &#8220;label&#8221; 上（儘管他們兩者功能接近）。</p></li>
<li><p>hashtag 有其自有的形式：<code>#somewordswithoutspace</code>, 不過其使用的方式與目的和單純的標籤（tag）並無太大差別。</p></li>
<li><p>有些應用服務存在著 category 與 tag 兩種機制，一個物件（例如部落格文章）可能只隸屬於單一分類（category）但可擁有多個標籤（tag）。但是現在越來越多的應用服務都可以讓使用者將單一物件同時歸屬於多個分類之下，使得分類與標籤的界線漸趨模糊。</p></li>
<li><p>可以從另外一個角度來釐清分類與標籤的不同：分類屬於事先規劃好的清單，標籤則是依照物件內容隨意添加的清單。</p></li>
<li><p>不過在只有「分類」沒有「標籤」機制的網站中（如 Anobii），「分類」的使用方式其實跟「標籤」是沒有兩樣的。</p></li>
<li><p>反之，只有標籤機制的網站，如 Blogger, 某種程度上也可以透過標籤來模擬分類的機制（可以參考<a href="http://reader.aqualuna.me/">此網站</a>的右側選單）。</p></li>
</ol>


<p>蠻混亂的，不是嗎？為了方便起見，我這邊用「<strong>分類 (category)</strong>」、「<strong>標籤 (tag)</strong>」與「<strong>Hashtag</strong>」來稱呼上面一大堆名字所代表的功能，其中「標籤 (tag)」同時也代表了 <em>label</em> 與 <em>keyword</em>。</p>

<p>分類、標籤與 Hashtag 三者的功能接近又互相重疊，命名也是各家網站各自為政，沒有個準。不過混亂還沒結束，讓我們針對「標籤」的部份，繼續深入研究下去。</p>

<h3>標籤格式</h3>

<p>標籤的格式牽扯的問題既廣且深，它不僅決定了使用者在輸入欄位中填入標籤的方法，也涉及到了資料儲存在資料庫中的方式。標籤的格式有以下幾個考量層面：</p>

<ol>
<li><p>間隔方式</p>

<p> 常見的間隔方式分兩種：<strong>空白</strong>與<strong>逗號</strong>。Flickr 採用空白間隔，Blogger 與 YouTube 則是逗號間隔。這邊還看不出什麼大問題，請接著看下去。</p></li>
<li><p>允許空白與否</p>

<p> 基本上，大多數的標籤功能都允許標籤內含空白，我們免不了會遇到例如 <code>"White House"</code> 或 <code>"Windows Vista"</code> 這樣的標籤。這時候不同的間隔方式就會帶來不同的考量了。</p>

<ol>
<li><p><strong>以空白間隔的標籤</strong>，為了要允許空白字元作為標籤的一部分，所以必須引入引號，被引號包住的詞算做一個標籤，這是 Flickr 的作法。所以一張有「<code>white</code> <code>house</code>」標籤的照片，也許是張白色的房子；而一張有「<code>"white house"</code>」標籤的照片，則可能是美國白宮。不過這樣會使得引號無法作為標籤的一部分，比方說「<code>5'7"</code>」（五呎七吋）這樣的詞就不能拿來當標籤了。</p></li>
<li><p><strong>以逗號間隔的標籤</strong>，在含有空白間隔的標籤問題上看起來比較單純。但實作上其實有一點要注意，就是真正的間隔符號並非單單只有逗號，而是<strong>逗號加上一個空白</strong>。因為人們在輸入時習慣在逗號後面加入空白，如果說空白是合法標籤字元的話，那麼為什麼只有單字間的空白才被記入，單字前後的空白都被忽略呢？</p></li>
</ol>
</li>
<li><p>大小寫</p>

<p> 這邊再以 Flickr 與 YouTube 為例子作比較。YouTube 對於標籤的大小寫是照單全收，所以 <code>"TREE"</code> 標籤點下去的搜尋就是 &#8220;TREE&#8221;，而反之全小寫標籤的搜尋文字就是小寫的，反正搜尋結果無視大小寫，所以不成問題。</p>

<p> Flickr 的作法稍微複雜些，除了你所輸入的之外，Flickr 還會另外將標籤簡化，然後儲存。你可以在三張照片分別使用 <code>"TREE"</code> 與 <code>"Tree"</code> 與 <code>"tree"</code>  這三種大小不同的標籤名，顯示時也是顯示各自不同的大小寫，然而他們都是代表著同樣的一個標籤。所以，如果你在一張照片中使用了 <code>"TREE"</code> 的標籤後，接著再輸入 <code>"tree"</code> 標籤，會發現沒有任何反應，因為標籤重複了。</p></li>
<li><p>內部處理</p>

<p> Flickr 在輸入標籤時所做的處理，除了大小寫外，也套用在空白上。因此，<code>"White House"</code>, <code>"whitehouse"</code>, <code>"WhiteHouse"</code> 這三個標籤同樣都是指向 <code>"whitehouse"</code> 這個內部處理的標籤。Flickr 內部運作時的標籤，是會把空白去掉並且全部轉為小寫字母。</p>

<p> Youtube 就不同了，如前所述，你輸入什麼標籤它就存什麼，所以 <code>"White House"</code> 跟 <code>"whitehouse"</code> 是不同的。事實上，你用這兩組字串去 YouTube 搜尋，也會得到不一樣的結果。</p></li>
</ol>


<hr />

<p>延伸閱讀：<a href="http://37signals.com/svn/archives2/tag_formats_cant_we_all_just_get_along.php">Tag formats: Can&#8217;t we all just get along? - Signal vs. Noise (by 37signals)</a></p>

<p>2005 年的文章。估計是 37signals 要實作標籤系統時，研究了當時幾個主流網站的標籤機制，對象包括 del.icio.us, 43things, Yahoo’s My Web, flickr 與 Amazon。這篇文章底下也有頗多值得一看的討論。文章的最後提到：</p>

<blockquote><p>當新科技剛出現時，不一致是免不了的。然而這些不同的格式是否會持續下去，或是終將會有個標準一統天下呢？</p></blockquote>

<p>2005 到現在，都六、七年了，標籤功能其實仍舊處於混沌未明的時代。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最後から二番目の恋（日劇）]]></title>
    <link href="http://tzengyuxio.me/blog/2012/04/18/saigo-kara-nibanme-no-koi/"/>
    <updated>2012-04-18T04:57:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/04/18/saigo-kara-nibanme-no-koi</id>
    <content type="html"><![CDATA[<p>我喜歡《最後から二番目の恋》裡頭的熱鬧與喧嘩。</p>

<p>簡單來說，這部戲的結構並不複雜：住在鎌倉的長倉家有四個兄弟姊妹，隔壁新搬來了一個東京來的單身職場女強人－－吉野千明，這給原本平靜的長倉家帶來了許多生活上的變化。</p>

<p>於是乎劇情多半都圍繞在這兩戶人的互動上，偶爾加入些千明在電視台，或是大哥長倉和平在市公所裡的職場工作。一個是電視人，一個是公務員，從男女主角兩人的工作上，其實就反映出兩個人截然不同的個性。在電視台工作的千明，一直在接受新的觀念與新的事物，工作過程中也經常會出現意外的變卦，需要臨時調整作法。而身為公務員的和平，就是很標準的一板一眼，對許多事情的態度，說難聽點是固執，說好聽點是擇善固執。</p>

<p>不過就是因為有這樣的對比，故事的發展才有衝突，才有精采的過程。整齣戲的節奏還挺快的，不會拖泥帶水－－除了最終話千明與和平兩個人一邊喝著調酒一邊聊天這段，這一段我看到差點睡著，感覺就像是最終話時數不夠只好多講些話充場面似的。話說回來，雖然劇情進行的節奏快，不過角色鮮明，對話也多半生動有趣，所以看起來還蠻輕鬆的。</p>

<p>《最後から二番目の恋》大概是我看過的日劇裡，主要演員的平均年齡最高的一部。千明與長倉家的兄弟姊妹多是四、五十歲的人了，最小的雙胞胎姊弟也是三十五歲。說起來，大哥與最小的妹妹相差有 15 歲之多，也算是蠻大的年齡差距。</p>

<p>主要演員裡的<strong>中井貴一</strong>與<strong>小泉今日子</strong>都是演技派，看他們倆鬥嘴實在很過癮。兩個人經常講話講著講著就拌起嘴來了，看起來像是感情不好，但某種程度上也算是一種默契吧，感情不好的人，想鬥嘴也鬥不起來。除了男女主角外，還有些演員我想提一下，第一個就是<strong>內田有紀</strong>。內田的戲我看過的只有《一個屋簷下》，好多年前的事了。雖然因為那齣戲記住了這個演員，可是當時卻覺得她演得很差，有內田出現的戲我都希望能快點結束。</p>

<p>然而這次內田演出的万理子卻非常的特別：頂著一頭看不見眼睛的鳥巢亂髮，講話很快又讓人摸不著頭緒，加上一付陰沈的模樣，又不時盯著自己的手機－－乍看只會讓人覺得這傢伙是個怪胎，但相處久了卻讓人發現這個小妹還挺可愛的，活脫像是從漫畫中跳出的人物。在看不到眼神，只能用半張臉表情演戲的嚴苛限制下，內田完全演活了万理子這角色。</p>

<p>其次就是大橋母女。這對母女長得還真像，讓我一度還誤以為是找真正的母女來演出。剛看前面幾集時，我還以為女兒大橋知美只是個偶爾露臉的小配角，沒想到之後的戲份還不輕！知美的聲音很可愛，在戲裡面有提到被說很像「動畫聲優」，但知美本人很不喜歡這聲音。相反的，媽媽大橋秀子的聲音就跟女兒完全不同，相當低沈，讓我聯想到石原里美，話說媽媽和石原也有幾分神似，搞不好現在的大橋媽媽就是二三十年後石原的模樣。</p>

<p>再來就是替電視台寫腳本的栗山はるか老師，本來當她只是個靠美貌的美女作家，沒想到還挺有本事的，同時替兩個電視台寫腳本，而且還要兼顧家庭，早上幫小孩作便當，完全就是一副人生勝利組的模樣。和單身超熟女千明根本就是兩個不同世界的人。</p>

<p>《最後から二番目の恋》的主題曲是由<strong>浜崎あゆみ</strong>所唱的 〈how beautiful you are〉，雖然我偶爾也會聽步姊的歌，但她這首我真的很難接受，覺得她的歌聲變得很難聽。反倒是配樂常出現的幾首英文歌我都蠻喜歡的，尤其是 Yael Naim 所演唱的〈Far Far〉讓人最為印象深刻。</p>

<iframe width="480" height="360" src="http://www.youtube.com/embed/HKWE5m_2wug?rel=0" frameborder="0" allowfullscreen></iframe>


<p>啊！最後還有件事差點忘了提，那就是千明的熟女摯友中，飾演啟子一角的是<a href="http://zh.wikipedia.org/wiki/%E6%A3%AE%E5%8F%A3%E5%8D%9A%E5%AD%90">森口博子</a>。說到森口博子，也許一般人比較少聽到這名字，不過對於動畫迷而言，森口博子所演唱過的<a href="http://youtu.be/rFOhzAEXRPo">〈水の星へ愛をこめて〉</a>（機動戰士Z鋼彈）、<a href="http://youtu.be/MJh5UjrHQ8w">〈ETERNAL WIND〜ほほえみは光る風の中〜〉</a>（機動戰士鋼彈F91），可都是動畫歌曲裡經典中的經典呢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我不和運氣差的人合作，嗎？]]></title>
    <link href="http://tzengyuxio.me/blog/2012/04/11/to-hire-lucky-or-unlucky-its-a-question/"/>
    <updated>2012-04-11T10:44:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/04/11/to-hire-lucky-or-unlucky-its-a-question</id>
    <content type="html"><![CDATA[<p>最近讀到 <a href="http://raganwald.posterous.com/i-dont-hire-unlucky-people">I don&#8217;t hire unlucky people - raganwald&#8217;s posterous</a> 這篇文章，有些想法跟 <a href="http://mr6.cc/?p=7363#more-7363">你有膽量說：「我不和運氣差的人合作」？ (Mr. 6)</a> 這一篇所寫的不太一樣。想法不同也就算了，文章本來就是個別讀者與單一作者之間的心靈互動，讀者不同，互動不同，激發出的想法自然也不同，這無可厚非。</p>

<p>不過對於文章內容的解讀也不一樣，這讓我不由得想寫一篇文章來談談 &#8220;I don&#8217;t hire unlucky…&#8221; 這篇的內容。這篇文章很長，以對話小說式的方式來描述，講述如何節省 hire people 的時間與 hiring 時的考量，我懶得逐字翻譯，所以會簡單帶過故事內容。</p>

<h2>Part 1</h2>

<p>故事可以分成上下兩部分。第一個部分有兩個主角，Bertram 和 Ernestine，Bertram 負責招募零售商店的學徒，Ernestine 的工作則是在招募軟體開發的 programmer。Ernestine 有天問 Bertram，她手上有上百份履歷，要怎麼減少不必要的電話與面試呢？</p>

<p>Bertram 說很簡單，他拿起一整疊履歷，丟掉一半，然後回答，<strong>「不要雇用運氣不好的人就好啦。」</strong>Ernestine 聽了之後想要試試看，於是回去問 Mark 意見，Mark 是她公司的 CFO 以及天使投資人，對於軟體產業也有些瞭解。Mark 點出了 Ernestine 與 Bertram 環境的不同。</p>

<blockquote><p>Bert 那邊有相當多符合條件的人 (qualified people) 在應徵他的工作，假設 100 個裡面有 50 個好了，就算他刪去一半的人，平均來講，剩下的 50 個裡也還有 25 個符合條件的人可以挑選。而妳在招募的 programmer, 可能一百份履歷裡面只有一兩個符合資格的，<strong>妳如果一口氣刷掉一半的履歷，妳可能在剩下的那 50 份裡完全找不到半個合適的人。</strong></p></blockquote>

<p>於是 Ernestine 放棄了 Bertram 告訴她的方法。開始不斷嘗試、調整，試著去找出自己的方法。</p>

<h2>Part 2</h2>

<p>故事來到兩年後。Oscar 是 Ernestine 公司裡的程式主管，他也有面對一堆履歷不知從何著手的問題，於是像她的上司 Ernestine 請教。</p>

<p>Ernestine 告訴 Oscar，首先，她不再去注意<strong>一份履歷是否「專業」</strong>，比方說履歷的格式或是文字中是否有錯字等等。因為去在意這些東西，其實<strong>跟隨機丟掉一半運氣不好的履歷，是沒什麼兩樣的</strong>。</p>

<p>於是 Oscar 提出質疑，Oscar 的質疑也是我們一般會有的想法：「可是從履歷的完整度，我們可以看出求職者的用心，知道對方是不是有熱誠想要進我們的公司不是嗎？」</p>

<p>Ernestine 的回答點出了重點。如果我們今天有 50 個不錯的人才，那我很樂意找出到底哪一半的人有進公司的熱誠，哪一半沒有。但如果我們今天的履歷裡有 99 個庸才跟一個天才，<strong>那我的首要目標是要想辦法找出這一個天才是誰，至於誰比較有進公司的熱誠則是次要的了</strong>。</p>

<p>Ernestine 繼續說下去，她用同樣的想法貫穿整個人才的挑選：她挑或不挑一個人，是決定於與工作技能本身相關的直接或間接衡量 (direct measurement or indirect measurement)，例如學歷算是間接衡量指標。</p>

<p>講到這邊，Oscar 又打斷，並且說明了學歷的重要，學歷反應許多資訊，不應該只是間接衡量。Ernestine 大致上同意 Oscar 的看法：</p>

<blockquote><p>幾乎每一個我們所雇用的都有大學學歷，但我在看履歷時不會依照他們的學位或學校排出優劣。我只是看他們的工作經驗或是提供的代碼範例。而結果就是，我們所想要的每個有經驗的人才都具有大學學歷。</p></blockquote>

<p>但是她接下來的回答很有意思，值得令人多加思考：</p>

<blockquote><p>然而把「關連性 (correlation)」與「因果關係 (causation)」兩件事搞混是非常危險的。而更糟糕的則是把「關連性」跟「必要性 (necessity)」搞混。如果說，有念過大學對 programmer 來說是一件好事，那麼我們在看他的經歷、程式代碼，或是與之面談時，也可以發現他的能力優秀。</p></blockquote>

<p>所以我的理解是，念過大學可以幫助一個程式設計師成長，但這些成長會表現在他的工作經歷或是代碼上。所以經歷或是代碼是直接的衡量標準。大學教育與優秀的程式設計師有關連性，但不是必然的因果，更不是必要的條件。</p>

<p>Ernestine 繼續說到，當她在看求職者的 blog 時也用同樣的標準去檢視。比如說有個求職者喜歡攀岩，聽起來不錯，公司裡也有許多同事喜歡攀岩，不過 Ernestine 會忽略掉興趣這項訊息。</p>

<blockquote><p>畢竟，如果因為興趣不對就被刷掉，是非常不走運 (unlucky) 的。而我不想僅僅只是因為一份履歷不走運就把它刷掉。</p></blockquote>

<p>這裡有句重點：</p>

<p><strong>hiring programmers, not ascetics or rock stars</strong></p>

<p>Ernestine 甚至會抗拒去查看求職者在社交媒體上分享的資訊。她不想因為求職者在政治、興趣等觀點上與她志趣相投或是理念不同，而產生偏見，進而影響求職者被錄用與不錄用（這在美國也是違法的），同時這對公司也不是件好事。她雇用時，<strong>單純只考量求職者在專業技能上是否滿足條件</strong>。從招聘的觀點來看，去考慮對方是否跟你合不合得來，其實就只是種運氣的問題，而非適任不適任的問題。</p>

<p>Ernestine 最後提到招募廣告，她現在開始使用平舖直敘的文字廣告來招募。她之前也曾使用過「徵求忍者！搖滾巨星！」之類的誇張廣告。但她發現這類的廣告也許會吸引到喝 Dry Martini 的人（意指比較外向積極），但是那些不喝 Dry Martini 不見得就不適合這份工作。所以登「我們需要忍者！需要超級巨星！」這類廣告，跟單單只是因為不喜歡沒運氣的人而刷掉一半，其實沒什麼兩樣。</p>

<p>接下來的問答很有趣，programmer 應該都會有更深的體會。Oscar 問到：「要是如果忍者廣告比起直白廣告真的能吸引到更多符合條件 (qualified) 的人前來應徵呢？」</p>

<p>Ernestine 的回答相當妙了：「當你寫程式時，你怎麼知道哪一段 code 需要最佳化呢？」Oscar 回答：「我會去測量（measure）, Premature optimization is the—Oh, I get it!」這邊 Oscar 的話雖然講到一半，但是這句話相信 programmer 都應該熟悉：</p>

<blockquote><p>Premature optimization is the root of all evil.</p>

<p>過早優化是萬惡之源。</p>

<p>&#8211; Donald Knuth</p></blockquote>

<p>所以 Ernestine 會有這樣的結論也是測量過後的結果。她說，登廣告找人，跟登廣告賣東西都是一樣的，你必須追蹤測量所有數據 (track &amp; measure everything)，你才能分析，知道有沒有效果。</p>

<h2>結論</h2>

<p>所以，Ernestine 減少處理上百份履歷時間的方式，並不是用什麼隨機丟掉一半，把運氣不好的人排除掉。也不是什麼像下面這段所說的尋找一個點，一個感動、注意、雙眼為之一亮的點。不是尋找什麼鳳毛麟角。</p>

<blockquote><p>作者建議，當100選1的時候，應該直接隨便看一張履歷表，看看此人是否有哪個「點」讓你感動、讓你注意、讓你雙眼為之一亮？不是想辦法刪去，而是「尋找」那個鳳毛麟角之特色。</p></blockquote>

<p>Ernestine 的方法很簡單。今天如果我要找程式設計師，<strong>我就只專注在相關的技能、經驗或作品上。而不是看著履歷表上洋洋灑灑一大堆與適任與否無關的資訊或情報。</strong></p>

<hr />

<p>看完了這個故事，是不是覺得英文閱讀能力很重要呢？多培養自己的英文閱讀，直接吸收第一手資訊，才能夠間接提高自己的好運度喔！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你怎麼知道如何判斷運氣好壞？]]></title>
    <link href="http://tzengyuxio.me/blog/2012/04/11/how-do-you-know-you-can-hire-lucky-people-by-this-way/"/>
    <updated>2012-04-11T08:53:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/04/11/how-do-you-know-you-can-hire-lucky-people-by-this-way</id>
    <content type="html"><![CDATA[<p>這幾天在 Facebook 出現一篇分享率很高的文章，叫做〈<a href="http://mr6.cc/?p=7363#more-7363">你有膽量說：「我不和運氣差的人合作」？ (Mr. 6)</a>〉，帶給我很多想法，在這裡分享一下。</p>

<p>什麼叫做「不和運氣差的人合作」？</p>

<p>這位作者舉了一個例子，如果你是某間店的店主，現在要找店員，現在收到了 100 份履歷，但你很忙，沒有時間一個一個看。最簡單的方式就是索性從 100 份中<strong>隨機挑出 10 份</strong>，然後從 10 份中挑出一個最棒的。至於那些被過濾掉的 90 份，只能怪他們<strong>運氣不好啦</strong>！</p>

<p>聽起來很帥氣，不是嗎？</p>

<p>這過濾的方法真是簡單、漂亮又優雅－－但我深深覺得還有哪裡不夠。</p>

<p>「你怎麼確定被挑出的代表運氣好？萬一，我是說萬一，你的店下個月突然發生意外，週轉不靈發不出薪水，那麼<strong>被挑出的反而都是倒楣的人</strong>，真正運氣好的人早在你挑的時候成為漏網之魚，從你手中逃掉啦！」</p>

<p>是的，華生，你突破盲點了。</p>

<p>我相信，運氣好的人是會互相吸引的。所以在我使用這個「隨機運氣過濾法」之前，我得要先確定一下自己的運氣到底是好是壞：如果我運氣好，那麼被我挑到的人他們也都是具有好運的；如果我生來就是不走運，那麼沒被我挑到的人才是真正運氣好的人。只要我能夠知道自己的運氣是好或壞，我就能夠知道到底我要從被我挑出的那 10 份裡面去挑人，還是從被我放棄的那 90 份裡面去挑人。</p>

<p>那麼要怎麼確定自己的運氣是好或壞呢？我想到兩個方法。第一方法呢，就是如法炮製，我把我的履歷寄到另外一間採用同樣「隨機運氣過濾法」的公司，如果有被挑上，那我就是運氣好；如果沒被挑上，那我就是壞運氣－－等等，不對，我怎麼知道另外一間公司負責挑選員工的雇主也是好運氣呢？如果我被挑上，但是另外一間公司的雇主是壞運氣的，那不就表示我被挑上但其實是壞運氣的？這豈不成了無窮迴圈？</p>

<p>好吧，看來第一個方法行不通，換下一個。第二個方案就比較簡單了：<strong>去買樂透</strong>。中了就中了，沒中就沒中，一翻兩瞪眼，多乾脆。不過要是我今天運氣好，中了樂透，我索性就把店收了，退休度假去，何必還在那邊辛辛苦苦地煩惱到底要雇用什麼樣的員工呢？</p>

<hr />

<p>每個人都想要和「運氣好」的人一起合作，但問題就出在於什麼叫做「運氣好」？成為「在 100 份履歷中被挑出的 10 份中的其中之一」就算運氣好嗎？我不以為然。即便是中了樂透，也未必是就真的是運氣好的人－－對於許多心理尚未做好準備的人，中了樂透往往是人生悲劇的開始：中了樂透之後到達人生最高潮，然後朋友反目、妻離子散、揮霍度日、散盡家產這樣的故事俯拾皆是，我也懶得舉例了。所謂<strong>「塞翁失馬，焉知非福？」</strong>一件事情究竟是好是壞，其實是沒辦法從當下發生的事情本身來判斷的。</p>

<p>所以到底什麼算是「運氣好」的人呢？我覺得只要「有做好準備」的人，就很容易遇到好運氣。運氣這東西，不外乎就是種機率。即使單一事件成功的機率極低，然而當你準備的越多，準備的越周全，這個極低機率發生成功的可能性就越大，成功的可能性比其他人來得大，自然就可以看做是「運氣好」的人了。</p>

<p>讓我們這樣來看：假設開發一百款遊戲中只有一款會成功，也就是說，成功的機率是百分之一，失敗的機率是 0.99。那麼，<a href="http://www.rovio.com/">作了 52 款遊戲的公司</a>，至少有一款成功的機率是多少？換個角度想或許會比較簡單，52 款遊戲全部都失敗的機率是多少？</p>

<p>答案是，52 款遊戲都失敗的機率是 59%，所以相反的，有逾四成的機率這家公司能夠有一款以上的成功遊戲。<strong>四成</strong>跟<strong>百分之一</strong>，很大的差距不是？而只要能有一款成功的遊戲，這家公司就能夠開始踏上好運的高速公路，吸引到更多「運氣好」的員工一起加入，進入正向循環。</p>

<p>所以，運氣人人都有，但你準備的越多越充分，你就能夠比其他人來得更強運。</p>

<hr />

<p>關於給六先生帶來許多想法的這篇 <a href="http://raganwald.posterous.com/i-dont-hire-unlucky-people">I don&#8217;t hire unlucky people - raganwald&#8217;s posterous</a>，我運氣很好，剛好也看了。有一些不太一樣的解讀。可惜這裡空白的地方太小，寫不下，只好<a href="http://tzengyuxio.me/blog/2012/04/11/to-hire-lucky-or-unlucky-its-a-question/">另外寫一篇來討論</a>了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 Mac 輸入特殊文字符號]]></title>
    <link href="http://tzengyuxio.me/blog/2012/04/05/how-to-input-character-symbol-in-mac/"/>
    <updated>2012-04-05T08:12:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/04/05/how-to-input-character-symbol-in-mac</id>
    <content type="html"><![CDATA[<p>有時候在網路上會看到像「㍿」這樣的文字符號，有沒有好奇這是怎麼打出來的呢？這可不是把四個字打在一個格子裡面，而是這原本就是一個作為符號使用的 Unicode 文字。就好像英文中的 Trade Mark 可以用「™」表示一樣。類似的文字還有（如果底下只看到方框看不到字，表示你瀏覽器所用的字型沒有包含到下面這些 Unicode 字碼）：</p>

<h3>英文</h3>

<ul>
<li>℡ ℻ №</li>
</ul>


<h3>日本年號</h3>

<ul>
<li>㍻ ㍼ ㍽ ㍾</li>
</ul>


<h3>日期時間</h3>

<ul>
<li>㋀ ㋁ ㋂ ㋃ ㋄ ㋅ ㋆ ㋇ ㋈ ㋉ ㋊ ㋋</li>
<li>㏠ ㏡ ㏢ ㏣ ㏤ ㏥ ㏦ ㏧ ㏨ ㏩ ㏪ ㏫ ㏬ ㏭ ㏮ ㏯ ㏰ ㏱ ㏲ ㏳ ㏴ ㏵ ㏶ ㏷ ㏸ ㏹ ㏺ ㏻ ㏼ ㏽ ㏾</li>
<li>㍘ ㍙ ㍚ ㍛ ㍜ ㍝ ㍞ ㍟ ㍠ ㍡ ㍢ ㍣ ㍤ ㍥ ㍦ ㍧ ㍨ ㍩ ㍪ ㍫ ㍬ ㍭ ㍮ ㍯ ㍰</li>
</ul>


<h3>星期</h3>

<ul>
<li>㈪ ㈫ ㈬ ㈭ ㈮ ㈯ ㈰</li>
<li>㈠ ㈡ ㈢ ㈣ ㈤ ㈥ ㈰</li>
</ul>


<h3>加框字</h3>

<ul>
<li>㈱ ㈲ ㈶ ㈳ ㈸ ㈾ ㉀ ㉁ ㈻</li>
<li>㊙ ㊚ ㊛ ㊞ ㊣ ㊤ ㊥ ㊦ ㊧ ㊨ ㊩ ㊰</li>
</ul>


<hr />

<p>那麼，要如何輸入這些特殊符號呢？在 Mac 中很簡單，只要開啟「特殊字元」的輸入視窗。絕大多數 Mac 下的應用程式都可以在選單列的「編輯」或「Edit」最下方找到「特殊字元&#8230;」或「Special Characters…」；通常也可以透過快捷鍵「⌥⌘T」來開啟特殊字元視窗。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-05-special-characters.png" alt="image" /></p>

<p>上面就是特殊字元的輸入視窗。到這邊已經可以輸入各種奇奇怪怪的符號了，不過如果想要輸入像「㍿」或「㊙」這類的特殊字則還不夠，得要進「自定列表」加入新的類別。點左上角的齒輪便可開啟自定列表，然後選取以下類別：</p>

<ul>
<li>數字 - 全部</li>
<li>類字母符號 - 全部</li>
<li>框住的字元</li>
</ul>


<p>這樣子就可以輸入上文中提到的文字符號囉！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps Quest]]></title>
    <link href="http://tzengyuxio.me/blog/2012/04/02/google-maps-quest/"/>
    <updated>2012-04-02T05:12:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/04/02/google-maps-quest</id>
    <content type="html"><![CDATA[<p>照往例，今年的四月一號 Google 又推出了許多令人驚奇的功能與服務，而且多到令人目不暇給。但今年有個令我最感動的產品，那就是 8-bit 版本的 Google Maps。</p>

<iframe width="640" height="360" src="http://www.youtube.com/embed/rznYifPHxDg?rel=0" frameborder="0" allowfullscreen></iframe>


<p>上面影片中的許多元素，相信都是目前三、四十歲這一代的共同回憶。像是吹卡匣或是撥接時的噪音等等。而影片中那 8-bit 風格的美術與音效，更是所有勇者迷再熟悉也不過的場景了。看完影片後我立刻連上 Google Maps，在 8-bit 的世界中玩了好久，到處探索，就好像自己真的是個勇者一樣四處探險。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-01.png" alt="image" /><br/>
這是離我們最近，也是我們最熟悉的建築物－－天空之塔。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-02.png" alt="image" /><br/>
我所在的位置。透過 8-bit 地圖看來，突然覺得有河流經過是個不錯的地方。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-03.png" alt="image" /><br/>
蕃薯島 XD</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-04.png" alt="image" /><br/>
SEGA MD 大戰略一代中的「遠東（Far East）」地圖就是長這樣。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-05.png" alt="image" /><br/>
北邊大陸上除了有冰原，還有會扣 HP 的毒沼。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-06.png" alt="image" /><br/>
世界地、不，是勇者鬥惡龍三代的地圖。(<a href="http://www.nesmaps.com/maps/DragonWarrior3/DragonWarrior3OverworldMapBG.html">對照版</a>)</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-07.png" alt="image" /><br/>
日邦格的富士山。日邦格這地方的樹木也跟別處不同，是楓紅色的。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-08.png" alt="image" /><br/>
Goolge 總部，感覺怪物很多……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Analytics 也可以彈鋼琴]]></title>
    <link href="http://tzengyuxio.me/blog/2012/04/01/google-analytics-play-music-for-you/"/>
    <updated>2012-04-01T09:23:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/04/01/google-analytics-play-music-for-you</id>
    <content type="html"><![CDATA[<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-analytics-piano.png" alt="image" /></p>

<p>剛剛發現，Google Analytics 的「造訪」按鈕旁多了個音符記號。點下去後會出現 Piano 與 Sitar 兩種樂器可以選，選了之後就會看到下方折線圖的節點會按順序一個一個亮起來，並播放與節點高低對應的音階。</p>

<p>可惜我的折線圖不夠精采，撥出來的音樂平平淡淡，沒有直墜谷底或是步步高昇的激昂起伏。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 的開箱文系列]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/30/octopress-unboxing-collections/"/>
    <updated>2012-03-30T08:44:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/30/octopress-unboxing-collections</id>
    <content type="html"><![CDATA[<p>在安裝 Octopress 的時候，上網找了許多資料，也發現一個有趣的現象，就是大家的第一篇文章幾乎都是要對 Octopress 說幾句話。所以乾脆就來收集一下，看看大家的第一篇都寫些什麼？</p>

<p>以下按照時間順序排列：</p>

<hr />

<h4><a href="http://blog.xdite.net/posts/2011/10/07/migrate-to-octopress/">Migrate to Octopress - Blog.XDite.net</a></h4>

<ul>
<li>Oct 7, 2011 by <strong>XDite</strong></li>
<li>title: <code>migrate-to-octopress</code></li>
<li>這是我所能找到的最早的一篇。相信國內很多用 Octopress 架站的也或多或少受了這篇與 XDite 的影響。</li>
</ul>


<h4><a href="http://tzangms.com/2011/10/09/from-blogofile-to-octopress/">From blogofile to octopress - Oceanic / 人生海海</a></h4>

<ul>
<li>Oct 9, 2011 by <strong>tzangms</strong></li>
<li>title: <code>from-blogofile-to-octopress</code></li>
<li>tzangms 在這篇最後寫道：「不過, 我覺得一定有一些人一定換了這類的 blog 系統之後, 就減少了發文的動力, 像我就是 XD」hmm…我完全可以理解這種「為了想跑步而買新球鞋，買了之後反而減少了跑步動力」的心情 XD</li>
</ul>


<h4><a href="http://hack.sslab.co/blog/2011/10/14/hello/">Hello, Octopress - Hack × StrongSoft</a></h4>

<ul>
<li>Oct 14, 2011 by <strong>StrongSoft</strong></li>
<li>title: <code>hello</code></li>
<li>小小吐槽一下，雖然文中作者有說用了 Octopress 之後，就發現自己「回不去了」－－可是我看你後來還是<em>回去</em>用 blogger 繼續寫文章啊 XD</li>
</ul>


<h4><a href="http://swind.github.com/blog/2011/10/19/ban-jia-hou-di-1pian/">搬家後的第一篇文章-Octopress安裝筆記 - Corleonis</a></h4>

<ul>
<li>Oct 19, 2011 by <strong>swind</strong></li>
<li>title: <code>ban-jia-hou-di-1pian</code></li>
<li>這篇有許多在 Windows 上安裝的心得，有興趣的可以參考看看。</li>
</ul>


<h4><a href="http://blog.eddie.com.tw/2011/10/27/move-to-octopress/">搬到Octopress了 - 高見龍</a></h4>

<ul>
<li>Oct 27, 2011 by <strong>高見龍</strong></li>
<li>title: <code>move-to-octopress</code></li>
<li>我在安裝 Octopress 時有向作者請教過些問題，感謝他的熱心回應。</li>
</ul>


<h4><a href="http://hychen.wuweig.org/blog/2011/11/13/huan-dao-octopress/">換到octopress - 無為閣</a></h4>

<ul>
<li>Nov 13, 2011 by <strong>hychen</strong></li>
<li>title: <code>huan-dao-octopress</code></li>
<li>這篇文章中有一段 Script, 可以幫助作者減輕 Octopress 有一堆指令得記的壓力。</li>
</ul>


<h4><a href="http://blog.yorkxin.org/2011/11/20/hello-octology/">Hello! Octology - YORKXIN×YORKXIN</a></h4>

<ul>
<li>Nov 20, 2011, by <strong>Yu-Cheng Chuang (chitsaou)</strong></li>
<li>title: <code>hello-octology</code></li>
<li>從 WordPress 搬家過來的。這個網站還有許多篇與 Octopress 相關的文章（〈Octopress 搬家記〉系列），很值得參考。</li>
</ul>


<h4><a href="http://blog.hinablue.me/entry/move-to-octopress/">搬家到 Octopress - HINA::工程幼稚園</a></h4>

<ul>
<li>Nov 29, 2011, by <strong>hinablue</strong></li>
<li>title: <code>move-to-octopress</code></li>
<li>從 TextCube 搬家過來的，其實在這之前我沒聽過 TextCube (太孤陋寡聞了我)。</li>
</ul>


<h4><a href="http://whiteball.tw/blog/hello-world/">Hello world! - Whiteball</a></h4>

<ul>
<li>Dec 30, 2011, by <strong>Ching-Han Ho</strong></li>
<li>title: <code>hello-world</code></li>
<li>剛架好 Octopress 的朋友，在迫不及待準備要寫點東西發佈之前可以先看看這篇文章：〈<a href="http://whiteball.tw/blog/before-you-deploy-octopress/">在 Octopress 佈署出去前要注意的小地方</a>〉</li>
</ul>


<h4><a href="http://zespia.tw/blog/2012/01/14/hello-octopress/">Hello Octopress! - Zespia</a></h4>

<ul>
<li>Jan 14, 2012, by <strong>SkyArrow</strong></li>
<li>title: <code>hello-octopress</code></li>
<li>是 Octopress 主題 <a href="http://zespia.tw/Octopress-Theme-Slash/index_tw.html">Slash</a> 的作者。Slash 看上去簡約優雅，有許多人使用。更令人佩服的是，作者目前還只是個高中生！</li>
</ul>


<h4><a href="http://xoyo.name/2012/02/migrate-to-octopress/">博客跟风改用octopress - Mr Sunshine</a></h4>

<ul>
<li>Feb 7, 2012, by <strong>Zhiwei Xiao</strong></li>
<li>title: <code>migrate-to-octopress</code></li>
<li>也是從 WordPress 搬來的，文章中有提供一個將 Octopress 指令整合進 Emacs 的擴展。</li>
</ul>


<h4><a href="http://warwithinme.com/blog/2012/02/blogging-with-octopress/">开始用Octopress写Blog - War Within Me</a></h4>

<ul>
<li>Feb, 20, 2012, by <strong>WWM</strong></li>
<li>title: <code>blogging-with-octopress</code></li>
<li>我很喜歡這個網站的主題設計。作者的文字風格也很有趣，看得出來是宅宅星人（恭維的意味）。另外作者也是個 <a href="http://www.alfredapp.com/">Alfred</a> 愛好者！</li>
</ul>


<hr />

<p>可以看出，幾乎每篇的標題都有 Octopress 這字出現，唯一沒有的一篇是用了 Octology 這個字。而 title 的部份，也不脫 hello / move / migrate 等單字。有趣的是，其中有兩篇是用拼音來寫 title，對於懶得想英文標題句的人，倒也不失為一個簡單省腦的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 開箱首發文]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/29/octopress-unboxing/"/>
    <updated>2012-03-29T16:55:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/29/octopress-unboxing</id>
    <content type="html"><![CDATA[<p>前天與昨天兩天我都在修改 blogger 的 template－－起因是這樣：我在 Chrome 裝了個 <a href="https://chrome.google.com/webstore/detail/afoibpobokebhgfnknfndkgemglggomo">HTML5 Outliner</a> 的擴充，透過這個擴充，可以查看某個網頁的大綱排列是否如預想的一樣。很顯然，blogger 預設提供的幾個範本並沒有良好的 HTML5 大綱結構，於是我決定動手修改它。</p>

<p>原本以為這是個小工程，沒想到卻花了我整整一夜一天的時間在和 <strong>blogger template</strong> 的語法纏鬥。blogger template 用到了許多神乎奇技的技巧，可以在一個 template 檔案中同時提供桌面與行動等不同平台的版面；同時提供首頁、封存、標籤與單篇等不同文章組合的版面；可以提供各式各樣的參數讓你在後台中只要簡單選選顏色調整大小就可以做出各式各樣的變化。而這些全部都是在一個 XML 檔案裡就可以搞定。</p>

<p>但也正因如此，許多設定與參數都是牽一髮動全身，想改也不曉得從哪邊改才安全。偏偏 blogger template 的設定與參數目前還缺乏文件，網路上能找到的多半是舊版的 template 語法。很多時候看到一個 css class 你只能先用猜的猜他的用途，然後慢慢試誤。最後雖然整出了滿意的結果，也獲得了不少寶貴的經驗－－但心中卻冒出了一個更大的疑問：</p>

<p><strong>「我真的想要再和這個怪物繼續相處下去嗎？」</strong></p>

<p>念頭一起，手也沒停著。立刻就進了不久前才開的 <a href="http://tzengyuxio.tumblr.com/">Tumblr</a> 帳號琢磨了許久。「要轉到 Tumblr 嗎？」我這麼問著自己，然而心裡總覺得還有什麼缺憾沒有被滿足。這時腦袋閃過先前看過的 <a href="http://octopress.org/">Octopress</a>, 數週前第一眼看到時沒什麼興趣，這次決定給它個機會，動手裝個起來玩玩看。</p>

<p>裝的過程還算順利，但也不是完全一帆風順。我遇到了一個 <code>rb-fsevent</code> 編譯錯誤的問題，幸好在 <a href="http://newbsd.com/blog/2012/03/19/my-first-try-install-octopress-on-my-mac-os-x-lion-10-dot-7-3-and-some-thing-stuff/">這篇文章</a> 中找到了解決方式，重點在於一行 <code>xcode-select</code> 指令。</p>

<p>架設好了環境，索性又申請了一個新的域名，這下真的是徹頭徹尾搬了新家。鷹架都搭好了，剩下的就是充實內容了。希望新的環境能夠帶來更愉快的書寫體驗，也期許自己今年能夠有更充實文章記錄。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 與 Ruby 的模組安裝]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/29/install-module-in-python-and-ruby/"/>
    <updated>2012-03-29T08:39:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/29/install-module-in-python-and-ruby</id>
    <content type="html"><![CDATA[<p>其實這兩個語言的模組安裝都很簡單。不過我不是個成天都在安裝新玩意兒的人，偶爾因為業務需求或是心血來潮想要裝個模組，卻又忘了指令怎下，免不了得又得上網搜尋。</p>

<p>雖說資料不難找，但每次都問 google 也是折騰，索性自己記個筆記，將來若有需要時，翻自己筆記總比上網搜尋來得快速。</p>

<p>更重要的是，才不會因為上網問 google 然後<strong>開一堆網頁邊看又繼續邊開連結搞到最後開了一大堆自己好像有興趣但其實跟原本問題一點也不相干的文章</strong>。我真是太容易<em>分心</em>了。</p>

<h2>Python 的 easy_install</h2>

<p>Python 的 easy_install 人如其名，真的很 easy。比方說我看到 <a href="http://pypi.python.org/pypi/Markdown">Markdown 2.1.1 : Python Package Index</a> 這個套件想要安裝，我只要到終端機輸入下面指令就行了：</p>

<pre><code>$ easy_install markdown
</code></pre>

<p>要刪除模組的話則是輸入：</p>

<pre><code>$ easy_install -m markdown
</code></pre>

<p>easy_install 主要的功能就是安裝，如果需要進一步說明，可以參考</p>

<pre><code>$ easy_install --help
</code></pre>

<h2>Ruby 的 gem</h2>

<p>相比之下，Ruby 的 gem 就不僅僅只是個安裝工具，它是個完整的<strong>套件管理工具</strong>。例如我想安裝一個叫 <a href="http://toodledo.rubyforge.org/toodledo/">toodledo</a> 的套件，可以這麼輸入：</p>

<pre><code>$ gem install toodledo
</code></pre>

<p>或是指定版本號：</p>

<pre><code>$ gem install toodledo --version 1.3.8
</code></pre>

<p>移除的話是：</p>

<pre><code>$ gem uninstall toodledo
</code></pre>

<p>我想知道有沒有跟 markdown 相關的套件，我可以用如下方式尋找：</p>

<pre><code>$ gem list markdown --remote
</code></pre>

<p>如果沒有加上 <code>--remote</code>, 則會列出本機已經安裝的套件。</p>

<pre><code>$ gem list
</code></pre>

<p>更詳細的說明可以參考線上說明。</p>

<pre><code>$ gem help
</code></pre>

<h2>在 Mac 上</h2>

<p>上面這兩個工具程式在 Mac OS X 中都是預設已經安裝在系統中的，省了不少麻煩。安裝的過程如果有遇到權限問題，那麼就在上面所列的指令最前面加上 <code>sudo</code> 再執行就好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ls Color on Mac]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/29/ls-color-on-mac/"/>
    <updated>2012-03-29T01:44:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/29/ls-color-on-mac</id>
    <content type="html"><![CDATA[<p><img src="http://tzengyuxio.me/images/2012/2012-03-29-ls-color.png" alt="ls color" /></p>

<p>昨天突然心血來潮想到來替 ls 上個顏色。以前用 Linux 時都有很漂亮的 ls 輸出，除此之外也會認真打造個人的 shell 環境。怎知開始用 Mac 兩年多來，都忘記來把 shell 好好調教一番，幾乎一直維持著原汁原味。</p>

<p>是說原本預設的也夠我用了就是，不過有個多采多姿的 ls 輸出不僅能提昇工作效率，光看著心情也會好起來。</p>

<h2>開啟顏色輸出</h2>

<p>在 Linux 要開啟顏色輸出是透過 <code>ls --color</code> 指令。而在 Mac 或 BSD 上則是使用 <code>ls -G</code>。</p>

<p>當然，每次都加這參數也是麻煩。寫程式的都是懶人，所以我在 <code>~/.bashrc</code> 檔案中加入下面這行設定：</p>

<pre><code>alias ls='ls -GF'
</code></pre>

<p>要說明一下的是，上面的設定除了開啟顏色輸出外，還加了 <code>-F</code> 這個能夠在 ls 輸出中加入識別符號的參數。像是目錄的名字後面會加上 &#8216;/&#8217;, 可執行檔會加上 &#8216;*&#8217;,  符號連結 (symbolic link) 會加上 &#8216;@&#8217; 等等。</p>

<h2>顏色的指定</h2>

<p>關於顏色的指定，Linux 使用 <code>LS_COLORS</code> 環境變數，BSD 則是使用 <code>LSCOLORS</code>。兩者的設定方式也不同，這部份網路上資料很好找，就不贅述。</p>

<p>直接說結果，我所使用的顏色組合如下：</p>

<pre><code>export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD
</code></pre>

<p>將這行加入 <code>~/.bash_profile</code> 就可以享受美美的 ls 了。這個配色設定是從 <a href="https://github.com/seebi/dircolors-solarized/issues/10">LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD</a> 這網頁參考來的。</p>

<p>附帶一提，Mac 或 BSD 的 <code>LSCOLORS</code> 參數只能指定預設檔案類型的顏色，比較常見的類型只有檔案、可執行檔、符號連結三種。Linux 的 <code>LS_COLORS</code> 除了上述這些之外，還可以針對附檔名作指定，像是把 .zip .rar .tgz 等壓縮檔設成黃色；然後 .avi .m4v .mov 等影片檔設成洋紅色之類的。</p>

<h2>補充資訊</h2>

<ol>
<li>BSD 下還有一個環境變數 <code>CLICOLOR</code>, 在 <code>~/.bash_profile</code> 中加入 <code>export CLICOLOR=1</code> 可以得到跟 <code>ls -G</code> 一樣的效果。</li>
<li>如果想要自己配色的，<a href="http://geoff.greer.fm/lscolors/">LSCOLORS Generator</a> 這個網頁提供了一個方便的配色小工具。</li>
<li>喜歡 Solarized 的話，<a href="https://github.com/seebi/dircolors-solarized">seebi/dircolors-solarized</a> 是一個將 Solarized 延伸到 ls color 的專案。可惜只適用在 <strong>GNU ls</strong>, 也就是 Linux 系統上的 ls。</li>
<li>如果你無論如何也想在 Mac 上看到壓縮檔、影片檔、音樂檔等不同類型檔案也有不同顏色，或是想要使用上面提到的 Solarized ls 配色，那麼可以考慮安裝 <a href="http://www.gnu.org/software/coreutils/">Coreutils - GNU core utilities</a> 這套件。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON for Vim]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/26/json-for-vim/"/>
    <updated>2012-03-26T10:42:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/26/json-for-vim</id>
    <content type="html"><![CDATA[<p>剛剛在 Terminal 下開了個新檔要來寫 JSON, 發現 Vim 竟然沒有支援 JSON 的 FileType 與 syntax highlight。想說這問題應該很多人遇過，因此上網找了一下，找到這個 script: <a href="http://www.vim.org/scripts/script.php?script_id=1945">JSON.vim</a>。</p>

<p>不過看了下安裝說明，感覺麻煩了點。於是又找到了<a href="http://www.codeography.com/2010/07/13/json-syntax-highlighting-in-vim.html">這篇文章</a>，只要到 <code>~/.vimrc</code> 加入下面這行，就可以讓 JSON 檔案套用 JavaScript 的 syntax highlight, 簡單明瞭。</p>

<pre class="prettyprint"><code>autocmd BufNewFile,BufRead *.json set ft=javascript</code></pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[關於 Mac 快速檢視 (Quick Look) 的幾個小秘訣]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/11/tips-for-mac-os-x-quick-look/"/>
    <updated>2012-03-11T18:17:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/11/tips-for-mac-os-x-quick-look</id>
    <content type="html"><![CDATA[<p>我用了 Mac 好一段時間了才知道，原來對檔案直接按空白鍵可以開啟快速檢視 (Quick Look)；又隔了好一段時間，才又知道原來快速檢視除了內建的之外，還可以加上些外掛以增加支援檔案類型。下面是一些我所用到的 QuickLook 相關技巧整理。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-03-11-quicklook-of-zip.png" alt="BetterZip Plugin" /></p>

<h2>在 Terminal 下開啟快速檢視</h2>

<p>除了在 Finder 中按空白鍵外，有時候在 Terminal 底下工作時，也可以利用指令來開啟快速檢視，這樣可以減少鍵盤滑鼠的切換以提升效率。開啟的指令如下：</p>

<pre><code>$ qlmanage -p [FILE]
</code></pre>

<p>把 [FILE] 替換成要開啟的檔名即可。不過這指令也不算短，要更方便的話，可以在 <code>~/.bashrc</code> 中加入以下指令別名 (alias)，這樣只要輸入 <code>ql [FILE]</code> 就可以立刻檢視了：</p>

<pre><code>alias ql='qlmanage -p'
</code></pre>

<p>對了，設定檔 .bashrc 預設在 Mac OS X 中是不起作用的，可以參考<a href="http://coder.aqualuna.me/2012/03/bashrc-in-mac-terminal-os-x-lion.html">這篇文章</a>來讓 .bashrc work。</p>

<h2>增加支援檔案類型的 Plugin</h2>

<p>快速檢視本身支援文字、圖片、音樂、影片等基本檔案格式，至於其他不支援的格式則只會顯示一個大大的檔案 icon。透過以下 Plugin 可以增加快速檢視支援的檔案格式，安裝很簡單，只要將下載下來的 <code>*.qlgenerator</code> 檔案放到下面路徑之一：</p>

<ul>
<li><code>(Macintosh HD)/Library/QuickLook/</code> 安裝給本機的所有使用者</li>
<li><code>~/Library/QuickLook/</code> 只安裝給自己使用</li>
</ul>


<h3>壓縮檔 (Archives)</h3>

<p><a href="http://macitbetter.com/BetterZip-Quick-Look-Generator/">BetterZip 2 - The Next Generation of Archiving</a></p>

<p>上面這個外掛預設是暗色背景的，如果喜歡白色背景的（如同文章開頭那張圖），可以考慮下面這個修改版本：</p>

<p><a href="https://github.com/farfanoide/BetterZ-QuickLook-plugin-theme-for-Lion">farfanoide/BetterZ-QuickLook-plugin-theme-for-Lion</a></p>

<h3>程式碼 (Code)</h3>

<p><a href="http://code.google.com/p/qlcolorcode/">qlcolorcode - A Quick Look plugin for source code with syntax highlighting - Google Project Hosting</a></p>

<h3>CSV 檔案</h3>

<p><a href="http://code.google.com/p/quicklook-csv/">quicklook-csv - A QuickLook plugin to quick look CSV files for Mac OS X 10.5+ - Google Project Hosting</a></p>

<h2>快速檢視文字檔案時，可以複製文字</h2>

<p>按空白鍵檢視文字檔案內容很方便，可是有時候如果想要複製文字，就得另外再開啟文字編輯，相當麻煩。在 Terminal 下輸入以下指令，可以讓你在快速檢視文字檔時，也能選取想要的片段，然後按 Cmd+C 複製出來。</p>

<pre><code>$ defaults write com.apple.finder QLEnableTextSelection -bool TRUE; killall Finder
</code></pre>

<h2>用不同的應用程式開啟</h2>

<p>在快速檢視時，右上方會有個按鈕讓你以預設關連的應用程式開啟。如果你想要用其他的應用程式開啟，例如用 Photoshop 開啟圖檔，那麼只要按著右上方按鈕不放，就會出現選單供你選擇想要開啟的應用程式。</p>

<h2>以全螢幕開啟快速檢視</h2>

<p>選取檔案，然後按下 <code>Cmd+Opt+Y</code>，就可以直接以全螢幕方式進入快速檢視，這對影像或是影片格式相當有用。</p>

<p>其實也可以在按著 Opt 的狀態下按空白鍵進入全螢幕的快速檢視，不過像我有安裝 Alfred, <code>Opt+空白鍵</code> 預設會啟動 Alfred 的輸入視窗，因此就沒辦法用來開啟快速檢視了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[設定 Mac Terminal 下的 .bashrc]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/11/dot-bashrc-in-mac-terminal/"/>
    <updated>2012-03-11T09:33:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/11/dot-bashrc-in-mac-terminal</id>
    <content type="html"><![CDATA[<p>今天想要替 Terminal 下一些常用的指令建立 alias, 我按照以前在 FreeBSD/Linux 的習慣，直接進 Terminal，在家目錄 (<code>~/</code>) 下寫了個 <code>.bashrc</code>, 重開 Terminal, 剛剛寫的 alias 卻沒有任何反應。</p>

<p>後來在家目錄下先建了個檔案 <code>.bash_profile</code>, 檔案內容如下：</p>

<pre class="prettyprint"><code>if [ -f ~/.bashrc ]; then
    source ~/.bashrc
fi
</code></pre>


<p>這樣原本寫在 <code>.bashrc</code> 裡的指令稿就會被讀取並且發揮作用了。補充說明，我的作業系統版本為 <strong>Mac OS X Lion (10.7)</strong>。</p>

<p>關於 <code>.bash_profile</code> 與 <code>.bashrc</code> 的差別，簡述如下：</p>

<h3>.bash_profile</h3>

<p>輸入帳號密碼登入時，不論遠端或本地，都會執行此設定檔。</p>

<h3>.bashrc</h3>

<p>在已經登入的情況下，開啟終端機視窗（如 Gnome 的 xterm），在命令提示符號出現前，就會先執行 .bashrc 內的指令。</p>

<p>不過 Mac OS X 的行為是上述流程的例外，詳細可參考本文最後面的連結。</p>

<hr />

<p>參考資訊：</p>

<p><a href="http://macfidelity.de/2008/07/02/mac-customizing-terminal-in-mac-os-x-105/">Customizing Terminal in Mac OS X 10.5 | macfidelity</a></p>

<p>上面這篇文章中的步驟比較多，甚至還要進 Terminal 的「偏好設定」畫面去修改打開 Shell 的指令。不過我自己的操作結果是就算沒有設定那些指令也沒關係，只要有包含文章中那段代碼的 <code>.bash_profile</code>, 就可以讀取 <code>.bashrc</code> 了。</p>

<p>關於 <code>.bash_profile</code> 與 <code>.bashrc</code> 的差別，請見下面這篇文章。</p>

<p><a href="http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html">.bash_profile vs .bashrc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solarized for google-code-prettify]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/11/solarized-for-google-code-prettify/"/>
    <updated>2012-03-11T07:20:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/11/solarized-for-google-code-prettify</id>
    <content type="html"><![CDATA[<p><a href="http://tzengyuxio.me/blog/2011/08/07/embeded-code-with-google-code-prettify/">我用 google-code-prettify 來做 blog 文章中的代碼上色</a>，google-code-prettify 本身有<a href="http://google-code-prettify.googlecode.com/svn/trunk/styles/index.html">附上幾個 Color Scheme</a>, 然而除了預設的之外，都是以暗色背景為主。</p>

<p>昨天心血來潮將 <a href="http://ethanschoonover.com/solarized">Solarized</a> 這個 Color Scheme 移植到 google-code-prettify 下，同樣也是 dark/light 雙版本。關於 Solarized 的介紹可以參考<a href="http://coder.aqualuna.me/2012/02/zenburn-solarized.html">這篇文章</a>。</p>

<h2>下載 / Download</h2>

<ul>
<li>Solarized Light

<ul>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.css">Normal version</a></li>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.min.css">Minified version</a></li>
</ul>
</li>
<li>Solarized Dark

<ul>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.css">Normal version</a></li>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.min.css">Minified version</a></li>
</ul>
</li>
</ul>


<h2>代碼 / Code</h2>

<h3>Solarized Light</h3>

<p>正常排版版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#657b83}
@media screen{
    .str{color:#2aa198}
    .kwd{color:#859900}
    .com{color:#93a1a1}
    .typ{color:#b58900}
    .lit{color:#2aa198}
    .pun,.opn,.clo{color:#657b83}
    .tag{color:#268bd2}
    .atn{color:#93a1a1}
    .atv{color:#2aa198}
    .dec,.var{color:#268bd2}
    .fun{color:red}
}
@media print,projection{
    .str{color:#060}
    .kwd{color:#006;font-weight:bold}
    .com{color:#600;font-style:italic}
    .typ{color:#404;font-weight:bold}
    .lit{color:#044}
    .pun{color:#440}
    .tag{color:#006;font-weight:bold}
    .atn{color:#404}
    .atv{color:#060}
}
pre.prettyprint{padding:5px;border:1px solid #888;background:#fdf6e3}
ol.linenums{margin-top:0;margin-bottom:0}
li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}
li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}
</code></pre>


<p>最小化版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.min.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#657b83}@media screen{.str{color:#2aa198}.kwd{color:#859900}.com{color:#93a1a1}.typ{color:#b58900}.lit{color:#2aa198}.pun,.opn,.clo{color:#657b83}.tag{color:#268bd2}.atn{color:#93a1a1}.atv{color:#2aa198}.dec,.var{color:#268bd2}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:5px;border:1px solid #888;background:#fdf6e3}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}
</code></pre>


<h3>Solarized Dark</h3>

<p>正常排版版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#839496}
@media screen{
    .str{color:#2aa198}
    .kwd{color:#859900}
    .com{color:#586175}
    .typ{color:#b58900}
    .lit{color:#2aa198}
    .pun,.opn,.clo{color:#839496}
    .tag{color:#268bd2}
    .atn{color:#586175}
    .atv{color:#2aa198}
    .dec,.var{color:#268bd2}
    .fun{color:red}
}
@media print,projection{
    .str{color:#060}
    .kwd{color:#006;font-weight:bold}
    .com{color:#600;font-style:italic}
    .typ{color:#404;font-weight:bold}
    .lit{color:#044}
    .pun{color:#440}
    .tag{color:#006;font-weight:bold}
    .atn{color:#404}
    .atv{color:#060}
}
pre.prettyprint{padding:5px;border:1px solid #888;background:#002b36}
ol.linenums{margin-top:0;margin-bottom:0}
li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}
li.L1,li.L3,li.L5,li.L7,li.L9{background:#111}
</code></pre>


<p>最小化版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.min.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#839496}@media screen{.str{color:#2aa198}.kwd{color:#859900}.com{color:#586175}.typ{color:#b58900}.lit{color:#2aa198}.pun,.opn,.clo{color:#839496}.tag{color:#268bd2}.atn{color:#586175}.atv{color:#2aa198}.dec,.var{color:#268bd2}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:5px;border:1px solid #888;background:#002b36}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#111}
</code></pre>


<h2>範例 / Example (in dark version)</h2>

<pre class="prettyprint lang-java"><code>import java.util.Map;
import java.util.TreeSet;

public class GetEnv {
  /**
   * let's test generics
   * @param args the command line arguments
   */
  public static void main(String[] args) {
    // get a map of environment variables
    Map&lt;String, String&gt; env = System.getenv();
    // build a sorted set out of the keys and iterate
    for(String k: new TreeSet&lt;String&gt;(env.keySet())) {
      System.out.printf("%s = %s\n", k, env.get(k));
    }
  }    
}
</code></pre>


<hr />

<p>網路上有找到<a href="http://subtech.g.hatena.ne.jp/h2u/20110408/1302198319">這篇也有 solarized color for google-pretty-code</a>, 不過只有暗色背景的版本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BOM (Byte Order Mark) 與 UTF-8]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/09/bom-byte-order-mark-and-utf-8/"/>
    <updated>2012-03-09T20:28:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/09/bom-byte-order-mark-and-utf-8</id>
    <content type="html"><![CDATA[<p>一些個人筆記，省得以後每次遇到還得重新上網搜尋做功課。</p>

<hr />

<p>Byte Order Mark 在 UTF-16 Big Endian 是 &#8220;FE FF&#8221;，Little Endian 是 &#8220;FF FE&#8221;。其中 Mac 系統主要是 Big Endian, PC 系統則是使用 Little Endian。</p>

<p>UTF-8 由於本身特性，不管 Big Endian 或 Little Endian，其 BOM 一律為 &#8220;EF BB BF&#8221;。</p>

<p>不過個人建議，文字文件要儲存的話，<strong>盡量以 UTF-8 格式存</strong>。而以 UTF-8 儲存的文件，<strong>盡量不要放 BOM 進去</strong>。為什麼呢？因為 UTF-8 的一個特色就是能與 ASCII 系統相容，如果文件中沒有包含非拉丁字元的話；要是放了 BOM 進去，就破壞了這相容性。</p>

<h2>在 VIM 中的 BOM 相關操作</h2>

<h3>加入 BOM</h3>

<pre><code>:set bomb
</code></pre>

<h3>移除 BOM</h3>

<pre><code>:set nobomb
</code></pre>

<h3>查詢 BOM 狀態</h3>

<pre><code>:set bomb?
</code></pre>

<h2>在 Terminal / Console 下的 BOM 相關操作</h2>

<h3>查詢包含 UTF-8 BOM 的檔案</h3>

<pre><code>$ grep -rIl $'^\xEF\xBB\xBF' [FILE]
</code></pre>

<h3>找出並移除 UTF-8 的 BOM</h3>

<pre><code>$ grep -rIl $'^\xEF\xBB\xBF' [FILE] | xargs sed -i 's/^\xEF\xBB\xBF//;g'
</code></pre>

<h3>編碼的轉換</h3>

<pre><code>$ iconv -f [FROM_ENCODING] -t [TO_ENCODING] [FILE]
</code></pre>

<p>其中 ENCODING 的部份可以是以下數值：</p>

<ul>
<li>UTF-8 UTF8</li>
<li>UTF-16BE</li>
<li>UTF-16LE</li>
<li>UCS-2BE UNICODEBIG</li>
<li>UCS-2LE UNICODELITTLE</li>
</ul>


<p>更多 ENCODING 代碼可以透過 <code>iconv --list</code> 查詢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[幾個我常用的 Alfred 自定搜尋]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/19/alfred-search/"/>
    <updated>2012-02-19T23:45:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/19/alfred-search</id>
    <content type="html"><![CDATA[<p>雖然用了 <a href="http://tzengyuxio.me/search/label/Alfred">Alfred</a> 一段時間，但是直到最近才開始認真挖掘裡面的設定。其實 Alfred 安裝好不用特別設定，就已經很好用了，像是程式本身預設許多網頁搜尋，從常見的 Google、Yahoo!、Amazon 與維基百科，到比較少人知道但很好用的 <a href="http://www.wolframalpha.com/">wolfram</a> 等，都是現成裝好就可以用的。</p>


<p><img src="https://lh6.googleusercontent.com/-6Z65mn0aLAo/T0EV13h5vFI/AAAAAAAAJdU/ijKmwmls5p8/s800/alfred_custom_search.png" alt="Alfred Custom Search" /></p>


<p>不過每個人常用網站不同，在軟體的預設網站之外一定有遺珠之憾。好在 Alfred 也有提供自定搜尋選項的功能，以下就來分享我自己設定的 Alfred Custom Search。</p>


<p>這些 Custom Search 的安裝方式很簡單，只要將底下以 alfredapp 開頭的一串文字複製起來，叫出 Alfred 的指令視窗（預設是使用 ⌥Space），貼上剛才複製的文字，按下 Enter 就好了。</p>


<h2>奇摩字典搜尋</h2>


<ul><li>Keyword: dict</li><li><p>說明：就是查字典。dict 後面可以接中文詞或是英文單字。</p><p>alfredapp://customsearch/Yahoo%21%E5%A5%87%E6%91%A9%E5%AD%97%E5%85%B8%E6%9F%A5%E8%A9%A2/dict/utf8/url=http://tw.dictionary.yahoo.com/dictionary?p={query}</p></li></ul>


<h2>flickr Creative Common 搜尋</h2>


<ul><li>Keyword: fcc</li><li><p>說明：Alfred 已經有內建 flickr 搜尋了，不過並不是任何找到的圖片都可以隨意使用。如果你有在寫 blog 並且會上 flickr 找圖片來點綴文章的話，這個搜尋可以幫助你找到合適的圖片。</p><p>alfredapp://customsearch/Search%20Flickr%20CC%20for/fcc/ascii/url=http://www.flickr.com/search/?q={query}&amp;l=commderiv&amp;ss=0&amp;ct=0&amp;mt=all&amp;w=all&amp;adv=1</p></li></ul>


<h2>世界時間查詢</h2>


<ul><li>Keyword: time</li><li><p>說明：Time.is 是個簡單但方便的網站，可以以城市名稱查詢該地目前時間。安裝好此 Custom Search 後，就能用 &#8221;<code>time tokyo</code>&#8221; 或 &#8221;<code>time 東京</code>&#8221; 的語法來查詢當地時間。</p><p>alfredapp://customsearch/%E7%9B%AE%E5%89%8D%E7%9A%84%E6%99%82%E9%96%93%EF%BC%8C%E5%9C%A8/time/ascii/url=http://time.is/{query}</p></li></ul>


<h2>線上音樂搜尋</h2>


<ul><li>Keyword: gs</li><li><p>說明：Grooveshark 是很大的線上音樂網站，找到就可以直接串流播放了，中英文搜尋都 OK。</p><p>alfredapp://customsearch/Search%20Grooveshark%20for/gs/ascii/url=http://grooveshark.com/#/search?q={query}</p></li></ul>


<h2>Stack Overflow 搜尋</h2>


<ul><li>Keyword: so</li><li><p>說明：寫程式的人幾乎都得拜訪的聖地。google 程式問題時幾乎都會找到這邊來，乾脆就直接在 Stack Overflow 上搜尋吧。</p><p>alfredapp://customsearch/Search%20Stack%20Overflow%20for/so/ascii/url=http://stackoverflow.com/search?q={query}</p></li></ul>


<h2>Apple Developer Connection 搜尋</h2>


<ul><li>Keyword: adc</li><li><p>說明：對 Apple 開發者很方便的搜尋。</p><p>alfredapp://customsearch/Search%20ADC%20for/adc/ascii/url=http://developer.apple.com/library/mac/search/?q={query}</p></li></ul>


<h2>PChome 線上購物 搜尋</h2>


<ul><li>Keyword: pchome</li><li><p>說明：台灣最大的購物網站&#8230;&#8230;吧？我沒有數據，單純只是自己蠻常用的。</p><p>alfredapp://customsearch/Search%20PChome%20for/pchome/ascii/url=http://ecshweb.pchome.com.tw/search/v1/{query}</p></li></ul>


<h2>Mac App Store 搜尋</h2>


<ul><li>Keyword: mas</li><li><p>說明：尋找 Mac App Store 裡面的應用程式，也是我相當常用到的功能。</p><p>alfredapp://customsearch/%10Search%20Mac%20App%20Store%20for/mas/ascii/url=macappstore://ax.search.itunes.apple.com/WebObjects/MZSearch.woa/wa/search?q={query}</p></li></ul>


<h2>博客來搜尋（僅書籍）</h2>


<ul><li>Keyword: books</li><li><p>說明：博客來相信我就不用介紹了吧。以下的語法專門用來查詢書籍，如果要查包含書籍以外的物品，可以用下面的語法來查詢。</p><p>alfredapp://customsearch/Search%20%E5%8D%9A%E5%AE%A2%E4%BE%86%E6%9B%B8%E7%B1%8D%20for/books/ascii/url=http://search.books.com.tw/exep/prod<em>search.php?cat=BKA&amp;key={query}&amp;apid=books&amp;areaid=head</em>wel_search</p></li></ul>


<h2>博客來搜尋（全站）</h2>


<ul><li>Keyword: bkl</li><li><p>說明：同上，就不另外說明了。</p><p>alfredapp://customsearch/Search%20%E5%8D%9A%E5%AE%A2%E4%BE%86%20for/bkl/ascii/url=http://search.books.com.tw/exep/prod<em>search.php?cat=all&amp;key={query}&amp;apid=books&amp;areaid=head</em>wel_search</p></li></ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Growl 與 Notification Center 隨便聊]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/17/growl-and-notification-center/"/>
    <updated>2012-02-17T17:39:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/17/growl-and-notification-center</id>
    <content type="html"><![CDATA[<p>今天聽到 OSX 下一版本 Mountain Lion 的消息，大更新不多，主要都是將 iOS 上的一些應用搬到 Mac 上來，而其中最吸引我注意的大概就是通知中心（Notification Center）了。</p>


<p>繼續聊下去前，先聊聊我理想中的電腦工作環境，要能提供兩個基本功能：</p>


<ol><li>單一而簡潔的指令輸入，可以快速鍵入指令進行工作；</li><li>單一而簡潔的訊息輸出，將執行結果與事件統一一處發送通知。</li></ol>


<p>說起來很簡單，說穿了也不過就是文字列模式下的延伸概念。關於第一點，現在已經有許多應用程式可以做到了，例如在 Windows 有 <a href="http://blog.aqualuna.me/search/label/Launchy">Launchy</a>, Mac 則有 <a href="http://blog.aqualuna.me/search/label/Alfred">Alfred</a>, 都是很棒的應用，直接熱鍵啟動執行指令，就可以開始進行工作，能有效節省時間。</p>


<p>然而由於圖形作業系統多個視窗各自為政的關係，要建構第二點的環境其實有些困難。在 Windows，當電腦連上外接設備，或是硬碟空間時，會有小小黃色的 Tooltip 通知視窗；當 MSN 有人傳訊息來時，有 MSN 的通知泡泡；防毒軟體的病毒更新碼有段時間沒更新時，會有防毒軟體的提醒對話泡泡。每個軟體都有每個軟體自己的通知與設定，顯示停留的時間與樣式也都個不相同。假設今天如果我要進入專注模式，想要暫時關掉所有外來的通知時，我得一個一個自己去設定，然後要放鬆時還得一個一個去打開，這會是多惱人的一件事情？</p>


<p>好在 Mac 上有 Growl, 一個第三方廠商所寫的訊息通知中心軟體。Growl 提供了公開 API, 讓軟體開發商可以支援將訊息發送到 Growl 作顯示。以我目前的電腦來看，就包含了以下程式的訊息通知：</p>


<ul><li>1Password</li><li>Adium</li><li>Alfred</li><li>Cappuccino</li><li>Dropbox</li><li>GrowlTunes</li><li>HardwareGrowler</li><li>Insync</li><li>Pomodoro</li></ul>


<p>這些不同的程式都可以透過相同的窗口向我報告，當我不想要干擾時，也可以很輕鬆的全部關掉。也正因為有如此多的軟體支援 Growl, 所以就算我不喜歡 Growl 他那爪子般的 icon, 不喜歡他把 GrowlTunes 與 HardwareGrowler 在 App Store 裡另外拆開來賣，但我還是購買並安裝了這套軟體。</p>


<p>回到最初所提的，下一版的 OSX 將會把 iOS 上的訊息中心給整合進來，我想最為首當其衝的就是 Growl 了。前面所提到的「單一簡潔的輸入」與「單一簡潔的輸出」，這工作由作業系統來做自然是再合適也不過了。因此不難想像，隨著應用程式逐漸支援新的訊息中心，Growl 將逐漸失去其既有的優勢。</p>


<p>只是就目前看來，Mountain Lion 的更新項目實在不多，如果到時候不是免費升級，而且賣得還跟 Lion 一樣貴的話，我實在很難下得了手花錢進行升級……</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 更換資料夾圖示的方法]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/13/change-folder-icon-in-mac/"/>
    <updated>2012-02-13T13:19:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/13/change-folder-icon-in-mac</id>
    <content type="html"><![CDATA[<p>最近想把 Mac 裡一些常用的資料夾換個圖示，找到的步驟如下：</p>

<ol>
<li>選取資料夾，開啟該資料夾的「簡介」視窗。</li>
<li>將下載好的 .icns 圖示檔拉到「簡介」視窗最上方的小圖示上，就可以換掉原有圖示了。</li>
</ol>


<p>我照了這個方法作，不過從網路上下載的 .icns 圖示檔，有些拉上去後可以成功更換資料夾圖示，有些卻不行。研究了半天也搞不清楚為什麼有些成功有些不行。後來找到了另外一個換圖示的方法，不僅更簡單，而且除了 .icns 檔案外，也適用於任何圖檔。方法如下：</p>

<ol>
<li>用「預覽程式」開啟你要用來當資料夾圖示的 .icns 檔，或其他圖檔。當然，尺寸最好是 512x512。</li>
<li>開啟後，依序按下⌘A（全選），⌘C（複製）。</li>
<li>然後選取想要更換圖示的資料夾，開啟該資料夾的「簡介」視窗。</li>
<li>點選「簡介」視窗最上方的小圖示，按下⌘V（貼上），大功告成！</li>
</ol>


<p>這個方法除了資料夾外，也可以用來更改磁碟映像檔的圖示。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging with Markdown]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/10/blogging-with-markdown/"/>
    <updated>2012-02-10T13:24:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/10/blogging-with-markdown</id>
    <content type="html"><![CDATA[<h1>用 Markdown 寫部落格</h1>


<p>前陣子<a href="http://coder.aqualuna.me/2011/10/asciidoc-markdown-restructuredtext.html">比較了一些輕量級標記語言</a>，想作為之後自己撰寫文件的格式依據。其中 reStructuredText 太過複雜，就不考慮了；剩下的 AsciiDoc 與 Markdown 兩者中，剛開始我比較喜歡 AsciiDoc 多一些。因為 AsciiDoc 有支援表格的語法，而 Markdown 則必須透過 Inline HTML 的方式，這麼一來如果文章中想包含表格，免不了還是得塞入一堆礙眼的 HTML 語法。</p>


<p>不過比起 AsciiDoc, Markdown 的應用支援顯然要來得廣泛得多，除了 GitHub 與 BitBucket 等網站外，有相當多的工具或編輯器支援 Markdown 語法，例如 Day One, iA Writer 或是 Byword，這方面壓倒性勝過 AsciiDoc。於是乎 Markdown 便逐漸成為我的首選，至於不能製作表格的問題嘛，反正作表格的機會也不是那麼多，大部分時候也可以用清單方式來呈現資料，所以倒不是太大問題。</p>


<p>決定用 Markdown 作為主要規範後，第一個想到的就是用 Markdown 來寫 blog。不過 blogger 本身沒有支援 Markdown 語法，也沒有外掛或工具支援直接將 Markdown 寫好的文章發佈。大部分用 Markdown 在 blogger 寫文章的方式，都與 <a href="http://notely.blogspot.com/2011/08/how-to-use-markdown-in-blogspot-posts.html">Notely: How to use Markdown in Blogspot posts</a> 這篇文章的作業流程大同小異：</p>


<ol><li>在你的電腦中用文字編輯器撰寫文章並儲存成檔案（原作者 Joel 使用 yyyy-mm-dd post title.txt 的檔案命名方式）</li><li>開啟 <a href="http://daringfireball.net/projects/markdown/dingus">Daring Fireball: Markdown Web Dingus</a> 網站，複製貼上文章內容，進行轉換。</li><li>最後，將轉換完成的 HTML 碼貼到 blogspot 的新文章中。</li></ol>


<p>另外，貼上時要注意以下兩點：</p>


<ol><li>在貼上新文章時，確定文字輸入區上方的模式是在「HTML」下而非「撰寫」。</li><li>開啟右側「文章設定」最下方的選項，<ol><li>「撰寫模式」勾選<strong>解譯輸入的 HTML</strong>。</li><li>「換行符號」勾選<strong>使用 &lt;br&gt; 標記</strong>。</li></ol></li></ol>


<p>我目前也是採用類似的流程。比較特別要提的有以下幾點：</p>


<ol><li>標題除了作為檔名外，檔案內的第一行也會放上一級標題；最後一行則是列出這篇文章的標籤。所以在轉換為 HTML 時，要去首尾行。</li><li>檔案存放在 dropbox 空間中。這樣可以確保文章有多份備份。</li><li>文章是<a href="http://blog.aqualuna.me/2012/02/byword-ia-writer.html">用 iA Writer 寫</a>的。寫完之後用<a href="http://coder.aqualuna.me/2012/02/os-x-markdown-html.html">〈在 OS X 中隨時隨地將 Markdown 轉為 HTML〉</a>這一篇提到的方法轉換為 HTML 碼，這樣就不用再開啟線上轉換的網頁了。</li></ol>


<hr /><p>這篇文章就是用上述流程所寫的，你可以<a href="http://dl.dropbox.com/u/1324456/2012-02-10%20Blogging%20with%20Markdown.md">到這邊看看原始模樣</a>。</p>

]]></content>
  </entry>
  
</feed>
