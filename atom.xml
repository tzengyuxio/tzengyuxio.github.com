<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tzeng Yuxio]]></title>
  <link href="http://tzengyuxio.github.com/atom.xml" rel="self"/>
  <link href="http://tzengyuxio.github.com/"/>
  <updated>2012-03-31T01:35:28+08:00</updated>
  <id>http://tzengyuxio.github.com/</id>
  <author>
    <name><![CDATA[Tzeng Yuxio]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Octopress 的開箱文系列]]></title>
    <link href="http://tzengyuxio.github.com/blog/2012/03/30/octopress-unboxing-collections/"/>
    <updated>2012-03-30T08:44:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2012/03/30/octopress-unboxing-collections</id>
    <content type="html"><![CDATA[<p>在安裝 Octopress 的時候，上網找了許多資料，也發現一個有趣的現象，就是大家的第一篇文章幾乎都是要對 Octopress 說幾句話。所以乾脆就來收集一下，看看大家的第一篇都寫些什麼？</p>

<p>以下按照時間順序排列：</p>

<hr />

<h4><a href="http://blog.xdite.net/posts/2011/10/07/migrate-to-octopress/">Migrate to Octopress - Blog.XDite.net</a></h4>

<ul>
<li>Oct 7, 2011 by <strong>XDite</strong></li>
<li>title: <code>migrate-to-octopress</code></li>
<li>這是我所能找到的最早的一篇。相信國內很多用 Octopress 架站的也或多或少受了這篇與 XDite 的影響。</li>
</ul>


<h4><a href="http://tzangms.com/2011/10/09/from-blogofile-to-octopress/">From blogofile to octopress - Oceanic / 人生海海</a></h4>

<ul>
<li>Oct 9, 2011 by <strong>tzangms</strong></li>
<li>title: <code>from-blogofile-to-octopress</code></li>
<li>tzangms 在這篇最後寫道：「不過, 我覺得一定有一些人一定換了這類的 blog 系統之後, 就減少了發文的動力, 像我就是 XD」hmm…我完全可以理解這種「為了想跑步而買新球鞋，買了之後反而減少了跑步動力」的心情 XD</li>
</ul>


<h4><a href="http://hack.sslab.co/blog/2011/10/14/hello/">Hello, Octopress - Hack × StrongSoft</a></h4>

<ul>
<li>Oct 14, 2011 by <strong>StrongSoft</strong></li>
<li>title: <code>hello</code></li>
<li>小小吐槽一下，雖然文中作者有說用了 Octopress 之後，就發現自己「回不去了」－－可是我看你後來還是<em>回去</em>用 blogger 繼續寫文章啊 XD</li>
</ul>


<h4><a href="http://swind.github.com/blog/2011/10/19/ban-jia-hou-di-1pian/">搬家後的第一篇文章-Octopress安裝筆記 - Corleonis</a></h4>

<ul>
<li>Oct 19, 2011 by <strong>swind</strong></li>
<li>title: <code>ban-jia-hou-di-1pian</code></li>
<li>這篇有許多在 Windows 上安裝的心得，有興趣的可以參考看看。</li>
</ul>


<h4><a href="http://blog.eddie.com.tw/2011/10/27/move-to-octopress/">搬到Octopress了 - 高見龍</a></h4>

<ul>
<li>Oct 27, 2011 by <strong>高見龍</strong></li>
<li>title: <code>move-to-octopress</code></li>
<li>我在安裝 Octopress 時有向作者請教過些問題，感謝他的熱心回應。</li>
</ul>


<h4><a href="http://hychen.wuweig.org/blog/2011/11/13/huan-dao-octopress/">換到octopress - 無為閣</a></h4>

<ul>
<li>Nov 13, 2011 by <strong>hychen</strong></li>
<li>title: <code>huan-dao-octopress</code></li>
<li>這篇文章中有一段 Script, 可以幫助作者減輕 Octopress 有一堆指令得記的壓力。</li>
</ul>


<h4><a href="http://blog.yorkxin.org/2011/11/20/hello-octology/">Hello! Octology - YORKXIN×YORKXIN</a></h4>

<ul>
<li>Nov 20, 2011, by <strong>Yu-Cheng Chuang (chitsaou)</strong></li>
<li>title: <code>hello-octology</code></li>
<li>從 WordPress 搬家過來的。這個網站還有許多篇與 Octopress 相關的文章（〈Octopress 搬家記〉系列），很值得參考。</li>
</ul>


<h4><a href="http://blog.hinablue.me/entry/move-to-octopress/">搬家到 Octopress - HINA::工程幼稚園</a></h4>

<ul>
<li>Nov 29, 2011, by <strong>hinablue</strong></li>
<li>title: <code>move-to-octopress</code></li>
<li>從 TextCube 搬家過來的，其實在這之前我沒聽過 TextCube (太孤陋寡聞了我)。</li>
</ul>


<h4><a href="http://whiteball.tw/blog/hello-world/">Hello world! - Whiteball</a></h4>

<ul>
<li>Dec 30, 2011, by <strong>Ching-Han Ho</strong></li>
<li>title: <code>hello-world</code></li>
<li>剛架好 Octopress 的朋友，在迫不及待準備要寫點東西發佈之前可以先看看這篇文章：〈<a href="http://whiteball.tw/blog/before-you-deploy-octopress/">在 Octopress 佈署出去前要注意的小地方</a>〉</li>
</ul>


<h4><a href="http://zespia.tw/blog/2012/01/14/hello-octopress/">Hello Octopress! - Zespia</a></h4>

<ul>
<li>Jan 14, 2012, by <strong>SkyArrow</strong></li>
<li>title: <code>hello-octopress</code></li>
<li>是 Octopress 主題 <a href="http://zespia.tw/Octopress-Theme-Slash/index_tw.html">Slash</a> 的作者。Slash 看上去簡約優雅，有許多人使用。更令人佩服的是，作者目前還只是個高中生！</li>
</ul>


<h4><a href="http://xoyo.name/2012/02/migrate-to-octopress/">博客跟风改用octopress - Mr Sunshine</a></h4>

<ul>
<li>Feb 7, 2012, by <strong>Zhiwei Xiao</strong></li>
<li>title: <code>migrate-to-octopress</code></li>
<li>也是從 WordPress 搬來的，文章中有提供一個將 Octopress 指令整合進 Emacs 的擴展。</li>
</ul>


<h4><a href="http://warwithinme.com/blog/2012/02/blogging-with-octopress/">开始用Octopress写Blog - War Within Me</a></h4>

<ul>
<li>Feb, 20, 2012, by <strong>WWM</strong></li>
<li>title: <code>blogging-with-octopress</code></li>
<li>我很喜歡這個網站的主題設計。作者的文字風格也很有趣，看得出來是宅宅星人（恭維的意味）。另外作者也是個 <a href="http://www.alfredapp.com/">Alfred</a> 愛好者！</li>
</ul>


<hr />

<p>可以看出，幾乎每篇的標題都有 Octopress 這字出現，唯一沒有的一篇是用了 Octology 這個字。而 title 的部份，也不脫 hello / move / migrate 等單字。有趣的是，其中有兩篇是用拼音來寫 title，對於懶得想英文標題句的人，倒也不失為一個簡單省腦的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 開箱首發文]]></title>
    <link href="http://tzengyuxio.github.com/blog/2012/03/29/octopress-unboxing/"/>
    <updated>2012-03-29T16:55:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2012/03/29/octopress-unboxing</id>
    <content type="html"><![CDATA[<p>前天與昨天兩天我都在修改 blogger 的 template－－起因是這樣：我在 Chrome 裝了個 <a href="https://chrome.google.com/webstore/detail/afoibpobokebhgfnknfndkgemglggomo">HTML5 Outliner</a> 的擴充，透過這個擴充，可以查看某個網頁的大綱排列是否如預想的一樣。很顯然，blogger 預設提供的幾個範本並沒有良好的 HTML5 大綱結構，於是我決定動手修改它。</p>

<p>原本以為這是個小工程，沒想到卻花了我整整一夜一天的時間在和 <strong>blogger template</strong> 的語法纏鬥。blogger template 用到了許多神乎奇技的技巧，可以在一個 template 檔案中同時提供桌面與行動等不同平台的版面；同時提供首頁、封存、標籤與單篇等不同文章組合的版面；可以提供各式各樣的參數讓你在後台中只要簡單選選顏色調整大小就可以做出各式各樣的變化。而這些全部都是在一個 XML 檔案裡就可以搞定。</p>

<p>但也正因如此，許多設定與參數都是牽一髮動全身，想改也不曉得從哪邊改才安全。偏偏 blogger template 的設定與參數目前還缺乏文件，網路上能找到的多半是舊版的 template 語法。很多時候看到一個 css class 你只能先用猜的猜他的用途，然後慢慢試誤。最後雖然整出了滿意的結果，也獲得了不少寶貴的經驗－－但心中卻冒出了一個更大的疑問：</p>

<p><strong>「我真的想要再和這個怪物繼續相處下去嗎？」</strong></p>

<p>念頭一起，手也沒停著。立刻就進了不久前才開的 <a href="http://tzengyuxio.tumblr.com/">Tumblr</a> 帳號琢磨了許久。「要轉到 Tumblr 嗎？」我這麼問著自己，然而心裡總覺得還有什麼缺憾沒有被滿足。這時腦袋閃過先前看過的 <a href="http://octopress.org/">Octopress</a>, 數週前第一眼看到時沒什麼興趣，這次決定給它個機會，動手裝個起來玩玩看。</p>

<p>裝的過程還算順利，但也不是完全一帆風順。我遇到了一個 <code>rb-fsevent</code> 編譯錯誤的問題，幸好在 <a href="http://newbsd.com/blog/2012/03/19/my-first-try-install-octopress-on-my-mac-os-x-lion-10-dot-7-3-and-some-thing-stuff/">這篇文章</a> 中找到了解決方式，重點在於一行 <code>xcode-select</code> 指令。</p>

<p>架設好了環境，索性又申請了一個新的域名，這下真的是徹頭徹尾搬了新家。鷹架都搭好了，剩下的就是充實內容了。希望新的環境能夠帶來更愉快的書寫體驗，也期許自己今年能夠有更充實文章記錄。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 與 Ruby 的模組安裝]]></title>
    <link href="http://tzengyuxio.github.com/blog/2012/03/29/install-module-in-python-and-ruby/"/>
    <updated>2012-03-29T08:39:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2012/03/29/install-module-in-python-and-ruby</id>
    <content type="html"><![CDATA[<p>其實這兩個語言的模組安裝都很簡單。不過我不是個成天都在安裝新玩意兒的人，偶爾因為業務需求或是心血來潮想要裝個模組，卻又忘了指令怎下，免不了得又得上網搜尋。</p>

<p>雖說資料不難找，但每次都問 google 也是折騰，索性自己記個筆記，將來若有需要時，翻自己筆記總比上網搜尋來得快速。</p>

<p>更重要的是，才不會因為上網問 google 然後<strong>開一堆網頁邊看又繼續邊開連結搞到最後開了一大堆自己好像有興趣但其實跟原本問題一點也不相干的文章</strong>。我真是太容易<em>分心</em>了。</p>

<h2>Python 的 easy_install</h2>

<p>Python 的 easy_install 人如其名，真的很 easy。比方說我看到 <a href="http://pypi.python.org/pypi/Markdown">Markdown 2.1.1 : Python Package Index</a> 這個套件想要安裝，我只要到終端機輸入下面指令就行了：</p>

<pre><code>$ easy_install markdown
</code></pre>

<p>要刪除模組的話則是輸入：</p>

<pre><code>$ easy_install -m markdown
</code></pre>

<p>easy_install 主要的功能就是安裝，如果需要進一步說明，可以參考</p>

<pre><code>$ easy_install --help
</code></pre>

<h2>Ruby 的 gem</h2>

<p>相比之下，Ruby 的 gem 就不僅僅只是個安裝工具，它是個完整的<strong>套件管理工具</strong>。例如我想安裝一個叫 <a href="http://toodledo.rubyforge.org/toodledo/">toodledo</a> 的套件，可以這麼輸入：</p>

<pre><code>$ gem install toodledo
</code></pre>

<p>或是指定版本號：</p>

<pre><code>$ gem install toodledo --version 1.3.8
</code></pre>

<p>移除的話是：</p>

<pre><code>$ gem uninstall toodledo
</code></pre>

<p>我想知道有沒有跟 markdown 相關的套件，我可以用如下方式尋找：</p>

<pre><code>$ gem list markdown --remote
</code></pre>

<p>如果沒有加上 <code>--remote</code>, 則會列出本機已經安裝的套件。</p>

<pre><code>$ gem list
</code></pre>

<p>更詳細的說明可以參考線上說明。</p>

<pre><code>$ gem help
</code></pre>

<h2>在 Mac 上</h2>

<p>上面這兩個工具程式在 Mac OS X 中都是預設已經安裝在系統中的，省了不少麻煩。安裝的過程如果有遇到權限問題，那麼就在上面所列的指令最前面加上 <code>sudo</code> 再執行就好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ls Color on Mac]]></title>
    <link href="http://tzengyuxio.github.com/blog/2012/03/29/ls-color-on-mac/"/>
    <updated>2012-03-29T01:44:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2012/03/29/ls-color-on-mac</id>
    <content type="html"><![CDATA[<p><img src="http://tzengyuxio.github.com/images/2012/2012-03-29-ls-color.png" alt="ls color" /></p>

<p>昨天突然心血來潮想到來替 ls 上個顏色。以前用 Linux 時都有很漂亮的 ls 輸出，除此之外也會認真打造個人的 shell 環境。怎知開始用 Mac 兩年多來，都忘記來把 shell 好好調教一番，幾乎一直維持著原汁原味。</p>

<p>是說原本預設的也夠我用了就是，不過有個多采多姿的 ls 輸出不僅能提昇工作效率，光看著心情也會好起來。</p>

<h2>開啟顏色輸出</h2>

<p>在 Linux 要開啟顏色輸出是透過 <code>ls --color</code> 指令。而在 Mac 或 BSD 上則是使用 <code>ls -G</code>。</p>

<p>當然，每次都加這參數也是麻煩。寫程式的都是懶人，所以我在 <code>~/.bashrc</code> 檔案中加入下面這行設定：</p>

<pre><code>alias ls='ls -GF'
</code></pre>

<p>要說明一下的是，上面的設定除了開啟顏色輸出外，還加了 <code>-F</code> 這個能夠在 ls 輸出中加入識別符號的參數。像是目錄的名字後面會加上 &#8216;/&#8217;, 可執行檔會加上 &#8216;*&#8217;,  符號連結 (symbolic link) 會加上 &#8216;@&#8217; 等等。</p>

<h2>顏色的指定</h2>

<p>關於顏色的指定，Linux 使用 <code>LS_COLORS</code> 環境變數，BSD 則是使用 <code>LSCOLORS</code>。兩者的設定方式也不同，這部份網路上資料很好找，就不贅述。</p>

<p>直接說結果，我所使用的顏色組合如下：</p>

<pre><code>export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD
</code></pre>

<p>將這行加入 <code>~/.bash_profile</code> 就可以享受美美的 ls 了。這個配色設定是從 <a href="https://github.com/seebi/dircolors-solarized/issues/10">LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD</a> 這網頁參考來的。</p>

<p>附帶一提，Mac 或 BSD 的 <code>LSCOLORS</code> 參數只能指定預設檔案類型的顏色，比較常見的類型只有檔案、可執行檔、符號連結三種。Linux 的 <code>LS_COLORS</code> 除了上述這些之外，還可以針對附檔名作指定，像是把 .zip .rar .tgz 等壓縮檔設成黃色；然後 .avi .m4v .mov 等影片檔設成洋紅色之類的。</p>

<h2>補充資訊</h2>

<ol>
<li>BSD 下還有一個環境變數 <code>CLICOLOR</code>, 在 <code>~/.bash_profile</code> 中加入 <code>export CLICOLOR=1</code> 可以得到跟 <code>ls -G</code> 一樣的效果。</li>
<li>如果想要自己配色的，<a href="http://geoff.greer.fm/lscolors/">LSCOLORS Generator</a> 這個網頁提供了一個方便的配色小工具。</li>
<li>喜歡 Solarized 的話，<a href="https://github.com/seebi/dircolors-solarized">seebi/dircolors-solarized</a> 是一個將 Solarized 延伸到 ls color 的專案。可惜只適用在 <strong>GNU ls</strong>, 也就是 Linux 系統上的 ls。</li>
<li>如果你無論如何也想在 Mac 上看到壓縮檔、影片檔、音樂檔等不同類型檔案也有不同顏色，或是想要使用上面提到的 Solarized ls 配色，那麼可以考慮安裝 <a href="http://www.gnu.org/software/coreutils/">Coreutils - GNU core utilities</a> 這套件。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[設定 Mac Terminal 下的 .bashrc]]></title>
    <link href="http://tzengyuxio.github.com/blog/2012/03/27/dot-bashrc-in-mac-terminal/"/>
    <updated>2012-03-27T16:07:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2012/03/27/dot-bashrc-in-mac-terminal</id>
    <content type="html"><![CDATA[<p>今天想要替 Terminal 下一些常用的指令建立 alias, 我按照以前在 FreeBSD/Linux 的習慣，直接進 Terminal，在家目錄 (<code>~/</code>) 下寫了個 <code>.bashrc</code>, 重開 Terminal, 剛剛寫的 alias 卻沒有任何反應。</p>

<p>後來在家目錄下先建了個檔案 <code>.bash_profile</code>, 檔案內容如下：</p>

<pre class="prettyprint"><code>if [ -f ~/.bashrc ]; then
    source ~/.bashrc
fi
</code></pre>


<p>這樣原本寫在 <code>.bashrc</code> 裡的指令稿就會被讀取並且發揮作用了。補充說明，我的作業系統版本為 <strong>Mac OS X Lion (10.7)</strong>。</p>

<p>關於 <code>.bash_profile</code> 與 <code>.bashrc</code> 的差別，簡述如下：</p>

<h3>.bash_profile</h3>

<p>輸入帳號密碼登入時，不論遠端或本地，都會執行此設定檔。</p>

<h3>.bashrc</h3>

<p>在已經登入的情況下，開啟終端機視窗（如 Gnome 的 xterm），在命令提示符號出現前，就會先執行 .bashrc 內的指令。</p>

<p>不過 Mac OS X 的行為是上述流程的例外，詳細可參考本文最後面的連結。</p>

<hr />

<p>參考資訊：</p>

<p><a href="http://macfidelity.de/2008/07/02/mac-customizing-terminal-in-mac-os-x-105/">Customizing Terminal in Mac OS X 10.5 | macfidelity</a></p>

<p>上面這篇文章中的步驟比較多，甚至還要進 Terminal 的「偏好設定」畫面去修改打開 Shell 的指令。不過我自己的操作結果是就算沒有設定那些指令也沒關係，只要有包含文章中那段代碼的 <code>.bash_profile</code>, 就可以讀取 <code>.bashrc</code> 了。</p>

<p>關於 <code>.bash_profile</code> 與 <code>.bashrc</code> 的差別，請見下面這篇文章。</p>

<p><a href="http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html">.bash_profile vs .bashrc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON for Vim]]></title>
    <link href="http://tzengyuxio.github.com/blog/2012/03/26/json-for-vim/"/>
    <updated>2012-03-26T10:42:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2012/03/26/json-for-vim</id>
    <content type="html"><![CDATA[<p>剛剛在 Terminal 下開了個新檔要來寫 JSON, 發現 Vim 竟然沒有支援 JSON 的 FileType 與 syntax highlight。想說這問題應該很多人遇過，因此上網找了一下，找到這個 script: <a href="http://www.vim.org/scripts/script.php?script_id=1945">JSON.vim</a>。</p>

<p>不過看了下安裝說明，感覺麻煩了點。於是又找到了<a href="http://www.codeography.com/2010/07/13/json-syntax-highlighting-in-vim.html">這篇文章</a>，只要到 <code>~/.vimrc</code> 加入下面這行，就可以讓 JSON 檔案套用 JavaScript 的 syntax highlight, 簡單明瞭。</p>

<pre class="prettyprint"><code>autocmd BufNewFile,BufRead *.json set ft=javascript</code></pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[關於 Mac 快速檢視 (Quick Look) 的幾個小秘訣]]></title>
    <link href="http://tzengyuxio.github.com/blog/2012/03/11/tips-for-mac-os-x-quick-look/"/>
    <updated>2012-03-11T18:17:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2012/03/11/tips-for-mac-os-x-quick-look</id>
    <content type="html"><![CDATA[<p>我用了 Mac 好一段時間了才知道，原來對檔案直接按空白鍵可以開啟快速檢視 (Quick Look)；又隔了好一段時間，才又知道原來快速檢視除了內建的之外，還可以加上些外掛以增加支援檔案類型。下面是一些我所用到的 QuickLook 相關技巧整理。</p>

<p><img src="http://tzengyuxio.github.com/images/2012/2012-03-11-quicklook-of-zip.png" alt="BetterZip Plugin" /></p>

<h2>在 Terminal 下開啟快速檢視</h2>

<p>除了在 Finder 中按空白鍵外，有時候在 Terminal 底下工作時，也可以利用指令來開啟快速檢視，這樣可以減少鍵盤滑鼠的切換以提升效率。開啟的指令如下：</p>

<pre><code>$ qlmanage -p [FILE]
</code></pre>

<p>把 [FILE] 替換成要開啟的檔名即可。不過這指令也不算短，要更方便的話，可以在 <code>~/.bashrc</code> 中加入以下指令別名 (alias)，這樣只要輸入 <code>ql [FILE]</code> 就可以立刻檢視了：</p>

<pre><code>alias ql='qlmanage -p'
</code></pre>

<p>對了，設定檔 .bashrc 預設在 Mac OS X 中是不起作用的，可以參考<a href="http://coder.aqualuna.me/2012/03/bashrc-in-mac-terminal-os-x-lion.html">這篇文章</a>來讓 .bashrc work。</p>

<h2>增加支援檔案類型的 Plugin</h2>

<p>快速檢視本身支援文字、圖片、音樂、影片等基本檔案格式，至於其他不支援的格式則只會顯示一個大大的檔案 icon。透過以下 Plugin 可以增加快速檢視支援的檔案格式，安裝很簡單，只要將下載下來的 <code>*.qlgenerator</code> 檔案放到下面路徑之一：</p>

<ul>
<li><code>(Macintosh HD)/Library/QuickLook/</code> 安裝給本機的所有使用者</li>
<li><code>~/Library/QuickLook/</code> 只安裝給自己使用</li>
</ul>


<h3>壓縮檔 (Archives)</h3>

<p><a href="http://macitbetter.com/BetterZip-Quick-Look-Generator/">BetterZip 2 - The Next Generation of Archiving</a></p>

<p>上面這個外掛預設是暗色背景的，如果喜歡白色背景的（如同文章開頭那張圖），可以考慮下面這個修改版本：</p>

<p><a href="https://github.com/farfanoide/BetterZ-QuickLook-plugin-theme-for-Lion">farfanoide/BetterZ-QuickLook-plugin-theme-for-Lion</a></p>

<h3>程式碼 (Code)</h3>

<p><a href="http://code.google.com/p/qlcolorcode/">qlcolorcode - A Quick Look plugin for source code with syntax highlighting - Google Project Hosting</a></p>

<h3>CSV 檔案</h3>

<p><a href="http://code.google.com/p/quicklook-csv/">quicklook-csv - A QuickLook plugin to quick look CSV files for Mac OS X 10.5+ - Google Project Hosting</a></p>

<h2>快速檢視文字檔案時，可以複製文字</h2>

<p>按空白鍵檢視文字檔案內容很方便，可是有時候如果想要複製文字，就得另外再開啟文字編輯，相當麻煩。在 Terminal 下輸入以下指令，可以讓你在快速檢視文字檔時，也能選取想要的片段，然後按 Cmd+C 複製出來。</p>

<pre><code>$ defaults write com.apple.finder QLEnableTextSelection -bool TRUE; killall Finder
</code></pre>

<h2>用不同的應用程式開啟</h2>

<p>在快速檢視時，右上方會有個按鈕讓你以預設關連的應用程式開啟。如果你想要用其他的應用程式開啟，例如用 Photoshop 開啟圖檔，那麼只要按著右上方按鈕不放，就會出現選單供你選擇想要開啟的應用程式。</p>

<h2>以全螢幕開啟快速檢視</h2>

<p>選取檔案，然後按下 <code>Cmd+Opt+Y</code>，就可以直接以全螢幕方式進入快速檢視，這對影像或是影片格式相當有用。</p>

<p>其實也可以在按著 Opt 的狀態下按空白鍵進入全螢幕的快速檢視，不過像我有安裝 Alfred, <code>Opt+空白鍵</code> 預設會啟動 Alfred 的輸入視窗，因此就沒辦法用來開啟快速檢視了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solarized for google-code-prettify]]></title>
    <link href="http://tzengyuxio.github.com/blog/2012/03/11/solarized-for-google-code-prettify/"/>
    <updated>2012-03-11T07:20:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2012/03/11/solarized-for-google-code-prettify</id>
    <content type="html"><![CDATA[<p><a href="http://tzengyuxio.me/blog/2011/08/07/embeded-code-with-google-code-prettify/">我用 google-code-prettify 來做 blog 文章中的代碼上色</a>，google-code-prettify 本身有<a href="http://google-code-prettify.googlecode.com/svn/trunk/styles/index.html">附上幾個 Color Scheme</a>, 然而除了預設的之外，都是以暗色背景為主。</p>

<p>昨天心血來潮將 <a href="http://ethanschoonover.com/solarized">Solarized</a> 這個 Color Scheme 移植到 google-code-prettify 下，同樣也是 dark/light 雙版本。關於 Solarized 的介紹可以參考<a href="http://coder.aqualuna.me/2012/02/zenburn-solarized.html">這篇文章</a>。</p>

<h2>下載 / Download</h2>

<ul>
<li>Solarized Light

<ul>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.css">Normal version</a></li>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.min.css">Minified version</a></li>
</ul>
</li>
<li>Solarized Dark

<ul>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.css">Normal version</a></li>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.min.css">Minified version</a></li>
</ul>
</li>
</ul>


<h2>代碼 / Code</h2>

<h3>Solarized Light</h3>

<p>正常排版版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#657b83}
@media screen{
    .str{color:#2aa198}
    .kwd{color:#859900}
    .com{color:#93a1a1}
    .typ{color:#b58900}
    .lit{color:#2aa198}
    .pun,.opn,.clo{color:#657b83}
    .tag{color:#268bd2}
    .atn{color:#93a1a1}
    .atv{color:#2aa198}
    .dec,.var{color:#268bd2}
    .fun{color:red}
}
@media print,projection{
    .str{color:#060}
    .kwd{color:#006;font-weight:bold}
    .com{color:#600;font-style:italic}
    .typ{color:#404;font-weight:bold}
    .lit{color:#044}
    .pun{color:#440}
    .tag{color:#006;font-weight:bold}
    .atn{color:#404}
    .atv{color:#060}
}
pre.prettyprint{padding:5px;border:1px solid #888;background:#fdf6e3}
ol.linenums{margin-top:0;margin-bottom:0}
li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}
li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}
</code></pre>


<p>最小化版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.min.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#657b83}@media screen{.str{color:#2aa198}.kwd{color:#859900}.com{color:#93a1a1}.typ{color:#b58900}.lit{color:#2aa198}.pun,.opn,.clo{color:#657b83}.tag{color:#268bd2}.atn{color:#93a1a1}.atv{color:#2aa198}.dec,.var{color:#268bd2}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:5px;border:1px solid #888;background:#fdf6e3}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}
</code></pre>


<h3>Solarized Dark</h3>

<p>正常排版版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#839496}
@media screen{
    .str{color:#2aa198}
    .kwd{color:#859900}
    .com{color:#586175}
    .typ{color:#b58900}
    .lit{color:#2aa198}
    .pun,.opn,.clo{color:#839496}
    .tag{color:#268bd2}
    .atn{color:#586175}
    .atv{color:#2aa198}
    .dec,.var{color:#268bd2}
    .fun{color:red}
}
@media print,projection{
    .str{color:#060}
    .kwd{color:#006;font-weight:bold}
    .com{color:#600;font-style:italic}
    .typ{color:#404;font-weight:bold}
    .lit{color:#044}
    .pun{color:#440}
    .tag{color:#006;font-weight:bold}
    .atn{color:#404}
    .atv{color:#060}
}
pre.prettyprint{padding:5px;border:1px solid #888;background:#002b36}
ol.linenums{margin-top:0;margin-bottom:0}
li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}
li.L1,li.L3,li.L5,li.L7,li.L9{background:#111}
</code></pre>


<p>最小化版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.min.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#839496}@media screen{.str{color:#2aa198}.kwd{color:#859900}.com{color:#586175}.typ{color:#b58900}.lit{color:#2aa198}.pun,.opn,.clo{color:#839496}.tag{color:#268bd2}.atn{color:#586175}.atv{color:#2aa198}.dec,.var{color:#268bd2}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:5px;border:1px solid #888;background:#002b36}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#111}
</code></pre>


<h2>範例 / Example (in dark version)</h2>

<pre class="prettyprint lang-java"><code>import java.util.Map;
import java.util.TreeSet;

public class GetEnv {
  /**
   * let's test generics
   * @param args the command line arguments
   */
  public static void main(String[] args) {
    // get a map of environment variables
    Map&lt;String, String&gt; env = System.getenv();
    // build a sorted set out of the keys and iterate
    for(String k: new TreeSet&lt;String&gt;(env.keySet())) {
      System.out.printf("%s = %s\n", k, env.get(k));
    }
  }    
}
</code></pre>


<hr />

<p>網路上有找到<a href="http://subtech.g.hatena.ne.jp/h2u/20110408/1302198319">這篇也有 solarized color for google-pretty-code</a>, 不過只有暗色背景的版本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BOM (Byte Order Mark) 與 UTF-8]]></title>
    <link href="http://tzengyuxio.github.com/blog/2012/03/09/bom-byte-order-mark-and-utf-8/"/>
    <updated>2012-03-09T20:28:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2012/03/09/bom-byte-order-mark-and-utf-8</id>
    <content type="html"><![CDATA[<p>一些個人筆記，省得以後每次遇到還得重新上網搜尋做功課。</p>

<hr />

<p>Byte Order Mark 在 UTF-16 Big Endian 是 &#8220;FE FF&#8221;，Little Endian 是 &#8220;FF FE&#8221;。其中 Mac 系統主要是 Big Endian, PC 系統則是使用 Little Endian。</p>

<p>UTF-8 由於本身特性，不管 Big Endian 或 Little Endian，其 BOM 一律為 &#8220;EF BB BF&#8221;。</p>

<p>不過個人建議，文字文件要儲存的話，<strong>盡量以 UTF-8 格式存</strong>。而以 UTF-8 儲存的文件，<strong>盡量不要放 BOM 進去</strong>。為什麼呢？因為 UTF-8 的一個特色就是能與 ASCII 系統相容，如果文件中沒有包含非拉丁字元的話；要是放了 BOM 進去，就破壞了這相容性。</p>

<h2>在 VIM 中的 BOM 相關操作</h2>

<h3>加入 BOM</h3>

<pre><code>:set bomb
</code></pre>

<h3>移除 BOM</h3>

<pre><code>:set nobomb
</code></pre>

<h3>查詢 BOM 狀態</h3>

<pre><code>:set bomb?
</code></pre>

<h2>在 Terminal / Console 下的 BOM 相關操作</h2>

<h3>查詢包含 UTF-8 BOM 的檔案</h3>

<pre><code>$ grep -rIl $'^\xEF\xBB\xBF' [FILE]
</code></pre>

<h3>找出並移除 UTF-8 的 BOM</h3>

<pre><code>$ grep -rIl $'^\xEF\xBB\xBF' [FILE] | xargs sed -i 's/^\xEF\xBB\xBF//;g'
</code></pre>

<h3>編碼的轉換</h3>

<pre><code>$ iconv -f [FROM_ENCODING] -t [TO_ENCODING] [FILE]
</code></pre>

<p>其中 ENCODING 的部份可以是以下數值：</p>

<ul>
<li>UTF-8 UTF8</li>
<li>UTF-16BE</li>
<li>UTF-16LE</li>
<li>UCS-2BE UNICODEBIG</li>
<li>UCS-2LE UNICODELITTLE</li>
</ul>


<p>更多 ENCODING 代碼可以透過 <code>iconv --list</code> 查詢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在網頁中嵌入 Facebook 與 twitter 社交按鈕]]></title>
    <link href="http://tzengyuxio.github.com/blog/2011/08/09/embeded-facebook-and-twitter-button-in-page/"/>
    <updated>2011-08-09T19:02:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2011/08/09/embeded-facebook-and-twitter-button-in-page</id>
    <content type="html"><![CDATA[<p>Facebook 常見的社交按鈕有兩種：<strong>Facebook Share</strong> 與 <strong>Facebook Like</strong>，不過前者已經不在 Facebook 官方提供的 Plugin 列表中，連到<a href="http://developers.facebook.com/docs/share">舊的 Facebook Share 說明頁面</a>會自動導向 <a href="http://developers.facebook.com/docs/reference/plugins/like/">Facebook Like 的說明頁面</a>，看起來 Facebook 似乎有意以 Like 取代 Share 的地位。雖然如此，兩種功能還是有其不同的定位，目前也都能夠共存並用。關於兩者差異的說明，可以參考<a href="http://daggle.com/facebook-button-facebook-share-keeping-1792">這篇文章（英文）</a>。下面則是 Facebook 與 twitter 各種社交功能與外觀的顯示範例與分享代碼。</p>

<h2>Facebook Share 的分享代碼</h2>

<h3>按鈕配置</h3>

<p><a href="http://www.facebook.com/sharer.php" name="fb_share" type="button_count">分享</a></p>

<pre class="prettyprint"><code>&lt;a name="fb_share" type="button_count" href="http://www.facebook.com/sharer.php"&gt;分享&lt;/a&gt;&lt;script src="http://static.ak.fbcdn.net/connect.php/js/FB.Share" type="text/javascript"&gt;&lt;/script&gt;
</code></pre>


<h3>方塊配置</h3>

<p><a href="http://www.facebook.com/sharer.php" name="fb_share" type="box_count">分享</a></p>

<pre class="prettyprint"><code>&lt;a name="fb_share" type="box_count" href="http://www.facebook.com/sharer.php"&gt;分享&lt;/a&gt;&lt;script src="http://static.ak.fbcdn.net/connect.php/js/FB.Share" type="text/javascript"&gt;&lt;/script&gt;
</code></pre>




<script src="http://static.ak.fbcdn.net/connect.php/js/FB.Share" type="text/javascript">
</script>


<h2>Facebook Like 的分享代碼</h2>

<h3>標準配置</h3>

<iframe allowtransparency="true" frameborder="0" scrolling="no" src="http://www.facebook.com/plugins/like.php?app_id=147491145332691&amp;href=http://coder.aqualuna.me/2011/08/facebook-twitter.html&amp;send=false&amp;layout=standard&amp;width=450&amp;show_faces=true&amp;action=like&amp;colorscheme=light&amp;font&amp;height=20" style="border: none; height: 20px; overflow: hidden; width: 450px;"></iframe>




<pre class="prettyprint"><code>&lt;iframe allowTransparency='true' expr:src='&amp;quot;http://www.facebook.com/plugins/like.php?href=&amp;quot; + data:post.url + &amp;quot;&amp;amp;send=false&amp;amp;layout=standard&amp;amp;width=450&amp;amp;show_faces=false&amp;amp;action=like&amp;amp;colorscheme=light&amp;amp;font=tahoma&amp;amp;height=20&amp;quot;' frameborder='0' scrolling='no' style='border:none; overflow:hidden; width:450px; height:20px;'&gt;&lt;/iframe&gt;
</code></pre>


<h3>按鈕配置</h3>

<iframe allowtransparency="true" frameborder="0" scrolling="no" src="http://www.facebook.com/plugins/like.php?app_id=147491145332691&amp;href=http://coder.aqualuna.me/2011/08/facebook-twitter.html&amp;send=false&amp;layout=button_count&amp;width=90&amp;show_faces=true&amp;action=like&amp;colorscheme=light&amp;font&amp;height=20" style="border: none; height: 20px; overflow: hidden; width: 90px;"></iframe>




<pre class="prettyprint"><code>&lt;iframe allowTransparency='true' expr:src='&amp;quot;http://www.facebook.com/plugins/like.php?href=&amp;quot; + data:post.url + &amp;quot;&amp;amp;send=false&amp;amp;layout=button_count&amp;amp;width=90&amp;amp;show_faces=false&amp;amp;action=like&amp;amp;colorscheme=light&amp;amp;font=tahoma&amp;amp;height=20&amp;quot;' frameborder='0' scrolling='no' style='border:none; overflow:hidden; width:90px; height:20px;'&gt;&lt;/iframe&gt;
</code></pre>


<h3>方塊配置</h3>

<iframe allowtransparency="true" frameborder="0" scrolling="no" src="http://www.facebook.com/plugins/like.php?app_id=147491145332691&amp;href=http://coder.aqualuna.me/2011/08/facebook-twitter.html&amp;send=false&amp;layout=box_count&amp;width=90&amp;show_faces=true&amp;action=like&amp;colorscheme=light&amp;font&amp;height=63" style="border: none; height: 63px; overflow: hidden; width: 90px;"></iframe>




<pre class="prettyprint"><code>&lt;iframe allowTransparency='true' expr:src='&amp;quot;http://www.facebook.com/plugins/like.php?href=&amp;quot; + data:post.url + &amp;quot;&amp;amp;send=false&amp;amp;layout=box_count&amp;amp;width=90&amp;amp;show_faces=false&amp;amp;action=like&amp;amp;colorscheme=light&amp;amp;font=tahoma&amp;amp;height=63&amp;quot;' frameborder='0' scrolling='no' style='border:none; overflow:hidden; width:90px; height:63px;'&gt;&lt;/iframe&gt;
</code></pre>


<h2>twitter 的分享代碼</h2>

<h3>水平按鈕</h3>

<p><a class="twitter-share-button" href="http://twitter.com/share">Tweet</a></p>

<pre class="prettyprint"><code>&lt;script src='http://platform.twitter.com/widgets.js' type='text/javascript'/&gt;
&lt;a class='twitter-share-button' href='http://twitter.com/share' expr:data-url='data:post.url' expr:data-text='data:post.title'&gt;Tweet&lt;/a&gt;
</code></pre>


<h3>垂直按鈕</h3>

<p><a class="twitter-share-button" data-count="vertical" href="http://twitter.com/share">Tweet</a></p>

<pre class="prettyprint"><code>&lt;script src='http://platform.twitter.com/widgets.js' type='text/javascript'/&gt;
&lt;a class='twitter-share-button' href='http://twitter.com/share' expr:data-url='data:post.url' expr:data-text='data:post.title' data-count='vertical'&gt;Tweet&lt;/a&gt;
</code></pre>


<h2>參考資料</h2>

<ul>
<li><a href="http://developers.facebook.com/docs/reference/plugins/like/">Like Button - Facebook Developers</a></li>
<li><a href="https://dev.twitter.com/docs/tweet-button">Tweet Button | Twitter Developers</a></li>
<li><a href="http://daggle.com/facebook-button-facebook-share-keeping-1792">Facebook Like Button Vs. Facebook Share: Why I’m Keeping Both</a></li>
<li><a href="http://jinnsblog.blogspot.com/2010/12/facebook-share-link-button-widget.html">[Blogger] 臉書的「分享」、「讚」推文按扭語法分享-靖 ● 技場</a></li>
<li><a href="http://jasonblog.tw/2010/05/add-facebook-share-button-on-blogger.html">在Blogger裝置具有計數功能的Facebook分享按鈕 | 哲生博客 Jason Blog</a></li>
<li><a href="http://jasonblog.tw/2010/04/add-facebook-like-button-on-your.html">在Blogger嵌入Facebook的讚(Like)按鈕 | 哲生博客 Jason Blog</a></li>
<li><a href="http://clonn.blogspot.com/2011/05/bloggerfacebook-add-facebook-like.html">[教學] Blogger當中加入facebook 讚！ Add facebook like button in Blogger template</a></li>
<li><a href="http://www.bloggerplugins.org/2010/08/twitter-share-buttons-for-blogger-tweet.html">Official Twitter Share Button (Tweet Button) for Blogger ~ Blogger Widgets</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 google-code-prettify 在網頁中嵌入代碼]]></title>
    <link href="http://tzengyuxio.github.com/blog/2011/08/07/embeded-code-with-google-code-prettify/"/>
    <updated>2011-08-07T09:13:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2011/08/07/embeded-code-with-google-code-prettify</id>
    <content type="html"><![CDATA[<p>作為一個以程式技術為主的網誌，文章中免不了得出現一兩段程式碼。原本我使用 <a href="https://github.com/">github</a> 的 <a href="http://www.gist.com/">gist</a> 服務來將程式代碼內嵌到網頁（[使用效果見此]），另一方面 gist 也可以用來當作是自己的小小代碼備忘錄，許多程式碼片段直接丟上去就好了，非常便利，可說是一舉兩得。</p>

<p>不過有時候只是想要顯示幾行代碼，這些代碼也許不具有完整性，如果將代碼一股腦兒地全丟上 gist，總有一天代碼庫會變成亂葬崗。所以除了 gist 之外，我也找了其他網頁貼程式碼的方案。原本前幾天已經物色好了 <a href="http://alexgorbatchev.com/SyntaxHighlighter/">SyntaxHighlighter</a>，打算趁週末有空時來實裝測試。結果因為在安裝前四處蒐集資訊，意外又發現到 <a href="http://code.google.com/p/google-code-prettify/">google-code-prettify</a>，看了一下立刻就變心決定改用 google-code-prettify。</p>

<p>其實就功能上而言，SyntaxHighlighter 遠遠勝過 google-code-prettify，之所以選擇了 google-code-prettify，最主要的原因就在於「<strong>簡單</strong>」。兩者的比較如下（分別簡稱為 GCP 和 SH）：</p>

<ul>
<li>遇到過長的程式碼，SH 可以顯示出 Scrollbar，維持原排版；而 GCP 則會強制換行。</li>
<li>SH 預設有行號，GCP 也可加入行號，但不方便。</li>
<li>兩者都支援顏色主題。包含預設的在內，SH 現有 7 種顏色主題，GCP 則有 4 種。</li>
<li>SH 支援 23 種程式語法，GCP 預設內建的也有 20 種左右。</li>
<li>就安裝上，GCP 只要加入兩個檔案，就可以處理大多數的語言；SH 則除了得加入核心的 CSS 與 JavaScript 檔共三個檔外，還必須加入對應使用程式語言的 JavaScript。</li>
<li>使用上兩者差異不大。SH 除了 <code>&lt;pre&gt;</code> 標籤外也提供了 <code>&lt;script&gt;</code> 的使用方式；GCP 則是可以省略語法指定，自動判斷。</li>
</ul>


<p>由於我經常跨不同程式語言撰寫，因此 SH 在安裝上對我而言就顯得比較不便。雖然新版提供了 Autoloader 來動態決定要載入哪些程式語言語法的 JavaScript，不過我最後還是選擇單純一點的 GCP。GCP 對我而言最大的缺點就是沒有行號，我在 IDE 上寫 code 一定會打開行號顯示，不過反正網頁上顯示的代碼行數都不多，沒有行號這一點倒是還可以接受。</p>

<p>以下就是我的 google-code-prettify 安裝筆記：</p>

<h2>Step 1.</h2>

<p>到 <a href="http://code.google.com/p/google-code-prettify/">google-code-prettify</a> 首頁下載好檔案後，解壓放到自己的網路空間上。我是放到 Dropbox 的 public 資料夾下。</p>

<h2>Step 2.</h2>

<p>然後再修改自己網頁的範本。有兩個地方要修改，一個是在 <code>&lt;/head&gt;</code> 標籤之前加上 css 與 javascript 的載入；另外一個是在 <code>&lt;body&gt;</code> 標籤內加上 onLoad 函式。</p>

<pre class="prettyprint lang-html"><code>&lt;head&gt;
  &lt;-- 中略 --&gt;
  &lt;-- 1. 在 /head 標籤前加入下面兩行 --&gt;
  &lt;link href="http://my.url.to/prettify.css" rel="stylesheet" type="text/css"/&gt;
  &lt;script src="http://my.url.to/prettify.js" type="text/javascript"/&gt;
&lt;/head&gt;

&lt;-- 2. 在 body 標籤內加入 onload 設定 --&gt;
&lt;body onload='prettyPrint()'&gt;
&lt;/body&gt;
</code></pre>


<h2>Step 3.</h2>

<p>接下來只要在想要使用代碼的地方，用 <code>&lt;pre&gt;</code> 或 <code>&lt;code&gt;</code> 包起來，並且設定 class 為 prettiprint 即可。google-code-prettify 會自動判斷裡面的代碼是屬於何種語言。</p>

<pre class="prettyprint lang-html"><code>&lt;pre class="prettyprint"&gt;
#include &lt;stdio.h&gt;
 
int main(void)
{
   printf("Hello, world!\n");
   return 0;
}
&lt;/pre&gt;
</code></pre>


<p>上面這段代碼的結果如下：</p>

<pre class="prettyprint"><code>#include &lt;stdio.h&gt;
 
int main(void)
{
   printf("Hello, world!\n");
   return 0;
}
</code></pre>


<p>如果想要自己指定區塊內的程式語言，可以再加上 <code>lang-*</code>，其中 * 要替換成該程式語言的代碼。</p>

<pre class="prettyprint"><code>&lt;pre class="prettyprint lang-html"&gt;
  &lt;-- HTML 的場合 --&gt;
&lt;/pre&gt;
&lt;pre class="prettyprint lang-c"&gt;
  /* C 的場合 */
&lt;/pre&gt;
&lt;pre class="prettyprint lang-py"&gt;
  " Python 的場合
&lt;/pre&gt;
</code></pre>


<p>目前支援的代碼有</p>

<blockquote><p>&#8220;bsh&#8221;, &#8220;c&#8221;, &#8220;cc&#8221;, &#8220;cpp&#8221;, &#8220;cs&#8221;, &#8220;csh&#8221;, &#8220;cyc&#8221;, &#8220;cv&#8221;, &#8220;htm&#8221;, &#8220;html&#8221;, &#8220;java&#8221;, &#8220;js&#8221;, &#8220;m&#8221;, &#8220;mxml&#8221;, &#8220;perl&#8221;, &#8220;pl&#8221;, &#8220;pm&#8221;, &#8220;py&#8221;, &#8220;rb&#8221;, &#8220;sh&#8221;, &#8220;xhtml&#8221;, &#8220;xml&#8221;, &#8220;xsl&#8221;</p></blockquote>

<p>看得出來是以程式碼的副檔名做區隔。基本上常見的幾乎都包含在裡面了。</p>

<hr />

<p>參考資訊：</p>

<ul>
<li><a href="http://code.google.com/p/google-code-prettify/">google-code-prettify</a></li>
<li><a href="http://alexgorbatchev.com/SyntaxHighlighter/">SyntaxHighlighter</a></li>
<li><a href="http://www.vixual.net/blog/archives/197">在 Blogger 中使用 google-code-prettify 顯示程式碼 | Vixual</a></li>
<li><a href="http://www.vixual.net/blog/archives/198">在 Blogger 中使用 dp.SyntaxHighlighter 顯示程式碼 | Vixual</a></li>
<li><a href="http://yuanfarn.blogspot.com/2009/10/google-code-prettify.html">幻影千瞳的部落格: 使用 google-code-prettify</a></li>
<li><a href="http://yuanfarn.blogspot.com/2009/10/syntaxhighlighter.html">幻影千瞳的部落格: 使用 SyntaxHighlighter</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Eclipse 的常用快速鍵]]></title>
    <link href="http://tzengyuxio.github.com/blog/2011/07/30/eclipse-common-keyboard-shortcuts/"/>
    <updated>2011-07-30T16:09:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2011/07/30/eclipse-common-keyboard-shortcuts</id>
    <content type="html"><![CDATA[<p>我身為一個程式設計師，有個鍵盤在身邊，也很合邏輯。這個鍵盤呢，是我用來撰寫代碼用的，很合理吧？可話說回來，這扳子，啊不，這鍵盤如果只有拿來寫代碼，那可就浪費了；身為一個<strong>高生產力</strong>的程式設計師，應該充分活用鍵盤的各種功能，活用到甚至能夠取代大多數滑鼠的操作，那才叫<a href="http://youtu.be/yKWwrxaOxsY">專業</a>。所以說，善用功能熱鍵就很重要啦，江湖上有本武功秘笈，書名叫做<a href="http://www.anobii.com/books/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E5%B8%AB%E6%8F%90%E5%8D%87%E7%94%9F%E7%94%A2%E5%8A%9B%E7%A7%98%E7%AC%88/9789866840340/01c423030629cd8ad5/">《程式設計師提昇生產力秘笈》</a>，裡頭就有一段關於「奧義，鍵盤捷徑」的心法敘述：</p>

<blockquote><p>&#8230;&#8230;程式設計（除了使用者介面設計外）是文字性活動，所以，你應該儘可能把你的手放在鍵盤上。&#8230;&#8230;你一整天都使用 IDE 建立程式碼，而 IDE 有大量鍵盤捷徑。<strong>全都學！</strong>使用鍵盤捷徑在原始碼內走動，一定比使用滑鼠快。 (P.30)</p></blockquote>

<p>當然，沒有必要每個人都成為一代武林宗師，因此也沒有必要像上面說的一樣將每個鍵盤捷徑全部學起來。大多數人只要學個一招半式，就可以闖蕩江湖，應付<a href="http://wiki.komica.org/wiki/?%E9%AB%98%E9%81%94%E5%85%AB%E6%88%90">高達八成</a>以上的滑鼠操作。可是，功能熱鍵百百款，到底哪些才是常用需要記得呢？底下整理一些 Eclipse 上常用的熱鍵表：</p>

<h2>編輯相關</h2>

<ul>
<li><code>Ctrl + Shift + F</code> = 重新排版</li>
<li><code>Ctrl + Shift + M</code> = 加入 import （加入游標所在類別所需的 import）</li>
<li><code>Ctrl + Shift + O</code> = 整理 imports （掃描整個檔案，加入所需並刪除沒用的）</li>
<li><code>Ctrl + /</code> = 切換註解（按一次加上註解，再按一次取消註解）</li>
<li><code>Ctrl + I</code> = 修正縮排</li>
<li><code>Alt + Shift + ↑</code> = 擴大選取</li>
</ul>


<h2>游標或檔案定位</h2>

<ul>
<li><code>F3</code> = 跳到定義</li>
<li><code>Ctrl + E</code> = 已開啟檔案清單</li>
<li><code>Ctrl + O</code> = 開啟符號清單</li>
<li><code>Ctrl + J</code> = 漸增式搜尋</li>
</ul>


<h2>除錯與執行</h2>

<ul>
<li><code>F11</code> = 以除錯模式啟動 (Debug)</li>
<li><code>Ctrl + F11</code> = 啟動 (Run)</li>
<li><code>F5</code> = 步進，深入一層 (Step Into)</li>
<li><code>F6</code> = 步進，往下一行 (Step Over)</li>
<li><code>F7</code> = 步進，回上一層 (Step Return)</li>
</ul>


<h2>重構相關</h2>

<ul>
<li><code>Alt + Shift + R</code> = 重新命名 (Rename)</li>
<li><code>Alt + Shift + M</code> = 提煉函式 (Extract Method)</li>
<li><code>Alt + Shift + L</code> = 提煉區域變數 (Extract Local Variable)</li>
</ul>


<p>如果覺得上面這些功能熱鍵還不夠看，當然也可以自己進去 Eclipse 的設定中去挖掘更多的指上神功。查看功能熱鍵列表的途徑要從選單列的 Window → Preferences 進入，接著就可以看到下面這張圖，然後按圖索驥，找到自己常用功能的熱鍵。</p>

<p><img src="http://4.bp.blogspot.com/-0Bds_glMARA/TjO3I7Q5cRI/AAAAAAAAAZw/Pn_C_vQoIYY/s400/eclipse-shortcut.png" alt="eclipse key binding" /></p>

<p>好啦，上面列出這許多的熱鍵，要怎樣才能有效的背下來呢？很簡單，不用背－－最有效的記憶方法不是靠腦袋記，而是<strong>用身體去記</strong>。把常用功能熱鍵印出來貼到電腦旁邊，然後不斷的用、不停的用，直到每次要使用該功能時，腦袋想都來不及想手指就已經按出組合熱鍵，這樣就再也忘不掉了。（不過太久沒用的話，還是需要一小段時間來重新回復手感，只要一小段時間而已，真的。）</p>

<p>除此之外，當每次要使用選單列（Menu Bar）或工具列（Toolbar）上某樣功能時，停下來多想兩秒鐘：不要急著按下滑鼠左鍵，先看看選單文字或按鈕的提示上有沒有快速鍵的按法，有的話將手放開滑鼠，重新以快速鍵的方式完成自己的目的。久而久之，這些操作自然都會內化成為身體上的一部分。只要持之以恆，每日精進，減少手指頭在鍵盤滑鼠上切換的次數，那麼總有一天，我想，要達到「每小時幾十萬行程式碼上下」也不再是個夢想啦！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[To Iterate is Human, to Recurse, Divine]]></title>
    <link href="http://tzengyuxio.github.com/blog/2011/07/28/to-iterate-is-human-to-recurse-divine/"/>
    <updated>2011-07-28T12:30:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2011/07/28/to-iterate-is-human-to-recurse-divine</id>
    <content type="html"><![CDATA[<p>今天偶然看到這句話，&#8221;To iterate is human, to recurse, divine.&#8221;，無巧不巧，最近幾天的課程我也剛好在講解<strong>遞迴</strong>的概念。</p>

<p>說這句話的老兄是 <a href="http://en.wikipedia.org/wiki/L._Peter_Deutsch">L. Peter Deutsch</a>，雖然他的姓寫作是「德意志（Deutsch）」，可是這位德意志先生卻是個道道地地的美國麻省人。Deutsch 在電腦界最主要的貢獻就是 <a href="http://zh.wikipedia.org/wiki/Ghostscript">Ghostscript</a> 和 <a href="http://en.wikipedia.org/wiki/Archie_search_engine">Archie</a>。Ghostscript 是可以用來生成 PDF 或是 Postscript 格式文件的軟體，從 1988 第一版釋出一直到今年 2011 橫跨了 23 個年頭，仍然持續開發維護中（當然維護者早已換人接手，不再是 Deutsch 了），也衍生了許多分支專案。</p>

<p>而關於另一項成就 Archie 可能聽過的人就比較少了，因為這是早年的一項網路服務，如同 Gopher 或是 News 一樣，早已淹沒在歷史的洪流中。在大家都還是以 FTP 作為主要下載方式的年代裡，Archie 可以整合不同匿名 FTP 站台的資訊，建立各站台擁有檔案的索引，然後使用者只要上連 Archie 網站，輸入檔名進行搜尋，就可以知道自己想要的檔案可以從哪個 FTP 站台下載。聽起來很像搜尋引擎做的工作不是？沒錯，<strong>Archie 某種程度上可說是網頁搜尋引擎的前身</strong>。早在 Google 甚至 Yahoo! 出生之前，Archie 就已經在 Internet 上運作好一段時間了。對這段歷史有興趣的可以看看這篇：<a href="http://www.isrl.illinois.edu/~chip/projects/timeline/1990archie.htm">The first search engine, Archie.</a></p>

<p>回頭來看看篇首這句：</p>

<blockquote><p>&#8220;To iterate is human, to recurse, divine&#8221;</p></blockquote>

<p>這句到底代表什麼意思，著實讓我推敲了很久。先來看看網路找來的兩個我覺得不錯的翻譯（原譯者均不明）：</p>

<blockquote><p>“迭代（iterate）者为人，递归（recurse）者为神。”</p>

<p>「遞迴（recurse）只應天上有, 凡人該當用迴圈（iterate）」</p></blockquote>

<p>同樣一句話，將其放在不同情境下會有截然不同的解讀。這句的意思到底是要說<em>「我們應該放棄平凡的作法，盡量使用遞迴，以追求神的境界」</em>呢？還是想表達<em>「遞迴這種作法太神乎奇技了，我們應該用簡單、平凡，一般人都可以接受的作法，以迴圈來實現」</em>呢？</p>

<p>我參透不出這句話到底是<em>推崇遞迴</em>還是<em>鼓勵迴圈</em>。不過以我的經驗而言，遞迴雖然一開始很容易讓人腦筋打結，可是當熟悉遞迴之後，許多複雜的處理都會變得簡單明瞭。許多程式機制的實作擺脫不了遞迴，比方說遍歷某資料夾下的所有子資料夾與檔案、迷宮路徑的搜尋，或是 AI 決策樹的判斷，使用遞迴來寫可以達到事半功倍的效果。</p>

<p>當然，所有的的遞迴都可以改寫成迴圈形式，改寫為迴圈形式通常也可以獲得效率上的提升，因為遞迴層層呼叫的過程中不停將資料塞入堆疊又從堆疊取出的手續太耗成本，遠不如迴圈以少數幾個變數就可以控制完整的流程。但是將遞迴改寫成迴圈的形式往往會失去邏輯的簡潔與結構的優雅。</p>

<p>寫程式經常就是遇到這種兩難：要嘛對電腦好，讓它少算一點，少用點空間；要嘛對人好，電腦多做點工，可是人類看起 Code 來輕鬆（話說遞迴也不見得都比迴圈式的改寫好懂就是）。因此，針對同一件事情，該用遞迴解還是迴圈解好呢？我想，選擇自己與他人都<strong>容易理解的方法</strong>去做，那就對了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UIGestureRecognizer 的共存]]></title>
    <link href="http://tzengyuxio.github.com/blog/2011/07/26/which-uigesturerecognizer-will-response/"/>
    <updated>2011-07-26T19:55:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2011/07/26/which-uigesturerecognizer-will-response</id>
    <content type="html"><![CDATA[<p>在 iPhone 或 iPad 的開發中，除了用 <code>touchesBegan</code> / <code>touchesMoved</code> / <code>touchesEnded</code> 這組方法來控制使用者的手指觸控外，也可以用 <a href="http://developer.apple.com/library/ios/#documentation/uikit/reference/UIGestureRecognizer_Class/Reference/Reference.html#//apple_ref/occ/cl/UIGestureRecognizer">UIGestureRecognizer</a> 的衍生類別來進行判斷。用 <code>UIGestureRecognizer</code> 的好處在於有現成的手勢，開發者不用自己計算手指移動的軌跡。<code>UIGestureRecognizer</code> 的衍生類別有以下數種：</p>

<ul>
<li><code>UITapGestureRecognizer</code></li>
<li><code>UIPinchGestureRecognizer</code></li>
<li><code>UIRotationGestureRecognizer</code></li>
<li><code>UISwipeGestureRecognizer</code></li>
<li><code>UIPanGestureRecognizer</code></li>
<li><code>UILongPressGestureRecognizer</code></li>
</ul>


<p>從命名上不難了解這些類別所對應代表的手勢，分別是 Tap（點一下）、Pinch（二指往內或往外撥動）、Rotation（旋轉）、Swipe（滑動，快速移動）、Pan （拖移，慢速移動）以及 LongPress（長按）。這些手勢類別在使用上也很簡單，只要在使用前宣告並掛到對應的視圖（UIView）元件上即可。</p>

<script src="https://gist.github.com/1106515.js?file=uigesturerecognizer.m"></script>


<p>問題來了。有些手勢其實是互相關連的，例如 Tap 與 LongPress、Swipe 與 Pan，或是 Tap 一次與 Tap 兩次。當一個 UIView 同時掛上兩個相關連的手勢時，到底我這一下手指頭按的要算是 Tap 還是 LongPress？如果照預設作法來看，只要「先滿足條件」的就會跳出並呼叫對應方法，舉例來說，如果同時註冊了 Pan 跟 Swipe，只要手指頭一移動就會觸發 Pan 然後跳出，因而永遠都不會發生 Swipe；單點與雙點的情形也是一樣，永遠都只會觸發單點，不會有雙點。</p>

<p>那麼這問題有解嗎？有的，<code>UIGestureRecognizer</code> 有個方法叫做 <code>requireGestureRecognizerToFail</code>，他可以指定某一個 recognizer，即便自己已經滿足條件了，也不會立刻觸發，會等到該指定的 recognizer 確定失敗之後才觸發。以同時支援單點擊與雙點擊的作法為例，程式碼如下：</p>

<script src="https://gist.github.com/1106562.js?file=uitapgesturerecognizer.m"></script>


<p>如此一來，在第一下點擊後，如果有迅速點擊第二下，就會觸發 <code>doubleRecognizer</code>；反之要是隔了一小段時間，造成 <code>doubleRecognizer</code> 發生 fail，就會回頭觸發 <code>singleRecognizer</code> 了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的程式語言之路]]></title>
    <link href="http://tzengyuxio.github.com/blog/2011/07/26/my-way-as-a-coder/"/>
    <updated>2011-07-26T10:54:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2011/07/26/my-way-as-a-coder</id>
    <content type="html"><![CDATA[<p>從大學以來，這十幾年的工作與生活總與程式設計脫不了關係。前前後後寫了不少的 Code, 也接觸過許許多多不同的 Programming Language。這邊就來記錄一下自己現在還有印象的程式語言，也許十年之後再來回顧，又是另一種不同的想法吧。</p>

<h2>QBasic</h2>

<p>高中時候獲得人生的第一台電腦，當時還是 DOS 的年代，每個裝了 MS-DOS 的電腦都會內附 QBasic。還記得用 QBasic 寫過一些簡單的遊戲，像是 1A2B、迷宮產生之類的，但是真要說自己寫的其實也不是，很多都是照著當時雜誌（例如「第三波」）上的代碼 key 進電腦中而已。</p>

<h2>Turbo C++</h2>

<p>說真的，我已經不記得是 Turbo C 或是 Turbo C++ 了，但可以肯定的一點是，我當時一定只用到 C 的語法概念，沒有物件，只有單純的流程控制，對指標有似懂非懂的感覺。其實嚴格說起來，Turbo C++ 只能算是種 IDE，不算程式語言。</p>

<h2>Borland C++ Builder</h2>

<p>這也是 IDE，不過因為同樣的 C++ 語言在不同的 IDE 與不同的基本函式庫下會呈現出截然不同的個性，所以我就單列了。記得在我還是學生的時代，BCB 的出現帶來革命性的軟體開發方式，只要簡單拉一拉就可以有個像樣的視窗程式。當時蔚為風潮，我也趕流行玩了一陣子，不過也沒拿來寫過什麼東西就是。</p>

<h2>Visual Basic</h2>

<p>很簡單的程式語言。我曾經用 VB 寫過一個「光榮三國志臉譜瀏覽程式」的工具，可以讀取《三國志》四代、五代的頭像檔案。可惜現在原始碼與二進位檔都沒有留下，只有留下當時<a href="http://webbbs.gamer.com.tw/readSrhPost.php?brd=KOEI&amp;pos=448&amp;author=tzengyu&amp;keyword=">在巴哈姆特發佈時的帖子</a>。如果有人看到這篇文章，又碰巧有留當年的程式的話，歡迎跟我聯絡。也許哪天我心血來潮會再重寫一遍也說不定。 ;-)</p>

<h2>Common Lisp &amp; ML</h2>

<p>這兩個都是因為學校的課程而接觸的。剛開始學 Lisp，腦袋會打結，就是一層又一層的括號，常見的數學運算也都得換成前置式；不過作業寫到後來我還蠻喜歡寫 Lisp 的感覺。ML 也是，跟一般我們常見的 C-like 語法結構都不一樣。那時候我還蠻愛這兩個語言的，一直到畢業後的幾年間，我只要重灌電腦完要重新安裝軟體時，我就會把這兩個程式語言給裝進去，就像現在我會安裝 Python 一樣。</p>

<h2>ASP</h2>

<p>大四時接了一個學姊的家教網案子，那時候用的開發語言就是 ASP。不過說真的現在我對 ASP 都忘光光了。附帶一提，那個網站現在還活著，當然已經轉型了就是，不再是以媒介家教資訊為主。</p>

<h2>Java</h2>

<p>學生時代有寫過一些 Java applet，那時候的網頁很流行水波效果，幾乎十個個人網站有八個的 banner 都要來一下水波盪漾。Applet 也是淺嚐個大概而已，倒是 Java Servlet 因為工作的關係寫了蠻長久一段時間，從學生時代到退伍後都還有在接觸。話說事隔多年後，因為最近工作的關係，又開始跟 Java 打交道了。</p>

<h2>HTML &amp; JavaScript</h2>

<p>還在唸書時因為有協助維護一個購物網站，因此免不了要碰到 HTML 與 Java Script 的撰寫。當時那個購物網站使用的技術，有一部分是上面提到的 Java Servlet，另外也有用到 PHP 的部份。之後過了好幾年，有一個跟朋友合作開發 Facebook 遊戲的機會，在那次開發中又重新溫習了一次 Java Script，並且大量採用 Ajax 技術。可惜那個遊戲在發佈之前就胎死腹中了。</p>

<h2>PHP</h2>

<p>最主要就是上面提到的購物網站與 Facebook 遊戲這兩個案子用到，不過卻前前後後持續寫了蠻長久的一段時間。維護購物網站的時後基本上都還是程式碼硬幹，到了寫 Facebook 遊戲的時候，就有現成的框架了，我選了一個叫 CodeIgniter 的框架，大體上類似 ROR 的寫法。其實一開始選的是 CakePHP，比較完整，不過真的是太龐大了，所以才換成 CodeIgniter。此外，由於以前經常安裝討論區、部落格、Wiki、購物車等網站套件，其中許多是 PHP 寫的，常常需要 hack 部分代碼，因此對 PHP 還算蠻熟悉的，有陣子甚至拿 PHP 當 Shell Script 來使用，用來解決手邊的小問題。</p>

<h2>SQL</h2>

<p>說到網站程式就不能不提到資料庫。前前後後接觸過一些不同的資料庫，學生時代在 IBM 打工時是 DB2，前面提到的購物網站是 MySQL，進了遊戲公司之後，陸續又接觸到 PostgreSQL、Microsoft SQL Server，Oracle。其實單就 SQL 來看的話都大同小異，各資料庫 Server 之間最大的差異性還是在 Server 的管理與調校上，以及各種千奇百怪的程式介接函式庫寫法。</p>

<h2>Shell Script</h2>

<p>除了用 PHP 當 Shell Script 外，在我還在第一家遊戲公司時，由於是在 Linux 平台上開發的關係，也用 BASH 寫了不少方便日常工作或是開發的 Script。有少部分的代碼用 Perl 寫，用 Perl 寫起來很快，不過寫完看起來真的像天書一樣，真的是「寫完即丟」的語言。在 Windows 上，也曾經用 Batch 檔或是 Power Shell 寫過一些臨時性的小工具。</p>

<h2>C++</h2>

<p>進入遊戲公司後，幾乎就一直過著與 C++ 分不開的生活。早先是在 Linux 下寫 Server，能用的就是 Emacs 或是 Vim，後來換了公司，改用 Visual C++ 寫，一開始我還真的很不習慣，這麼複雜而多功能的介面，有時常常不曉得從哪邊開始下手。雖然在念書時學過，但我是從進遊戲公司之後，才真正重新認識了 C++，學到物件導向、Template、設計模式、重構等概念。當然，上面有些概念是跨語言通用的，不過因為 C++ 是我這幾年來長期接觸的語言，自然也成為前述幾個概念的學習媒介。</p>

<p>C++ 是個頗具爭議性的語言，他使用者多，但批評者更多，C 語言的陣營批評 C++ 不夠簡潔、純粹，STL 更是把許多工作變成讓人摸不著頭的黑箱；反之 Java 或 C# 的支持者又覺得 C++ 不夠完善，要寫個功能還要到處找函式庫，同個功能可能還有好幾種不同的函式庫，不同的實作與不同的使用概念，令人眼花撩亂。我自己是覺得，C++ 雖然亂，雖然我也對此感到困擾，但是也正因為他的兼容並蓄，使得各種各樣的想法與實作都能在上面獲得實踐。不過話說回來，對於產品開發而言，有時候工具還是單純點好。</p>

<h2>Auto Hotkey Script</h2>

<p>為了玩 Facebook 遊戲更「方便」而去學的程式。有寫了餐城（Restaurant City）的自動撿垃圾、自動到別人家評分，以及 Farmville 的自動種植、收割、耕地等功能，Mafia Wars 的連續任務。這些工具都是自娛，沒有對外釋出。隨著社群遊戲不斷的改版，這些工具也早就失效不能使用了。</p>

<h2>Lua</h2>

<p>在之前待過的公司中有用過，之後自己出來做的案子也有用。雖然如此，自己還是覺得對 Lua 的使用還不夠熟。曾經有寫過一個專案，使可以整合 C++ 與 Lua / Python / Squirrel 這三種 Script Language，目的是可以從 C++ 呼叫寫在 Script 的函式，也可以反過來。不過當初只寫了一個方向（C++ 呼叫外部），反過來的方向由於各 Script 語言存在的差異較大，自己的能力也不夠，就沒繼續開發下去了。</p>

<h2>Python</h2>

<p>這語言已經成為我這一兩年來的最愛了。在 Script Language 的領域中，一開始我是對 Lua 比較有興趣的，畢竟公司專案在用，而且 WOW 的 Custom UI 也都是用 Lua 撰寫，有 Billizard 的光芒加持，自然讓人不得不多看 Lua 幾眼。不過自從寫過 Python 的 Code 之後，我發現寫 Python 的過程可以獲得一種純粹的程式撰寫樂趣，我面對的是「程式所要解決的問題」本身，而不再是陣列、記憶體配置、指標、堆疊等等這些瑣碎的雜事。去年開發一個簡單的動畫編輯器，就是以 Python + wxPython 作的；而最早接觸 Python 的起點呢？喔，那是為了寫一個 Travian 的找資源點的工具，比較了幾個語言後發現用 Python 來抓網頁資料進行解析最為方便，於是就一頭踏入 Python 的思考領域了。</p>

<h2>NSIS (Nullsoft Scriptable Install System)</h2>

<p>最近才開始摸的東西，是用來寫安裝程式的語言。除了一開始入門門檻稍高外，不算太難，只要跨進去後剩下的就簡單了。之所以說一開始稍難，是因為最簡單的安裝軟體也要做許多事情，畢竟安裝軟體可不像其他語言只要秀秀 &#8220;Hello World&#8221; 就算完成第一個程式了。NSIS 也有 function 跟 macro，不過 function 沒有傳入參數，反正所有變數都是全域，也就不用傳入什麼了；如果真的需要傳入參數的話，倒是可以用 macro，雖然意義上不是，但程式碼看起來更接近傳參數的函式。這算是最近寫 NSIS 的一個小小心得吧。</p>

<h2>Objective-C</h2>

<p>這是目前正在進行的專案所用的語言。如果熟悉 C++/Java/PHP 這類 C-like 的語言，要學 Objective-C 真的很快。比較大的不同在於 message 的概念，前面的幾個語言不管是 function 或是 method，都是圓括弧呼叫的方式，在 Objectiv-C 中，函式的呼叫變成了訊息的傳遞，而且每個變數都必須寫出變數名字。剛開始看的確會有些彆扭不習慣，但是徹底改用「訊息傳遞」的角度去思考理解的話，其實 Objective-C 的這種寫法還蠻可愛與口語化的。</p>

<h2>後記</h2>

<p>看了一下 <a href="http://www.tiobe.com/index.php/content/paperinfo/tpci/index.html">TIOBE Programming Community Index for July 2011</a>，前十名的程式語言中，除了 C# 之外，有九個我都接觸過或多或長的一段時間。其實之前為了研究 XNA，也有稍微看過 C# 的 code，不過稍微看看也不算寫過就是。但是 Windows Phone 的開發免不了得靠 C#，或許再不久的將來有機會寫 C# 也說不定？</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文明帝國 V - 文化勝利＆單城挑戰心得]]></title>
    <link href="http://tzengyuxio.github.com/blog/2011/04/01/civ5-cultural-victory-and-one-city-challenge/"/>
    <updated>2011-04-01T12:46:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2011/04/01/civ5-cultural-victory-and-one-city-challenge</id>
    <content type="html"><![CDATA[<p>原發表於 C_Chat版@PTT。Oct 10, 2010。
以下內容與原發表內容相比有稍微做些文字與版面調整。</p>

<hr />

<p>昨天（2010/10/09）剛完成文化勝利，分享一下這次發展的心得。</p>

<p><img src="http://tzengyuxio.github.com/images/2011/2011-04-01-civ5-occ-berlin.jpg" alt="國土空照" /></p>

<p><img src="http://tzengyuxio.github.com/images/2011/2011-04-01-civ5-occ-berlin2.jpg" alt="首都圈特寫" /></p>

<p>首先，這次的遊戲除了文化勝利這個目標外，還加上了「單城挑戰」的附加條件，因此能夠運用的資源少的可憐，只能全心一意投入到文化中。勝利的時候已經是 2003 年了，那時候最大的對手阿拉伯早就都進入未來時代，而我才剛發展出坦克車而已&#8230;.Orz</p>

<p>先岔個題，「單城挑戰」是文明系列常有的「自虐」玩法。<strong>One City Challenge</strong>, 簡稱 OCC, 在開局設定詳細規則的畫面中也有這個選項。打開了這個選項後，不能生產 Settler, 打下別人的城也直接消失不見 (有沒有 Raize 到錢我沒注意，感覺錢沒變多，也沒訊息，打下的城直接就不見了)</p>

<p>底下是趁著還有印象時寫的心得</p>

<h3>一、先講社會體制</h3>

<p><img src="http://tzengyuxio.github.com/images/2011/2011-04-01-civ5-occ-social-policies.jpg" alt="文化勝利時最後的體制選擇" /></p>

<p>文化勝利的話，Freedom (自由) 與 Piety (虔信) 必點，尤其是下列幾樣重點：</p>

<ul>
<li><p><strong>Free Religion</strong>：免費獲得兩項政策。一定要留到最後用。</p></li>
<li><p><strong>Mandate of Heaven</strong>：50% 快樂轉文化。由於我只有一座城，人民普遍快樂，相當於每個回合多了十幾點文化。</p></li>
<li><p><strong>Free Speech</strong>：新政策所需文化 -25%。</p></li>
<li><p><strong>Constitution</strong>：擁有世界奇觀的程式 +100% 文化。</p></li>
</ul>


<p>另外，由於 <strong>Traditional</strong> (傳統) 對於首都的幫助非常大，所以 OCC 時也務必走傳統路線，畢竟首都就是國家嘛。</p>

<p>OCC 時，贊助政策也是必選之一，對於科技或部隊均有幫助，只是自己往往沒有那麼多錢可以贊助。</p>

<h3>二、文明的選擇</h3>

<p>跟文化相關的有三個</p>

<ul>
<li>Aztec,  消滅敵方單位可獲得文化獎勵           (窮兵黷武文化)</li>
<li>France, 獲得蒸汽機科技前，城市每回合 +2 文化 (開城種田文化)</li>
<li>Siam,   友好城邦提供的糧食和文化 +50%        (廣結善緣文化)</li>
</ul>


<p>不過我是隨機選擇的，選到的是日耳曼人。雖然跟文化無關，但是實際玩的結果卻是非常推薦，尤其是對於單城玩家。</p>

<p>為什麼呢？</p>

<p>德國的特色是打山寨時有機會得到對方加入，一開始我就靠著最初 Warrior 到處打山寨，有了一堆兵。五代的生產超耗時間成本，我又只有一座城，建築都來不及了，根本沒法生兵，因此這些雜牌軍隊幫助很大，帝國的維持都靠他們。</p>

<p>一直到了遊戲非常非常末期，蓋到沒東西蓋了，我才開始自己生兵汰舊。不過嚴格說來不是蓋到沒東西蓋了，而是因為科技太落後，沒有新的東西可蓋。</p>

<h3>三、科技發展</h3>

<p>由於燈泡有限，科技真的只能挑重點，到後面等個三、四十回合才有新科技都不誇張（史詩速度）</p>

<p>先講來源。首都能提供的燈泡少之又少，必須把腦筋動到其他地方：</p>

<ol>
<li>一個就是盟邦，贊助政策的 <strong>Scholasticism</strong> 可以從盟邦身上搾一點科研。</li>
<li>第二是大科學家，我的大科學家都是用來拿免費科技的，而贊助政策的 <strong>Educated Elite</strong> 可以從盟邦拿到偉人，也是機會之一。</li>
<li>第三是外交上的共同研究, 不過這太花錢了, 所以我都不答應。錢真的很少。</li>
</ol>


<p>接著談研究順序。細部來說的話，進了遊戲一開始就朝 <strong>Calendar</strong> (曆法) 前進。生產的話生產工人，工人完生產紀念碑。等紀念碑蓋好, Calendar 也差不多ok了 (史詩速度)。這時候就立刻蓋 <strong>Stonehenge</strong>, 每回合 +8 文化, 要衝文明勝利，非搶到不可。</p>

<p>Calendar 之後可以先點一些讓工人有事作的科技，像是捕獵、農業、採礦，請依照自己國土的情況而定。</p>

<p>點了一兩項後往 <strong>Writing</strong> (書寫) 前進, Writing 完之後 <strong>Philosophy</strong> (哲學)，接著就是 <strong>Theology</strong> (神學, 前置為曆法與哲學)。研發神學的目的在於，得到神學後你的國家就進入中古世紀 (Medieval Era) 了，這時候就可以點虔信政策，越早點虔信，國家就越容易快樂，進入黃金時代。</p>

<p>之後的科技主要是依照奇觀的需求而定，奇觀可以加文化又可以加偉人，因此能搶就盡量搶。</p>

<p>文化勝利真的很耗時間與腦力。玩完這場死了不少腦細胞，看來得暫時封印文明五一陣子了。雖然文明很好玩，但是這樣廢寢忘時、沒日沒夜的生活已經不是這把年紀可以承受的了（攤手）。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone 掃描 App 比較：CamScanner, Genius Scan, JotNot Scanner（下）]]></title>
    <link href="http://tzengyuxio.github.com/blog/2011/03/29/scanner-app-review-part-2/"/>
    <updated>2011-03-29T13:08:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2011/03/29/scanner-app-review-part-2</id>
    <content type="html"><![CDATA[<p>上篇：<a href="http://tzengyuxio.blogspot.com/2011/03/iphone-camscanner-genius-scan-jotnot.html">iPhone 掃描 App 比較：CamScanner, Genius Scan, JotNot Scanner（上）</a></p>

<p>這篇接著來看看掃描好的圖片，可以做哪些影像處理的調整。最理想的作法是，軟體提供一些預存的調整方式，例如「彩稿」、「黑白文件」、「板書」，我只要輕鬆依照文件類型選擇就可以了。有需要進一步調整的，再透過進階選單操作就好，但最好百分之九十以上都不要讓我進去進階選單。</p>

<p>CamScanner 的作法有點接近理想方式。在裁剪之前，左上方的按鈕可以選擇「色彩增強」模式，有五種方案：「普通」、「增強」、「增強並銳化」、「經濟模式」、「黑白模式」，可惜這些模式的名稱不夠直覺。裁剪完之後，有提供滑軸用來調整明暗跟對比。裁剪前的「色彩增強」模式無法預覽，裁剪後才知道結果，裁剪完後的明暗對比則會即時反應在畫面上，方便掌握。</p>

<p><img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-b01.jpeg" width="240" height="360">
<img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-b02.jpeg" width="240" height="360"><br/>
（左：裁剪前的色彩增強選項；右：明亮與對比的即時調整）</p>

<p><img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-b03.jpeg" width="240" height="360">
<img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-b04.jpeg" width="240" height="360"><br/>
（左：經濟模式；右：黑白模式）</p>

<p>Genius Scan 在這方面就很陽春，後製處理只有三個選項：「不處理」、「黑白文件」、「彩色文件」。</p>

<p><img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-b05.jpeg" width="240" height="360"></p>

<p>JotNot 的後製功能全部放在一起。他的分類方式是我所喜歡的：「收據」、「黑白文件」、「彩色文件或白板」、「亮顯文本或黑板」、「攝影」。預設分類往下拉，也可以看到對比調整等選項，甚至可以控制背景與加上時間戳記，算是功能最完整的。但是這些調整功能，包含對比，都必須設定好後進行處理，才看得到結果，不滿意的話還要回頭改對比，並不是很方便。</p>

<p><img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-b06.jpeg" width="240" height="360">
<img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-b07.jpeg" width="240" height="360">
<img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-b08.jpeg" width="240" height="360"></p>

<p>關於文件分享與輸出部分，如果以付費版本來看，基本上我所需要的都包含了。</p>

<p>CamScanner 有以下選項：</p>

<ul>
<li>打開方式 (iBooks 或其他可開啟 PDF 的 iPhone app)</li>
<li>電子郵件</li>
<li>Google Docs</li>
<li>BOX.net</li>
<li>Evernote</li>
<li>iDisk</li>
<li>Dropbox</li>
</ul>


<p>Genius Scan 可以輸出的選項有：</p>

<ul>
<li>電子郵件</li>
<li>iBooks 或其他可開啟 PDF 的 app</li>
<li>（付費版）Dropbox</li>
<li>（付費版）Evernote</li>
<li>（付費版）Google Docs</li>
</ul>


<p>JotNot 比較特別的是它可以直接傳真或列印，傳真好像要額外付費 In-App-Purchases，這兩個功能我都沒試過。其餘的分享功能都只有付費版才有：</p>

<ul>
<li>（付費版）可輸出成 PDFs、JPEGs、PNGs</li>
<li>（付費版）電子郵件</li>
<li>（付費版）Dropbox</li>
<li>（付費版）iDisk / WebDAV</li>
<li>（付費版）Evernote</li>
<li>（付費版）Box.net</li>
<li>（付費版）Google Docs</li>
</ul>


<p>另外一些有的沒有的雜項功能，在最後作個記錄：</p>

<ul>
<li>標籤功能，CamScanner 與 JotNot 都可以對文件下 Tag，除了內建的 Tag 之外也可自己新增。CamScanner 的 Tag 在中文版下也是中文名稱，很貼心。 <br/>
  <img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-b09.jpeg" width="240" height="360">
  <img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-b10.jpeg" width="240" height="360"><br/>
  （左：CamScanner 的預設標籤；右：JotNot 的預設標籤）</li>
<li>除了標籤外，JotNot 還可以對文件標示星號。</li>
<li>關於版面大小：

<ul>
<li>JotNot 可以設定整本的預設大小，如 A4，也可以在單張處理時分別指定；</li>
<li>CamScanner 能夠設定整本的版面大小，也可勾選「自動適應大小」，這樣每頁的圖檔掃多大就多大，比例不一。</li>
<li>Genius Scan 我找不到可以設定版面大小的地方。它也是唯一一套以預設方式掃完上篇範例後，兩頁頁面大小不同的軟體。<br/>
<img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-b11.jpeg" width="240" height="360"> <br/>
（Genius Scan 輸出後的頁面大小不一）</li>
</ul>
</li>
<li>JotNot 可以加入 PDF 密碼作為保護</li>
<li>CamScanner 可以對每一頁加入筆記。輸出 PDF 時，也可決定要不要將筆記內容一起存入 PDF 中。</li>
<li>CamScanner 有「快速批次掃描」的功能，不過我還沒試過。</li>
</ul>


<p>至於最後我選了哪套留在 iPhone 上呢？我只能說真的是「一分錢一分貨」了&#8230;&#8230;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone 掃描 App 比較：CamScanner, Genius Scan, JotNot Scanner（上）]]></title>
    <link href="http://tzengyuxio.github.com/blog/2011/03/29/scanner-app-review-part-1/"/>
    <updated>2011-03-29T10:57:00+08:00</updated>
    <id>http://tzengyuxio.github.com/blog/2011/03/29/scanner-app-review-part-1</id>
    <content type="html"><![CDATA[<p>iPhone 的照相機除了拿來隨手拍拍外，偶爾拿來拍些白板、書頁之類的，作為記事用途也是挺方便的。之前都是用 <a href="http://itunes.apple.com/tw/app/pdf-reader-file-scanner-file/id325924458?mt=8">PDF Reader</a> 將這些資料存起來，不過 PDF Reader 拍完照後必須手動調整頁面剪裁，當圖片一多就顯得麻煩，所以開始尋找專門的掃描軟體。</p>

<p>當然 iPhone 上的「掃描軟體」跟實際的掃描器不同，主要是能夠對拍好的照片進行自動辨識與剪裁。大概看了一下網路上的討論，主要的就以下三款（依字母序排列，左邊免費版，右邊付費版）：</p>

<ul>
<li><a href="http://itunes.apple.com/us/app/camscanner-free/id388627783?mt=8#">CamScanner Free</a> / CamScanner+ ($4.99, a.k.a 《掃描全能王》)</li>
<li><a href="http://itunes.apple.com/us/app/genius-scan/id377672876?mt=8">Genius Scan</a> / Genius Scan+ ($2.99)</li>
<li><a href="http://itunes.apple.com/us/app/jotnot-scanner-free/id310789464?mt=8#">JotNot Scanner Free</a> / JotNot Scanner Pro ($0.99)</li>
</ul>


<p>這邊也順便說說我對掃描軟體的基本要求：</p>

<ol>
<li>自動辨識文件邊緣的功能要準確</li>
<li>能針對不同文件類型作適當的影像調整</li>
<li>可以輸出到 Google Docs, Evernote, Dropbox 等雲端服務</li>
</ol>


<p>簡單說就是要<strong>「掃的方便、掃的清楚，掃完輕鬆丟到雲端上」</strong>，至於文件管理之類的，我用其他工具，就不勞煩這些掃描軟體了。</p>

<p>在進行比較之前，先說說這三款的共通之處：</p>

<ol>
<li>都有免費版與付費版，其中 CamScanner 的價格比另外兩套加起來還貴。不過 JotNot 的 $0.99 是特價，原價也是 $4.99，只是 JotNot 從去年(2010)九月開始特價到現在，不曉得還會不會調回原價？還是就這樣 0.99 下去了？</li>
<li>三款都有「Wifi 分享」功能，也就是能透過區網內桌機端的瀏覽器連上指定的 port 來下載文件。因為我不常用這功能，所以下面就沒進一步測試比較。</li>
<li>都可以透過直接拍照或是從相簿中載入的方式取得圖檔。</li>
<li>CamScanner 與 JotNot 都有中文，前者甚至有中文名字 《掃描全能王》。雖然說英文不是問題，但是有中文大大加分啊！</li>
</ol>


<p>以下的測試都是針對免費版。至於免費跟付費版的差異這邊就不贅述了，多半都是廣告與附屬功能。對於最主要的「邊緣辨識」與「影像調整」兩個功能，免費與付費都是一樣的。</p>

<p>先一起來看看基本介面吧（依序為 CamScanner, Genius Scan, JotNot Scanner）這三個的介面各有各的特色，三個我都喜歡。真要挑一個最高分的，大概是就 JotNot 了吧，他的介面設計跟 iPhone 本身的 APP 很一致，但是我不喜歡那個 Logo；Genius 的介面很簡潔，一進去就知道要做什麼；CamScanner 中規中矩，初次啟動還附了兩個文件作為說明檔案與範例，算是不錯的作法。</p>

<p><img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-a01.jpeg" width="240" height="360" title="CamScanner" >
<img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-a02.jpeg" width="240" height="360" title="Genius Scan" >
<img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-a03.jpeg" width="240" height="360" title="JotNot Scanner" ></p>

<p>接著是文件邊緣辨識的測試，為了公平起見，我用底下同樣的兩張圖作為輸入，分別看看在三款軟體中的辨識情況：</p>

<p><img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-a04.jpeg" width="240" height="360" title="Sample 1" >
<img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-a05.jpeg" width="240" height="360" title="Sample 2" ></p>

<p>首先是 CamScanner 的辨識結果。相對於其他兩套，CamScanner 沒有對齊的格線，只有邊緣的八個點，算是比較可惜，但是辨識的結果卻是三套中最好的。左圖有確實找到盒子邊緣，右圖的則是上方邊線錯誤。</p>

<p><img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-a06.jpeg" width="240" height="360" title="CamScanner with Sample 1" >
<img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-a07.jpeg" width="240" height="360" title="CamScanner with Sample 2" ></p>

<p>接著看看 Genius Scan。左圖只有辨識出主圖部分，盒子上方被忽略掉了。右圖辨識到的範圍則蠻令人匪夷所思&#8230;&#8230;</p>

<p><img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-a08.jpeg" width="240" height="360" title="Genius with Sample 1" >
<img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-a09.jpeg" width="240" height="360" title="Genius with Sample 1" ></p>

<p>最後是 JotNot Scanner。JotNot 的辨識能力介於中間。左圖的辨識跟 Genius Scan 一樣，只有主圖；右圖的辨識跟 CamScanner 一樣，都是上邊線錯誤。</p>

<p><img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-a10.jpeg" width="240" height="360" title="JotNot with Sample 1" >
<img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-a11.jpeg" width="240" height="360" title="JotNot with Sample 1" ></p>

<p>辨識出錯誤的範圍是難免的，因此也要順便看看調整邊界的功能方不方便。在這一點上，CamScanner 跟 JotNot 就很用心。前者在手指點下去要調整的時候，會出現小圓框特寫要調整的角角；後者點下去之後會自動針對該區域放大，以方便操作。兩種方式使用起來都很流暢。</p>

<p><img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-a12.jpeg" width="240" height="360" title="CamScanner Close-up 1" >
<img src="http://tzengyuxio.github.com/images/2011/2011-03-29-scan-app-a13.jpeg" width="240" height="360" title="JotNot Close-up" ><br/>
（左：CamScanner 的圓框特寫；右：JotNot 的自動放大）</p>

<p>寫到這邊有點長，先休息一下。<a href="http://tzengyuxio.github.com/blog/2011/03/29/scanner-app-review-part-2/">下一篇</a>將繼續從影像處理與文件分享兩個層面去做比較。</p>
]]></content>
  </entry>
  
</feed>
