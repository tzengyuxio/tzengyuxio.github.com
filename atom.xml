<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tzeng Yuxio]]></title>
  <link href="http://tzengyuxio.me/atom.xml" rel="self"/>
  <link href="http://tzengyuxio.me/"/>
  <updated>2012-04-01T09:31:12+08:00</updated>
  <id>http://tzengyuxio.me/</id>
  <author>
    <name><![CDATA[Tzeng Yuxio]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Google Analytics 也可以彈鋼琴]]></title>
    <link href="http://tzengyuxio.me/blog/2012/04/01/google-analytics-play-music-for-you/"/>
    <updated>2012-04-01T09:23:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/04/01/google-analytics-play-music-for-you</id>
    <content type="html"><![CDATA[<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-analytics-piano.png" alt="image" /></p>

<p>剛剛發現，Google Analytics 的「造訪」按鈕旁多了個音符記號。點下去後會有 Piano 與 Sitar 琴兩種樂器，選了之後就會看到下方折線圖的節點會按順序一個一個亮起來，並播放與節點高低對應的音階。</p>

<p>可惜我的折線圖不夠精采，撥出來的音樂平平淡淡，沒有直墜谷底或是步步高昇的激昂起伏。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 的開箱文系列]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/30/octopress-unboxing-collections/"/>
    <updated>2012-03-30T08:44:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/30/octopress-unboxing-collections</id>
    <content type="html"><![CDATA[<p>在安裝 Octopress 的時候，上網找了許多資料，也發現一個有趣的現象，就是大家的第一篇文章幾乎都是要對 Octopress 說幾句話。所以乾脆就來收集一下，看看大家的第一篇都寫些什麼？</p>

<p>以下按照時間順序排列：</p>

<hr />

<h4><a href="http://blog.xdite.net/posts/2011/10/07/migrate-to-octopress/">Migrate to Octopress - Blog.XDite.net</a></h4>

<ul>
<li>Oct 7, 2011 by <strong>XDite</strong></li>
<li>title: <code>migrate-to-octopress</code></li>
<li>這是我所能找到的最早的一篇。相信國內很多用 Octopress 架站的也或多或少受了這篇與 XDite 的影響。</li>
</ul>


<h4><a href="http://tzangms.com/2011/10/09/from-blogofile-to-octopress/">From blogofile to octopress - Oceanic / 人生海海</a></h4>

<ul>
<li>Oct 9, 2011 by <strong>tzangms</strong></li>
<li>title: <code>from-blogofile-to-octopress</code></li>
<li>tzangms 在這篇最後寫道：「不過, 我覺得一定有一些人一定換了這類的 blog 系統之後, 就減少了發文的動力, 像我就是 XD」hmm…我完全可以理解這種「為了想跑步而買新球鞋，買了之後反而減少了跑步動力」的心情 XD</li>
</ul>


<h4><a href="http://hack.sslab.co/blog/2011/10/14/hello/">Hello, Octopress - Hack × StrongSoft</a></h4>

<ul>
<li>Oct 14, 2011 by <strong>StrongSoft</strong></li>
<li>title: <code>hello</code></li>
<li>小小吐槽一下，雖然文中作者有說用了 Octopress 之後，就發現自己「回不去了」－－可是我看你後來還是<em>回去</em>用 blogger 繼續寫文章啊 XD</li>
</ul>


<h4><a href="http://swind.github.com/blog/2011/10/19/ban-jia-hou-di-1pian/">搬家後的第一篇文章-Octopress安裝筆記 - Corleonis</a></h4>

<ul>
<li>Oct 19, 2011 by <strong>swind</strong></li>
<li>title: <code>ban-jia-hou-di-1pian</code></li>
<li>這篇有許多在 Windows 上安裝的心得，有興趣的可以參考看看。</li>
</ul>


<h4><a href="http://blog.eddie.com.tw/2011/10/27/move-to-octopress/">搬到Octopress了 - 高見龍</a></h4>

<ul>
<li>Oct 27, 2011 by <strong>高見龍</strong></li>
<li>title: <code>move-to-octopress</code></li>
<li>我在安裝 Octopress 時有向作者請教過些問題，感謝他的熱心回應。</li>
</ul>


<h4><a href="http://hychen.wuweig.org/blog/2011/11/13/huan-dao-octopress/">換到octopress - 無為閣</a></h4>

<ul>
<li>Nov 13, 2011 by <strong>hychen</strong></li>
<li>title: <code>huan-dao-octopress</code></li>
<li>這篇文章中有一段 Script, 可以幫助作者減輕 Octopress 有一堆指令得記的壓力。</li>
</ul>


<h4><a href="http://blog.yorkxin.org/2011/11/20/hello-octology/">Hello! Octology - YORKXIN×YORKXIN</a></h4>

<ul>
<li>Nov 20, 2011, by <strong>Yu-Cheng Chuang (chitsaou)</strong></li>
<li>title: <code>hello-octology</code></li>
<li>從 WordPress 搬家過來的。這個網站還有許多篇與 Octopress 相關的文章（〈Octopress 搬家記〉系列），很值得參考。</li>
</ul>


<h4><a href="http://blog.hinablue.me/entry/move-to-octopress/">搬家到 Octopress - HINA::工程幼稚園</a></h4>

<ul>
<li>Nov 29, 2011, by <strong>hinablue</strong></li>
<li>title: <code>move-to-octopress</code></li>
<li>從 TextCube 搬家過來的，其實在這之前我沒聽過 TextCube (太孤陋寡聞了我)。</li>
</ul>


<h4><a href="http://whiteball.tw/blog/hello-world/">Hello world! - Whiteball</a></h4>

<ul>
<li>Dec 30, 2011, by <strong>Ching-Han Ho</strong></li>
<li>title: <code>hello-world</code></li>
<li>剛架好 Octopress 的朋友，在迫不及待準備要寫點東西發佈之前可以先看看這篇文章：〈<a href="http://whiteball.tw/blog/before-you-deploy-octopress/">在 Octopress 佈署出去前要注意的小地方</a>〉</li>
</ul>


<h4><a href="http://zespia.tw/blog/2012/01/14/hello-octopress/">Hello Octopress! - Zespia</a></h4>

<ul>
<li>Jan 14, 2012, by <strong>SkyArrow</strong></li>
<li>title: <code>hello-octopress</code></li>
<li>是 Octopress 主題 <a href="http://zespia.tw/Octopress-Theme-Slash/index_tw.html">Slash</a> 的作者。Slash 看上去簡約優雅，有許多人使用。更令人佩服的是，作者目前還只是個高中生！</li>
</ul>


<h4><a href="http://xoyo.name/2012/02/migrate-to-octopress/">博客跟风改用octopress - Mr Sunshine</a></h4>

<ul>
<li>Feb 7, 2012, by <strong>Zhiwei Xiao</strong></li>
<li>title: <code>migrate-to-octopress</code></li>
<li>也是從 WordPress 搬來的，文章中有提供一個將 Octopress 指令整合進 Emacs 的擴展。</li>
</ul>


<h4><a href="http://warwithinme.com/blog/2012/02/blogging-with-octopress/">开始用Octopress写Blog - War Within Me</a></h4>

<ul>
<li>Feb, 20, 2012, by <strong>WWM</strong></li>
<li>title: <code>blogging-with-octopress</code></li>
<li>我很喜歡這個網站的主題設計。作者的文字風格也很有趣，看得出來是宅宅星人（恭維的意味）。另外作者也是個 <a href="http://www.alfredapp.com/">Alfred</a> 愛好者！</li>
</ul>


<hr />

<p>可以看出，幾乎每篇的標題都有 Octopress 這字出現，唯一沒有的一篇是用了 Octology 這個字。而 title 的部份，也不脫 hello / move / migrate 等單字。有趣的是，其中有兩篇是用拼音來寫 title，對於懶得想英文標題句的人，倒也不失為一個簡單省腦的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 開箱首發文]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/29/octopress-unboxing/"/>
    <updated>2012-03-29T16:55:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/29/octopress-unboxing</id>
    <content type="html"><![CDATA[<p>前天與昨天兩天我都在修改 blogger 的 template－－起因是這樣：我在 Chrome 裝了個 <a href="https://chrome.google.com/webstore/detail/afoibpobokebhgfnknfndkgemglggomo">HTML5 Outliner</a> 的擴充，透過這個擴充，可以查看某個網頁的大綱排列是否如預想的一樣。很顯然，blogger 預設提供的幾個範本並沒有良好的 HTML5 大綱結構，於是我決定動手修改它。</p>

<p>原本以為這是個小工程，沒想到卻花了我整整一夜一天的時間在和 <strong>blogger template</strong> 的語法纏鬥。blogger template 用到了許多神乎奇技的技巧，可以在一個 template 檔案中同時提供桌面與行動等不同平台的版面；同時提供首頁、封存、標籤與單篇等不同文章組合的版面；可以提供各式各樣的參數讓你在後台中只要簡單選選顏色調整大小就可以做出各式各樣的變化。而這些全部都是在一個 XML 檔案裡就可以搞定。</p>

<p>但也正因如此，許多設定與參數都是牽一髮動全身，想改也不曉得從哪邊改才安全。偏偏 blogger template 的設定與參數目前還缺乏文件，網路上能找到的多半是舊版的 template 語法。很多時候看到一個 css class 你只能先用猜的猜他的用途，然後慢慢試誤。最後雖然整出了滿意的結果，也獲得了不少寶貴的經驗－－但心中卻冒出了一個更大的疑問：</p>

<p><strong>「我真的想要再和這個怪物繼續相處下去嗎？」</strong></p>

<p>念頭一起，手也沒停著。立刻就進了不久前才開的 <a href="http://tzengyuxio.tumblr.com/">Tumblr</a> 帳號琢磨了許久。「要轉到 Tumblr 嗎？」我這麼問著自己，然而心裡總覺得還有什麼缺憾沒有被滿足。這時腦袋閃過先前看過的 <a href="http://octopress.org/">Octopress</a>, 數週前第一眼看到時沒什麼興趣，這次決定給它個機會，動手裝個起來玩玩看。</p>

<p>裝的過程還算順利，但也不是完全一帆風順。我遇到了一個 <code>rb-fsevent</code> 編譯錯誤的問題，幸好在 <a href="http://newbsd.com/blog/2012/03/19/my-first-try-install-octopress-on-my-mac-os-x-lion-10-dot-7-3-and-some-thing-stuff/">這篇文章</a> 中找到了解決方式，重點在於一行 <code>xcode-select</code> 指令。</p>

<p>架設好了環境，索性又申請了一個新的域名，這下真的是徹頭徹尾搬了新家。鷹架都搭好了，剩下的就是充實內容了。希望新的環境能夠帶來更愉快的書寫體驗，也期許自己今年能夠有更充實文章記錄。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 與 Ruby 的模組安裝]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/29/install-module-in-python-and-ruby/"/>
    <updated>2012-03-29T08:39:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/29/install-module-in-python-and-ruby</id>
    <content type="html"><![CDATA[<p>其實這兩個語言的模組安裝都很簡單。不過我不是個成天都在安裝新玩意兒的人，偶爾因為業務需求或是心血來潮想要裝個模組，卻又忘了指令怎下，免不了得又得上網搜尋。</p>

<p>雖說資料不難找，但每次都問 google 也是折騰，索性自己記個筆記，將來若有需要時，翻自己筆記總比上網搜尋來得快速。</p>

<p>更重要的是，才不會因為上網問 google 然後<strong>開一堆網頁邊看又繼續邊開連結搞到最後開了一大堆自己好像有興趣但其實跟原本問題一點也不相干的文章</strong>。我真是太容易<em>分心</em>了。</p>

<h2>Python 的 easy_install</h2>

<p>Python 的 easy_install 人如其名，真的很 easy。比方說我看到 <a href="http://pypi.python.org/pypi/Markdown">Markdown 2.1.1 : Python Package Index</a> 這個套件想要安裝，我只要到終端機輸入下面指令就行了：</p>

<pre><code>$ easy_install markdown
</code></pre>

<p>要刪除模組的話則是輸入：</p>

<pre><code>$ easy_install -m markdown
</code></pre>

<p>easy_install 主要的功能就是安裝，如果需要進一步說明，可以參考</p>

<pre><code>$ easy_install --help
</code></pre>

<h2>Ruby 的 gem</h2>

<p>相比之下，Ruby 的 gem 就不僅僅只是個安裝工具，它是個完整的<strong>套件管理工具</strong>。例如我想安裝一個叫 <a href="http://toodledo.rubyforge.org/toodledo/">toodledo</a> 的套件，可以這麼輸入：</p>

<pre><code>$ gem install toodledo
</code></pre>

<p>或是指定版本號：</p>

<pre><code>$ gem install toodledo --version 1.3.8
</code></pre>

<p>移除的話是：</p>

<pre><code>$ gem uninstall toodledo
</code></pre>

<p>我想知道有沒有跟 markdown 相關的套件，我可以用如下方式尋找：</p>

<pre><code>$ gem list markdown --remote
</code></pre>

<p>如果沒有加上 <code>--remote</code>, 則會列出本機已經安裝的套件。</p>

<pre><code>$ gem list
</code></pre>

<p>更詳細的說明可以參考線上說明。</p>

<pre><code>$ gem help
</code></pre>

<h2>在 Mac 上</h2>

<p>上面這兩個工具程式在 Mac OS X 中都是預設已經安裝在系統中的，省了不少麻煩。安裝的過程如果有遇到權限問題，那麼就在上面所列的指令最前面加上 <code>sudo</code> 再執行就好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ls Color on Mac]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/29/ls-color-on-mac/"/>
    <updated>2012-03-29T01:44:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/29/ls-color-on-mac</id>
    <content type="html"><![CDATA[<p><img src="http://tzengyuxio.me/images/2012/2012-03-29-ls-color.png" alt="ls color" /></p>

<p>昨天突然心血來潮想到來替 ls 上個顏色。以前用 Linux 時都有很漂亮的 ls 輸出，除此之外也會認真打造個人的 shell 環境。怎知開始用 Mac 兩年多來，都忘記來把 shell 好好調教一番，幾乎一直維持著原汁原味。</p>

<p>是說原本預設的也夠我用了就是，不過有個多采多姿的 ls 輸出不僅能提昇工作效率，光看著心情也會好起來。</p>

<h2>開啟顏色輸出</h2>

<p>在 Linux 要開啟顏色輸出是透過 <code>ls --color</code> 指令。而在 Mac 或 BSD 上則是使用 <code>ls -G</code>。</p>

<p>當然，每次都加這參數也是麻煩。寫程式的都是懶人，所以我在 <code>~/.bashrc</code> 檔案中加入下面這行設定：</p>

<pre><code>alias ls='ls -GF'
</code></pre>

<p>要說明一下的是，上面的設定除了開啟顏色輸出外，還加了 <code>-F</code> 這個能夠在 ls 輸出中加入識別符號的參數。像是目錄的名字後面會加上 &#8216;/&#8217;, 可執行檔會加上 &#8216;*&#8217;,  符號連結 (symbolic link) 會加上 &#8216;@&#8217; 等等。</p>

<h2>顏色的指定</h2>

<p>關於顏色的指定，Linux 使用 <code>LS_COLORS</code> 環境變數，BSD 則是使用 <code>LSCOLORS</code>。兩者的設定方式也不同，這部份網路上資料很好找，就不贅述。</p>

<p>直接說結果，我所使用的顏色組合如下：</p>

<pre><code>export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD
</code></pre>

<p>將這行加入 <code>~/.bash_profile</code> 就可以享受美美的 ls 了。這個配色設定是從 <a href="https://github.com/seebi/dircolors-solarized/issues/10">LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD</a> 這網頁參考來的。</p>

<p>附帶一提，Mac 或 BSD 的 <code>LSCOLORS</code> 參數只能指定預設檔案類型的顏色，比較常見的類型只有檔案、可執行檔、符號連結三種。Linux 的 <code>LS_COLORS</code> 除了上述這些之外，還可以針對附檔名作指定，像是把 .zip .rar .tgz 等壓縮檔設成黃色；然後 .avi .m4v .mov 等影片檔設成洋紅色之類的。</p>

<h2>補充資訊</h2>

<ol>
<li>BSD 下還有一個環境變數 <code>CLICOLOR</code>, 在 <code>~/.bash_profile</code> 中加入 <code>export CLICOLOR=1</code> 可以得到跟 <code>ls -G</code> 一樣的效果。</li>
<li>如果想要自己配色的，<a href="http://geoff.greer.fm/lscolors/">LSCOLORS Generator</a> 這個網頁提供了一個方便的配色小工具。</li>
<li>喜歡 Solarized 的話，<a href="https://github.com/seebi/dircolors-solarized">seebi/dircolors-solarized</a> 是一個將 Solarized 延伸到 ls color 的專案。可惜只適用在 <strong>GNU ls</strong>, 也就是 Linux 系統上的 ls。</li>
<li>如果你無論如何也想在 Mac 上看到壓縮檔、影片檔、音樂檔等不同類型檔案也有不同顏色，或是想要使用上面提到的 Solarized ls 配色，那麼可以考慮安裝 <a href="http://www.gnu.org/software/coreutils/">Coreutils - GNU core utilities</a> 這套件。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON for Vim]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/26/json-for-vim/"/>
    <updated>2012-03-26T10:42:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/26/json-for-vim</id>
    <content type="html"><![CDATA[<p>剛剛在 Terminal 下開了個新檔要來寫 JSON, 發現 Vim 竟然沒有支援 JSON 的 FileType 與 syntax highlight。想說這問題應該很多人遇過，因此上網找了一下，找到這個 script: <a href="http://www.vim.org/scripts/script.php?script_id=1945">JSON.vim</a>。</p>

<p>不過看了下安裝說明，感覺麻煩了點。於是又找到了<a href="http://www.codeography.com/2010/07/13/json-syntax-highlighting-in-vim.html">這篇文章</a>，只要到 <code>~/.vimrc</code> 加入下面這行，就可以讓 JSON 檔案套用 JavaScript 的 syntax highlight, 簡單明瞭。</p>

<pre class="prettyprint"><code>autocmd BufNewFile,BufRead *.json set ft=javascript</code></pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[關於 Mac 快速檢視 (Quick Look) 的幾個小秘訣]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/11/tips-for-mac-os-x-quick-look/"/>
    <updated>2012-03-11T18:17:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/11/tips-for-mac-os-x-quick-look</id>
    <content type="html"><![CDATA[<p>我用了 Mac 好一段時間了才知道，原來對檔案直接按空白鍵可以開啟快速檢視 (Quick Look)；又隔了好一段時間，才又知道原來快速檢視除了內建的之外，還可以加上些外掛以增加支援檔案類型。下面是一些我所用到的 QuickLook 相關技巧整理。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-03-11-quicklook-of-zip.png" alt="BetterZip Plugin" /></p>

<h2>在 Terminal 下開啟快速檢視</h2>

<p>除了在 Finder 中按空白鍵外，有時候在 Terminal 底下工作時，也可以利用指令來開啟快速檢視，這樣可以減少鍵盤滑鼠的切換以提升效率。開啟的指令如下：</p>

<pre><code>$ qlmanage -p [FILE]
</code></pre>

<p>把 [FILE] 替換成要開啟的檔名即可。不過這指令也不算短，要更方便的話，可以在 <code>~/.bashrc</code> 中加入以下指令別名 (alias)，這樣只要輸入 <code>ql [FILE]</code> 就可以立刻檢視了：</p>

<pre><code>alias ql='qlmanage -p'
</code></pre>

<p>對了，設定檔 .bashrc 預設在 Mac OS X 中是不起作用的，可以參考<a href="http://coder.aqualuna.me/2012/03/bashrc-in-mac-terminal-os-x-lion.html">這篇文章</a>來讓 .bashrc work。</p>

<h2>增加支援檔案類型的 Plugin</h2>

<p>快速檢視本身支援文字、圖片、音樂、影片等基本檔案格式，至於其他不支援的格式則只會顯示一個大大的檔案 icon。透過以下 Plugin 可以增加快速檢視支援的檔案格式，安裝很簡單，只要將下載下來的 <code>*.qlgenerator</code> 檔案放到下面路徑之一：</p>

<ul>
<li><code>(Macintosh HD)/Library/QuickLook/</code> 安裝給本機的所有使用者</li>
<li><code>~/Library/QuickLook/</code> 只安裝給自己使用</li>
</ul>


<h3>壓縮檔 (Archives)</h3>

<p><a href="http://macitbetter.com/BetterZip-Quick-Look-Generator/">BetterZip 2 - The Next Generation of Archiving</a></p>

<p>上面這個外掛預設是暗色背景的，如果喜歡白色背景的（如同文章開頭那張圖），可以考慮下面這個修改版本：</p>

<p><a href="https://github.com/farfanoide/BetterZ-QuickLook-plugin-theme-for-Lion">farfanoide/BetterZ-QuickLook-plugin-theme-for-Lion</a></p>

<h3>程式碼 (Code)</h3>

<p><a href="http://code.google.com/p/qlcolorcode/">qlcolorcode - A Quick Look plugin for source code with syntax highlighting - Google Project Hosting</a></p>

<h3>CSV 檔案</h3>

<p><a href="http://code.google.com/p/quicklook-csv/">quicklook-csv - A QuickLook plugin to quick look CSV files for Mac OS X 10.5+ - Google Project Hosting</a></p>

<h2>快速檢視文字檔案時，可以複製文字</h2>

<p>按空白鍵檢視文字檔案內容很方便，可是有時候如果想要複製文字，就得另外再開啟文字編輯，相當麻煩。在 Terminal 下輸入以下指令，可以讓你在快速檢視文字檔時，也能選取想要的片段，然後按 Cmd+C 複製出來。</p>

<pre><code>$ defaults write com.apple.finder QLEnableTextSelection -bool TRUE; killall Finder
</code></pre>

<h2>用不同的應用程式開啟</h2>

<p>在快速檢視時，右上方會有個按鈕讓你以預設關連的應用程式開啟。如果你想要用其他的應用程式開啟，例如用 Photoshop 開啟圖檔，那麼只要按著右上方按鈕不放，就會出現選單供你選擇想要開啟的應用程式。</p>

<h2>以全螢幕開啟快速檢視</h2>

<p>選取檔案，然後按下 <code>Cmd+Opt+Y</code>，就可以直接以全螢幕方式進入快速檢視，這對影像或是影片格式相當有用。</p>

<p>其實也可以在按著 Opt 的狀態下按空白鍵進入全螢幕的快速檢視，不過像我有安裝 Alfred, <code>Opt+空白鍵</code> 預設會啟動 Alfred 的輸入視窗，因此就沒辦法用來開啟快速檢視了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[設定 Mac Terminal 下的 .bashrc]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/11/dot-bashrc-in-mac-terminal/"/>
    <updated>2012-03-11T09:33:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/11/dot-bashrc-in-mac-terminal</id>
    <content type="html"><![CDATA[<p>今天想要替 Terminal 下一些常用的指令建立 alias, 我按照以前在 FreeBSD/Linux 的習慣，直接進 Terminal，在家目錄 (<code>~/</code>) 下寫了個 <code>.bashrc</code>, 重開 Terminal, 剛剛寫的 alias 卻沒有任何反應。</p>

<p>後來在家目錄下先建了個檔案 <code>.bash_profile</code>, 檔案內容如下：</p>

<pre class="prettyprint"><code>if [ -f ~/.bashrc ]; then
    source ~/.bashrc
fi
</code></pre>


<p>這樣原本寫在 <code>.bashrc</code> 裡的指令稿就會被讀取並且發揮作用了。補充說明，我的作業系統版本為 <strong>Mac OS X Lion (10.7)</strong>。</p>

<p>關於 <code>.bash_profile</code> 與 <code>.bashrc</code> 的差別，簡述如下：</p>

<h3>.bash_profile</h3>

<p>輸入帳號密碼登入時，不論遠端或本地，都會執行此設定檔。</p>

<h3>.bashrc</h3>

<p>在已經登入的情況下，開啟終端機視窗（如 Gnome 的 xterm），在命令提示符號出現前，就會先執行 .bashrc 內的指令。</p>

<p>不過 Mac OS X 的行為是上述流程的例外，詳細可參考本文最後面的連結。</p>

<hr />

<p>參考資訊：</p>

<p><a href="http://macfidelity.de/2008/07/02/mac-customizing-terminal-in-mac-os-x-105/">Customizing Terminal in Mac OS X 10.5 | macfidelity</a></p>

<p>上面這篇文章中的步驟比較多，甚至還要進 Terminal 的「偏好設定」畫面去修改打開 Shell 的指令。不過我自己的操作結果是就算沒有設定那些指令也沒關係，只要有包含文章中那段代碼的 <code>.bash_profile</code>, 就可以讀取 <code>.bashrc</code> 了。</p>

<p>關於 <code>.bash_profile</code> 與 <code>.bashrc</code> 的差別，請見下面這篇文章。</p>

<p><a href="http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html">.bash_profile vs .bashrc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solarized for google-code-prettify]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/11/solarized-for-google-code-prettify/"/>
    <updated>2012-03-11T07:20:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/11/solarized-for-google-code-prettify</id>
    <content type="html"><![CDATA[<p><a href="http://tzengyuxio.me/blog/2011/08/07/embeded-code-with-google-code-prettify/">我用 google-code-prettify 來做 blog 文章中的代碼上色</a>，google-code-prettify 本身有<a href="http://google-code-prettify.googlecode.com/svn/trunk/styles/index.html">附上幾個 Color Scheme</a>, 然而除了預設的之外，都是以暗色背景為主。</p>

<p>昨天心血來潮將 <a href="http://ethanschoonover.com/solarized">Solarized</a> 這個 Color Scheme 移植到 google-code-prettify 下，同樣也是 dark/light 雙版本。關於 Solarized 的介紹可以參考<a href="http://coder.aqualuna.me/2012/02/zenburn-solarized.html">這篇文章</a>。</p>

<h2>下載 / Download</h2>

<ul>
<li>Solarized Light

<ul>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.css">Normal version</a></li>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.min.css">Minified version</a></li>
</ul>
</li>
<li>Solarized Dark

<ul>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.css">Normal version</a></li>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.min.css">Minified version</a></li>
</ul>
</li>
</ul>


<h2>代碼 / Code</h2>

<h3>Solarized Light</h3>

<p>正常排版版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#657b83}
@media screen{
    .str{color:#2aa198}
    .kwd{color:#859900}
    .com{color:#93a1a1}
    .typ{color:#b58900}
    .lit{color:#2aa198}
    .pun,.opn,.clo{color:#657b83}
    .tag{color:#268bd2}
    .atn{color:#93a1a1}
    .atv{color:#2aa198}
    .dec,.var{color:#268bd2}
    .fun{color:red}
}
@media print,projection{
    .str{color:#060}
    .kwd{color:#006;font-weight:bold}
    .com{color:#600;font-style:italic}
    .typ{color:#404;font-weight:bold}
    .lit{color:#044}
    .pun{color:#440}
    .tag{color:#006;font-weight:bold}
    .atn{color:#404}
    .atv{color:#060}
}
pre.prettyprint{padding:5px;border:1px solid #888;background:#fdf6e3}
ol.linenums{margin-top:0;margin-bottom:0}
li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}
li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}
</code></pre>


<p>最小化版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.min.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#657b83}@media screen{.str{color:#2aa198}.kwd{color:#859900}.com{color:#93a1a1}.typ{color:#b58900}.lit{color:#2aa198}.pun,.opn,.clo{color:#657b83}.tag{color:#268bd2}.atn{color:#93a1a1}.atv{color:#2aa198}.dec,.var{color:#268bd2}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:5px;border:1px solid #888;background:#fdf6e3}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}
</code></pre>


<h3>Solarized Dark</h3>

<p>正常排版版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#839496}
@media screen{
    .str{color:#2aa198}
    .kwd{color:#859900}
    .com{color:#586175}
    .typ{color:#b58900}
    .lit{color:#2aa198}
    .pun,.opn,.clo{color:#839496}
    .tag{color:#268bd2}
    .atn{color:#586175}
    .atv{color:#2aa198}
    .dec,.var{color:#268bd2}
    .fun{color:red}
}
@media print,projection{
    .str{color:#060}
    .kwd{color:#006;font-weight:bold}
    .com{color:#600;font-style:italic}
    .typ{color:#404;font-weight:bold}
    .lit{color:#044}
    .pun{color:#440}
    .tag{color:#006;font-weight:bold}
    .atn{color:#404}
    .atv{color:#060}
}
pre.prettyprint{padding:5px;border:1px solid #888;background:#002b36}
ol.linenums{margin-top:0;margin-bottom:0}
li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}
li.L1,li.L3,li.L5,li.L7,li.L9{background:#111}
</code></pre>


<p>最小化版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.min.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#839496}@media screen{.str{color:#2aa198}.kwd{color:#859900}.com{color:#586175}.typ{color:#b58900}.lit{color:#2aa198}.pun,.opn,.clo{color:#839496}.tag{color:#268bd2}.atn{color:#586175}.atv{color:#2aa198}.dec,.var{color:#268bd2}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:5px;border:1px solid #888;background:#002b36}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#111}
</code></pre>


<h2>範例 / Example (in dark version)</h2>

<pre class="prettyprint lang-java"><code>import java.util.Map;
import java.util.TreeSet;

public class GetEnv {
  /**
   * let's test generics
   * @param args the command line arguments
   */
  public static void main(String[] args) {
    // get a map of environment variables
    Map&lt;String, String&gt; env = System.getenv();
    // build a sorted set out of the keys and iterate
    for(String k: new TreeSet&lt;String&gt;(env.keySet())) {
      System.out.printf("%s = %s\n", k, env.get(k));
    }
  }    
}
</code></pre>


<hr />

<p>網路上有找到<a href="http://subtech.g.hatena.ne.jp/h2u/20110408/1302198319">這篇也有 solarized color for google-pretty-code</a>, 不過只有暗色背景的版本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BOM (Byte Order Mark) 與 UTF-8]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/09/bom-byte-order-mark-and-utf-8/"/>
    <updated>2012-03-09T20:28:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/09/bom-byte-order-mark-and-utf-8</id>
    <content type="html"><![CDATA[<p>一些個人筆記，省得以後每次遇到還得重新上網搜尋做功課。</p>

<hr />

<p>Byte Order Mark 在 UTF-16 Big Endian 是 &#8220;FE FF&#8221;，Little Endian 是 &#8220;FF FE&#8221;。其中 Mac 系統主要是 Big Endian, PC 系統則是使用 Little Endian。</p>

<p>UTF-8 由於本身特性，不管 Big Endian 或 Little Endian，其 BOM 一律為 &#8220;EF BB BF&#8221;。</p>

<p>不過個人建議，文字文件要儲存的話，<strong>盡量以 UTF-8 格式存</strong>。而以 UTF-8 儲存的文件，<strong>盡量不要放 BOM 進去</strong>。為什麼呢？因為 UTF-8 的一個特色就是能與 ASCII 系統相容，如果文件中沒有包含非拉丁字元的話；要是放了 BOM 進去，就破壞了這相容性。</p>

<h2>在 VIM 中的 BOM 相關操作</h2>

<h3>加入 BOM</h3>

<pre><code>:set bomb
</code></pre>

<h3>移除 BOM</h3>

<pre><code>:set nobomb
</code></pre>

<h3>查詢 BOM 狀態</h3>

<pre><code>:set bomb?
</code></pre>

<h2>在 Terminal / Console 下的 BOM 相關操作</h2>

<h3>查詢包含 UTF-8 BOM 的檔案</h3>

<pre><code>$ grep -rIl $'^\xEF\xBB\xBF' [FILE]
</code></pre>

<h3>找出並移除 UTF-8 的 BOM</h3>

<pre><code>$ grep -rIl $'^\xEF\xBB\xBF' [FILE] | xargs sed -i 's/^\xEF\xBB\xBF//;g'
</code></pre>

<h3>編碼的轉換</h3>

<pre><code>$ iconv -f [FROM_ENCODING] -t [TO_ENCODING] [FILE]
</code></pre>

<p>其中 ENCODING 的部份可以是以下數值：</p>

<ul>
<li>UTF-8 UTF8</li>
<li>UTF-16BE</li>
<li>UTF-16LE</li>
<li>UCS-2BE UNICODEBIG</li>
<li>UCS-2LE UNICODELITTLE</li>
</ul>


<p>更多 ENCODING 代碼可以透過 <code>iconv --list</code> 查詢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Byword, iA Writer 以及一些其他的]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/10/markdown-editor/"/>
    <updated>2012-02-10T03:00:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/10/markdown-editor</id>
    <content type="html"><![CDATA[<p>我發現我是編輯器控。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-02-10-iawriter.png" alt="image" /></p>

<p>前些時日<a href="http://coder.aqualuna.me/2011/10/asciidoc-markdown-restructuredtext.html">研究了幾個輕量級標記語言</a>，最後情定 Markdown，結果沒多久就開始在想「Markdown 要用什麼編輯器來寫比較好？」雖然已經有了 Vim 這個強力武器，也支援 Markdown（沒有什麼語法是 Vim 支援不了的），但總是想找個更體面點的編輯器來感受一下輕量級標記語言之美，最好是即便在純文字模式下也能清楚標示出 Markdown 的語法。</p>

<p>經過簡單的搜尋，適合 Markdown 的編輯器大概鎖定了 <a href="http://bywordapp.com/">Byword</a> 與 <a href="http://www.iawriter.com/">iA Writer</a> 這兩套。然而這兩套軟體都沒有試用下載，價格也不算低，我不想兩套都買，只好上網找些比較的文章來看，看是哪一套軟體較好。這兩套軟體有個共同的特色，就是具有專注模式（focus mode），最近的編輯器市場似乎有個潮流，好幾套編輯器都強調介面的簡化，讓使用者專注在文字輸入 (distract-free writing) 上。果然分心是打文章的大敵，一不小心就會忘記寫到哪邊，然後一篇短短的文章寫個老半天這樣（笑）。</p>

<p>以專注於文章撰寫為訴求的編輯器，除了 Byword 與 iA Writer 外，比較有名的還有 <a href="http://www.hogbaysoftware.com/products/writeroom">WriteRoom</a> 以及 <a href="http://www.ommwriter.com/en/">OmmWriter</a>，找資料時也跟著看了不少評論，底下就一起寫一下介紹與心得吧。</p>

<h2>WRITEROOM</h2>

<p>這一套應該是最早出現的專注型編輯器吧，首頁的副標寫的就是 &#8220;Distraction free writing.&#8221; 有 Mac 和 iPhone 版，Mac 版在寫這篇文章時賣 $9.99，不過在許多文章中看到他的歷史價格是 $25，也許因為是最早推出的專注型編輯器的關係吧，那時還缺乏競爭對手。</p>

<p>另外，WriteRoom 似乎尚未支援 Markdown 語法的樣子，我在 App Store 的敘述中和官網的介紹裡都沒有看到。這樣的話，反而有語法標記的 Vim 還來得有用些，而且 Vim 也可以切換到 WriteRoom 模式（<a href="http://www.vim.org/scripts/script.php?script_id=2231">方法一</a>, <a href="http://mutelight.org/articles/vim-is-writeroom-level-2">方法二</a>）</p>

<h2>OMMWRITER</h2>

<p>這是很特別的一款編輯器，他讓使用者在輸入文字時，能夠完全進入到一個<strong>禪的境界</strong>。當使用者在打字時，除了簡單卻不擾人的打字音效外，背景同時也會播放輕柔淡雅的音樂。介面簡單，可以做些簡單的字型與背景設定，平常打字時介面則會自動隱藏。本文所介紹的編輯器都是以 MAC 為主，不過 OmmWriter 也有 PC 版本，都可以免費下載。</p>

<p>不過我不喜歡他的編輯區外面有個虛線的框，除此之外，我工作通常時也不需要背景音樂。對了，這一款也沒有支援 Markdown 語法。如果不是因為 Markdown 這點，我想免費且跨平台的 OmmWriter 應該是不錯的選擇。</p>

<h2>BYWORD</h2>

<p>這款在 WriteRoom 和 iA Writer for iPad 之後推出，算是結合了 WriterRoom 的專注模式與 iA Writer 優雅介面兩方面特色。售價 $9.99, 還算平易近人。我喜歡 Byword 的雙色模式，可以選擇要以白色或是黑色作背景。Byword 的 focus 模式作的也比 iA Writer 好，除了可以自己選擇 focus 的範圍（一句、一段或幾行）外，focus 模式時上下邊緣漸層淡出的設計也很別緻。</p>

<p>Byword 支援 Rich Text 與 Markdown 兩種格式。不過老實說，雖然從 Windows 的小作家就有 Rich Text 了，可是我用了這麼多年電腦，真的很少見到（更不用說自己寫了）Rich Text 格式的文件，要嘛就純文字，要嘛就 Word/HTML, Rich Text 實在是個不上不下的格式。</p>

<p>我喜歡 Byword 的地方還有一點，就是他可以直接將 Markdown 輸出成 HTML, 這對於寫 blog 很方便，寫好後轉換貼上就好。iA Writer 雖然也可以寫 Markdown, 但就沒辦法像 Byword 這樣直接轉換。不過我最後還是選了 iA Writer, 為什麼呢？</p>

<h2>IA WRITER</h2>

<p>我對 iA Writer 第一眼的感覺就是它的 Markdown 排版是很棒的設計。與其他軟體所不同，iA Writer 利用它左邊的空白處（Margin）來處理標題與清單列表的前綴標記，相當有創意。</p>

<p>在此引用一下 <a href="http://brooksreview.net/2011/05/ia-writer/">Review: iA Writer for Mac</a> 這篇文章中的一段話，作為 Byword 與 iA Writer 的比較：</p>

<blockquote><p>Byword is for people that know they want to do all their writing in one app. Writer is for people that just want to open something and write.（Byword 是給那些清楚自己要在一個 app 中完成所有撰寫工作的人。而 Writer 則是設計給想要打開個什麼然後就開始寫字的人。）</p></blockquote>

<p>iA Writer 看上去是個很簡單的編輯器，它也真的很簡單，簡單卻又不簡單。這話怎麼說呢？iA Writer 完全沒有任何自定項目：沒有偏好設定視窗；不能改變字型、背景、顏色；只有支援 Markdown, 還強迫一定得是 Markdown，不能取消標記功能；不管視窗拉多寬，每行固定 64 個字母寬。完全沒有妥協餘地。</p>

<p>然而在這麼限制重重的環境下，iA Writer 卻能帶給我一種「嗯，就是這麼剛好。」的感覺，在 iA Writer 裡面打字似乎是天經地義極為自然的一件事，一點都不會想要去改動什麼設定。它微白又略略帶點紋路的背景，配上青藍色閃爍的游標，順眼而不搶眼。整個程式的設計都是圍繞在打字本身的體驗上，至於各種花俏功能、排版的格式樣式、巨集或是插入範本、分割視窗遠端編輯什麼的，通通都不管。</p>

<p>當然沒有程式是完美的，然而 iA Writer 已經很接近完美了。前面說過，我喜歡 Byword 的雙色模式，不過用了 iA Writer 後，覺得雙色背景的選擇也是多餘。而 Byword 可以直接輸出成 HTML 這個功能，也可以透過<a href="http://coder.aqualuna.me/2012/02/os-x-markdown-html.html">在 Automator 新增服務</a>的方式，讓 iA Writer 也能直接輸出 HTML 結果。</p>

<p>實際使用一陣子後，iA Writer 倒是有兩個地方我覺得可以再改進的。一個是 Markdown 的連結模式區別不夠明顯，同顏色的連結與連結文字混淆在正文中容易造成閱讀不便。另外一個可改進之處是中文與英文文字對齊方式不同，中文預設對齊字型的降部（Descenders）底緣，如果一行中有英文的話，該行內的中文字會與英文一樣對齊基線（Baseline），這使得中英夾雜的文章中看起來會有行高不同的錯覺。</p>

<p>iA Writer 在 App Store 的定價 $19.99，比起 Byword 倒是高了不少。不過最近似乎是在促銷，只要 $8.99，反倒比 Byword 便宜了些。喜歡用純文字寫文章的朋友，不妨考慮看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[光鮮亮麗背後的真相]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/07/the-truth-is-out-there/"/>
    <updated>2012-02-07T15:28:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/07/the-truth-is-out-there</id>
    <content type="html"><![CDATA[<p>今天看到很多人都在傳這一張圖片：<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-nNDkxbLYxhE/TzDT_oeil8I/AAAAAAAAJR0/pAl3R9IUK_g/s1600/340307_265973053470862_147881708613331_595080_640973686_o.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-nNDkxbLYxhE/TzDT_oeil8I/AAAAAAAAJR0/pAl3R9IUK_g/s1600/340307_265973053470862_147881708613331_595080_640973686_o.jpg" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;"><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td class="tr-caption" style="font-size: 13px;">source: www.7even.com.tw</td></tr></tbody></table><div style="font-size: medium; text-align: left;"></div></td></tr></tbody></table>乍看好像邪惡組織比較吸引人。但是別忘了，那些擁有偉大目標、為了實現夢想沒日沒夜地努力、即使失敗也不氣餒，能夠指揮組織行動，最後還笑容滿面的，都是<strong>邪惡組織的頭目級領導人物</strong>啊！真正加入邪惡組織後，底下就是最血淋淋的職場寫照：<br /><br /><div class="separator" style="clear: both; text-align: center;"><object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://0.gvt0.com/vi/35Kc4jM2Sew/0.jpg" height="266" width="320"><param name="movie" value="http://www.youtube.com/v/35Kc4jM2Sew&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><embed width="320" height="266"  src="http://www.youtube.com/v/35Kc4jM2Sew&fs=1&source=uds" type="application/x-shockwave-flash"></embed></object></div><br /><br />少年們，醒醒吧！<br /><a href="http://wiki.komica.org/wiki3/?%E6%88%90%E5%8F%A5%2F%E5%88%A5%E5%86%8D%E7%9B%B8%E4%BF%A1%E6%B2%92%E6%9C%89%E6%A0%B9%E6%93%9A%E7%9A%84%E8%AA%AA%E6%B3%95%E4%BA%86">別再相信沒有根據的說法了</a>！<br /><br /><em> * * </em><br />以下是更多誘拐有為年輕人加入邪惡組織的宣傳稿：<br /><ul><li><a href="http://n.yam.com/cardu/fn/201202/20120201058967.html">智慧科技帶動遊戲熱　逾八成想轉戰遊戲業-財經新聞-yam蕃薯藤新聞</a></li><li><a href="http://www.nownews.com/2012/01/31/91-2780266.htm">6成9上班族想進遊戲業　期望薪資37386元 | 頭條新聞 | NOWnews 今日新聞網</a></li></ul></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近的 7-ELEVEN 啊]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/07/seven-eleven/"/>
    <updated>2012-02-07T10:48:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/07/seven-eleven</id>
    <content type="html"><![CDATA[<table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-CMrUObFVmYE/TzCC180FvYI/AAAAAAAAJRU/_Ut6VVenz_c/s1600/IMG_2123.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="241" src="http://3.bp.blogspot.com/-CMrUObFVmYE/TzCC180FvYI/AAAAAAAAJRU/_Ut6VVenz_c/s640/IMG_2123.jpg" width="640" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">重慶南路的7-11由街角處（現為艾美麗）搬移到了巷子中。攝於2012-01-30</td></tr></tbody></table>


<div class="separator" style="clear: both; text-align: left;"><br /></div>


<div class="separator" style="clear: both; text-align: left;"></div>


<div style="text-align: -webkit-auto;">最近注意到有幾家 7-11 作了同樣的事情，就是從原本的街角的黃金地帶搬到附近不遠處，距離原店址大約三四戶的地方。如果只有一家店搬，我只會單純想到是租約到期之類的原因，但短時間內同時見到數家 7-11 都有類似的搬遷動作，就不得不讓人去思考背後是否有某種經營策略上的調整？</div>


<div style="text-align: -webkit-auto;"></div>


<br /><div style="text-align: -webkit-auto;">顯而易見的，這樣的搬遷使得原本 7-11 店鋪的可見性降低，畢竟街角是路口四方向都可以看到的點，來往的人潮也最多，而路邊或巷邊的 7-11 則只有同條路上的人才能見到。基於以上道理，三角窗（街角）的租金向來也比周遭店面來得高，甚至會高到倍數以上。不過我不覺得 7-11 搬到非街角地段，純粹只有租金考量。</div><div style="text-align: -webkit-auto;"><br /></div><div style="text-align: -webkit-auto;">就我看來，7-11 的搬遷，其實某種程度反應了便利商店（尤其是 7-11）在我們生活中扮演的角色，已經從「剛好、順便去一下」的商店，成為「被尋找的主體」。</div><div style="text-align: -webkit-auto;"><br /></div><div style="text-align: -webkit-auto;">住在都市的朋友，相信都會在自己或周遭朋友上看到一個現象：就是每當前往一個風景區或新地點時，總是會下意識尋找「麥當勞」或其他熟悉的連鎖速食店的店面。就算不一定會去吃，但至少在想不到吃什麼時，也不失為一個選擇。</div><div style="text-align: -webkit-auto;"><br /></div><div style="text-align: -webkit-auto;">前面所提到的 7-11，便是成為這樣的一個存在。我出門不是為了「去隨便一間商店買個喝的」，而是為了「要去 7-11 領博客來的書／繳水電費／去 ATM 領錢」這樣明確的目的（然後順便買個喝的）。所以 7-11 就算開在不顯目的非三角窗地帶，也不怕你不來，因為你會去找他。</div><div style="text-align: -webkit-auto;"><br /></div><div style="text-align: -webkit-auto;">所以進一步觀察，不難發現到店址的搬遷只是變化之一，搬遷後的店面通常也會伴隨著店面空間的擴大。而空間越大，就能提供更多硬體上的服務，包括 ATM、用餐區，甚至是廁所。以往是鄉下省道旁比較容易見到有帶停車場與廁所的 7-11，作為簡易休息區的替代，而現在都會區中很多 7-11 也開始都有提供廁所了。</div><div style="text-align: -webkit-auto;"><br /></div><div style="text-align: -webkit-auto;">寫到這邊讓我想起以前短暫待過出版社時，曾經問過上頭的編輯一個問題：「為什麼有些雜誌的 Logo 標準字體蓋在封面人物上，而有些則是封面人物蓋在 Logo 字體上？哪一種比較好？」</div><div style="text-align: -webkit-auto;"><br /></div><div style="text-align: -webkit-auto;">編輯告訴我，沒有哪一種比較好，純粹是考量出發點不同。至於為什麼會有不同的作法？其實答案就和 7-11 在不在街角開店是一樣的。</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[相片管理的選擇, Aperture, iPhoto, Lightroom, Picasa]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/06/aperture-iphoto-lightroom-picasa/"/>
    <updated>2012-02-06T19:55:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/06/aperture-iphoto-lightroom-picasa</id>
    <content type="html"><![CDATA[<p>雖然不是說很專業，其實連業餘也稱不上，不過從買了第一台數位相機（CASIO QV-2800UX）到現在，前前後後也經歷過九個年頭、五台相機，之中還被偷走了一台，而這中間所累積的相片也有數千張之譜。然而因為缺乏整理，使得這些照片散落在家中不同的電腦、不同的網路分享區、不同的外接式硬碟以及不同的隨身碟中。更有甚者，同樣的照片還有不同版本放在不同的儲存設備，有原始版的，有為了傳給朋友縮過大小的，有 retouch 過的，不仔細比對還真的想不起來到底這些照片的先後順序因果關係。<br /><br />雖然想到就覺得累人，但總歸還是得找個時間徹底好好整理下照片。去年年底狠下心來，買了 Aperture 這套軟體，然後一個一個電腦、外接硬碟、隨身碟檢查，花了好幾個禮拜終於將照片全部匯入到 Aperture 中進行管理。也才知道自己這些年到底拍了多少張照片，去過哪些地方，也不用在每次想要回憶美好時光時，都要先想辦法回憶起那些美好時光的照片到底放在哪裡。<br /><br />其實在決定買下 Aperture 之前，也有考慮與試過其他選項，像是 iPhoto, Picasa, Lightroom, 但是每個軟體都有其優勢與不足之處，沒有完美無缺的 Solution。以下就簡單記錄下我對這四個軟體的使用感想，以及最後為什麼選擇 Aperture。<br /><br /><h2>Picasa</h2><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-2qwWrj1KGvA/Ty-9nAb_trI/AAAAAAAAJQ8/bNJMOMipv0k/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-02-06+%E4%B8%8B%E5%8D%887.40.12.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="248" src="http://1.bp.blogspot.com/-2qwWrj1KGvA/Ty-9nAb_trI/AAAAAAAAJQ8/bNJMOMipv0k/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-02-06+%E4%B8%8B%E5%8D%887.40.12.png" width="320" /></a></div>我在自己還在以 Windows 為主要環境的時代，就裝了 Picasa 來玩－－可是裝不久就移除掉了；後來 Picasa 出了新版，我又裝了，又移掉；又過一陣子注意到改版了，又裝，這次沒移，但是我僅僅是把 Picasa 留下當做看圖軟體。我喜歡 Picasa 他那把照片凸顯，其他桌面部分暗掉的無視窗方式瀏覽介面－－然而他主打的照片管理功能，我卻壓根不想使用。<br /><br />到了換以 Mac 作為主要環境的時候後，先後也裝過兩三次 Picasa, 也試著開始用 Picasa 來管理照片，但最後怎樣就是無法習慣，可能是軟體設計思維的不同吧，總覺得跟我自己對於照片管理的想法處處格格不入。<br /><br />Picasa 充分體現了 Google 作為一家搜尋引擎公司的思維，第一次啟動 Picasa 時，就會搜尋你整個電腦裡面的圖檔，全部加入，而這正是我最討厭的一點。我想要的是照片管理，可是 Picasa 卻會試著把你電腦裡所有圖片檔案列入他的管轄範圍內。圖片檔案有太多意義了，也許是照片、也許是工作用的中間圖片、也許是網路下載的有趣漫畫、也許是文件意義比圖片意義強烈的 Infographic，我不想要 Picasa 包山包海地把這些東西都納入他的檔案庫中。我只是單純的想要一個照片管理軟體。<br /><br />其實我很希望我能用 Picasa 這套軟體來管理照片，畢竟我買了 Google 的儲存空間，如果能夠直接把照片同步 Picasa Web 上，我就不用煩惱照片備份的問題了。不過 Picasa Web 的照片管理功能也是充滿問題的設計，用手機隨手上傳一張圖檔，就會多出一個以日期為名的小資料夾，這種資料夾一多，看了也心煩。更別提 Picasa 與 Picasa Web 的同步其實設計的很不貼心，許多地方必須手動。最好是能夠像 Dropbox 一樣，讓我指定一個本機資料夾，自動把網路相簿抓到該資料夾，丟到該資料夾的也會自動上傳。<br /><h2>iPhoto</h2><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-_zmXbDLFrWY/Ty-90OzFvBI/AAAAAAAAJRE/ONDXdXujW8s/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-02-06+%E4%B8%8B%E5%8D%887.45.23.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="211" src="http://3.bp.blogspot.com/-_zmXbDLFrWY/Ty-90OzFvBI/AAAAAAAAJRE/ONDXdXujW8s/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-02-06+%E4%B8%8B%E5%8D%887.45.23.png" width="320" /></a></div>換到 Mac 上作業後，曾經用過一段時間的 iPhoto。剛開始不習慣他把所有圖檔都放在一個叫做 &#8220;iPhoto Library&#8221; 的黑盒子中，畢竟在長久以來習慣了用資料夾作管理的形式，突然間沒有了資料夾作為存取照片的管道，心理總覺得不踏實。<br /><br />不過黑盒子的方式用久了其實倒也還好，就像是 Gmail 剛推出時只有標籤（Tag）沒有資料夾的管理，只要用不同的方式去思考，很快就可以習慣這樣的方式。反正檔案要給別人時就直接匯出，剩下的原始檔通通藏在黑盒子中，我也樂得輕鬆，不用去煩惱到底要怎麼安排這些檔案的存放方式。<br /><br />基本上，iPhoto 的使用經驗對我而言是無懈可擊的。人臉辨識與地點標記都是相當棒的功能體驗，照片的編輯與調整我也覺得夠用了，介面簡潔，很直覺便可找到你想做的工作該怎麼進行。然而他有兩個問題使我不得不考慮其他方案。第一個是無法顯示完整的 EXIF 資訊，也許是我的使用不夠深入，總之就是找不到顯示完整 EXIF 的方法。<br /><br />第二個問題就比較令人頭痛。在 iPhoto 上調整一張照片，就會產生一份該照片的副本，也就是當你調整的照片越多，所佔去的硬碟空間就越大，對於記憶體的使用也有相當影響。然而在 Picasa 和 Aperture 中，當你進行照片的修改時，Picasa 與 Aperture 只會儲存這些照片的修改參數的 Metadata，就算一張照片有十個不同風格的修改版本，也只會多用到一點點的容量，而不會消耗掉十倍的硬碟空間。因為 iPhoto 這樣的設計，所以據說當照片數目多到一個程度時，開啟的速度像牛步一樣。我自己的照片是還沒多到能感受到牛步，但是無法接受每修一個版本就會多一份照片副本，這是我放棄 iPhoto 最主要的原因。<br /><h2>Lightroom</h2><br />老實說，其實我沒有真正使用過 Lightroom, 只有買了本 Lightroom 的書來研究數位照片的管理，加上網路上看了幾篇文章比較比較 Lightroom 與 Aperture 的異同這樣。其實我蠻想試試看 Lightroom，但是由於以下幾個因素使得 Lightroom 還沒有真正上場就在我的相片管理名單中除名了。<br /><ul><li>對 Adobe 越來越沒好感。Adobe 的軟體越來越龐大，不管是功能與價格。</li><li>在 Adobe 的官網找不到試用下載，也沒有簡便的購買方式，得透過經銷商購買。</li><li>對於 iPhoto 的良好體驗，使得我對 Aperture 更有信心。</li></ul><h2>Aperture</h2><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-ijf8w6AZWS0/Ty-96eqxhfI/AAAAAAAAJRM/hlrVa7O6yNk/s1600/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-02-06+%E4%B8%8B%E5%8D%887.43.38.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" height="241" src="http://1.bp.blogspot.com/-ijf8w6AZWS0/Ty-96eqxhfI/AAAAAAAAJRM/hlrVa7O6yNk/s320/%E8%9E%A2%E5%B9%95%E5%BF%AB%E7%85%A7+2012-02-06+%E4%B8%8B%E5%8D%887.43.38.png" width="320" /></a></div>最後則是我目前在使用的 Aperture。其實剛進入 Aperture 時很不習慣，一堆術語像是 Master / Version / Folder / Album / Project 讓我如陷五里霧中，這些單字都看得懂，可是代表什麼意思、彼此間有什麼差別我卻是一竅不通。現在用了一陣子後總算明白些，但我總覺得 Apple 應該可以更簡化這些術語或關係才對，例如 Origin 就比 Master 來得容易理解；Event &nbsp;也比 Project 符合情境。<br /><br />除了術語多，介面比起 iPhoto 複雜外，用到現在倒也沒什麼好挑的，真要說的話就是希望他能早日有正體中文的介面，雖然英文介面對我不構成使用障礙，但是有熟悉的語言，情感上就大大的加分。<br /><br />另一個與 iPhoto 相比的好處，就是你的檔案可以儲存在外部文件夾，甚至是外接式硬碟，而不用一定得放在 &#8220;Aperture Library&#8221; 這個黑盒子中。如果是放在外部的文件夾，Aperture 會建立一張縮圖在黑盒子中，所以就算外接式硬碟沒有接上，也可以對該照片進行瀏覽與編輯，頂多只是匯出時無法從更精細的原始版本匯出罷了。這項特點對於習慣以文件夾進行管理與分類的人算是一項福音，不過我已經習慣 iPhoto 的方式了，所以也就索性通通丟入 Aperture 的黑盒子中去。<br /><br />另外隨著這幾個月 Aperture 的使用，也逐漸發現 Aperture 一些讓人離不開的順手好功能。例如照片的管理可以透過 Keyword, Label, Rating 與 Flag，這些機制的組合增加了不少彈性；另外像是命名、編修、調整等批次功能，也可以幫助自己省下不少寶貴的時間。有機會的話再來對自己使用 Aperture 的心得作更進一步的介紹。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[從 Launchy 到 Alfred]]></title>
    <link href="http://tzengyuxio.me/blog/2012/01/01/from-launchy-to-alfred/"/>
    <updated>2012-01-01T15:21:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/01/01/from-launchy-to-alfred</id>
    <content type="html"><![CDATA[<p><a href="http://www.launchy.net/index.php">Launchy</a> 是一款快速啟動軟體。只要按下熱鍵，就會跳出一個視窗讓你輸入一些文字來啟動軟體或是上網搜索，可說是圖形介面下的命令列工具，對於習慣用鍵盤工作的人，可以大大提昇電腦操作上的生產力。<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://3.bp.blogspot.com/-pol5lKC_fOM/TwABMA6qztI/AAAAAAAAJKo/_LVtYNhXr3Y/s1600/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2012-01-01+%25E4%25B8%258B%25E5%258D%25882.38.32.png" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="194" src="http://3.bp.blogspot.com/-pol5lKC_fOM/TwABMA6qztI/AAAAAAAAJKo/_LVtYNhXr3Y/s320/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7+2012-01-01+%25E4%25B8%258B%25E5%258D%25882.38.32.png" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;">上為 Alfred, 下為 Launchy</td></tr></tbody></table><br />話說<a href="http://blog.aqualuna.me/2006/09/launchy.html">我用 Launchy 前前後後也有五年多的時間</a>了。這段時間裡，只要我安裝新電腦或是重灌系統，Launchy 幾乎都是最前幾個安裝的程式之一，通常裝了瀏覽器（為了抓最新版防毒軟體與防火牆）與防毒軟體（這東西在電腦越乾淨的時候裝越好）之後，就是安裝 Launchy 了。<br /><br />這一兩年，我主要的工作環境從 Windows 轉移到 Mac 上，一開始找不到滿意的快速啟動軟體。在 Mac 上曾經風雲一時的 QuickSilver, 也因為有段時間久未更新，傳出停止開發的風聲，對於新版 OS X的支援也不甚理想，讓我對於這套軟體缺乏信心。所幸，沒過多久，聽見 Launchy 推出 Mac 版的消息，我立刻就在 Mac 裡安裝了這套從 Windows 時代就一直陪伴著我的軟體，繼續享受快速啟動的樂趣。<br /><br />就這樣一直到了上個月，因為意外的緣故讓我注意到了 <a href="http://www.alfredapp.com/">Alfred</a> 這套軟體。一開始沒興趣，畢竟人家已經有了 Launchy 了（羞）。但是好死不死讓看見 Alfred 的官方網站做的很漂亮（可見門面很重要），於是想說安裝來看看吧，反正免費。結果不試則已，一試就成主顧。在預設安裝下，我都還沒作什麼設定，就可以進行許多的操作，包括啟動軟體、網路搜尋、數學計算。而且 Alfred 除了功能之外，介面與圖示比起 Launchy 也更加符合 Mac 的調性，使得我對 Launchy 的忠誠開始動搖。<br /><br />其實我對 Launchy 還是很滿意，但是 Alfred 給我的感覺卻是一整個驚艷。Launchy 有的功能，Alfred 都做到了，而且做的更好。Alfred&nbsp;讓我用沒一天就開始認真考慮購買 Power Pack 的可能性。所以，別了，Mac 上的 Launchy。不過別擔心，偶爾我們還是會在 Windows 上見面的。<br /><br /><em> * </em><br /><br />後記：<strike>其實 Launchy 還是有些 Alfred 比不上的地方。比方說 Alfred 的軟體搜尋只能從頭或是從斷字的地方開始，不能跳著搜尋，但 Launcy 可以。以 iTunes 為例，Alfred 可以透過 &#8220;itu&#8221; 或是 &#8220;tun&#8221; 找到 iTunes, 可是如果輸入 &#8220;une&#8221; 或是 &#8220;itn&#8221; 就找不到了；對於 Launchy 而言，上面四種方式都可以找到 &#8220;iTunes&#8221;。</strike><span style="color: red;">更正，Alfred 一樣可以透過輸入部分且不連續的字母來搜尋，只要到 Preference 裡勾選 &#8220;Fuzzy: Partial matching for Applications&#8221; 即可。</span></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[奇人異士列傳]]></title>
    <link href="http://tzengyuxio.me/blog/2011/12/26/the-lives-of-eccentric/"/>
    <updated>2011-12-26T08:17:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2011/12/26/the-lives-of-eccentric</id>
    <content type="html"><![CDATA[<p>會買這本漫畫，主要是因為荒木飛呂彥與主題：「奇人異士」。我對荒木的畫風感覺一般，甚至有時候還覺得畫面太亂了，讀起來辛苦。但是由他來畫這些怪咖，卻是再適合不過。荒木作畫裡的詭異配色與扭曲的姿勢，與「奇人異士」這個題材配起來真是天生一對。可惜買回家拆開之後才發現，六則故事中真正由荒木操刀的不到兩篇，以篇數份量來看更是只有七分之二，實在是令人大感失望。（以下介紹有劇情洩漏）<br /><br /><div style="text-align: center;"><a href="http://www.anobii.com/books/%E5%A5%87%E4%BA%BA%E7%95%B0%E5%A3%AB%E5%88%97%E5%82%B3_%E5%85%A8/9789861038957/01d58b2de32f49b7cc/" title="More about 奇人異士列傳 (全)"><img alt="More about 奇人異士列傳 (全)" height="320" src="http://image.anobii.com/anobi/image_book.php?type=5&amp;item_id=01d58b2de32f49b7cc&amp;time=1254981167" style="padding-bottom: 5px; padding-left: 5px; padding-right: 5px; padding-top: 5px;" title="More about 奇人異士列傳 (全)" width="212" /></a></div><div style="text-align: left;"><br /></div><div style="text-align: left;">雖然說漫畫中的故事都是真人實事，不過表達的方式難免還是有些誇張，所以很多地方看看就好。底下各篇的介紹中，沒有特別註明的短篇，均為荒木飛呂彥擔任原作與構成，鬼窪浩久作畫。</div><div style="text-align: left;"><br /></div><div style="text-align: left;"><span style="font-size: large;">1. 泰‧柯布（Ty Cobb）</span></div><div style="text-align: left;"><br /></div><div style="text-align: left;">泰‧柯布是個在上個世紀初非常極具爭議的一位棒球選手，他擁有超高水準的打擊表現，但在人際關係上卻是一敗塗地。漫畫提到柯布是個隨身會攜帶手槍進入球場的選手，要是跟人起了什麼衝突，立刻就拔槍出來。</div><div style="text-align: left;"><br /></div><div style="text-align: left;">柯布的人緣糟糕到什麼地步呢？有一年柯布與聯盟另一位球員 N. Lajoie 在爭奪該球季打擊王時，為了不讓柯布拿下打擊王，當時的聖路易布朗隊 (St.Louis Browns) 教練甚至授意自己隊員在 Lajoie 上場打擊時，放大守備範圍，簡單的說就是故意放水給 Lajoie，寧願自己打放水球也不要讓柯布拿下打擊王。雖然如此，柯布仍舊在大聯盟中留下了許多難以抹滅的紀錄，也進了第一屆棒球名人堂，甚至還是以當年最高票入名人堂的。</div><div style="text-align: left;"><br /></div><div style="text-align: left;"><br /></div><div style="text-align: left;"><span style="font-size: large;">2. 康 芳夫</span></div><div style="text-align: left;"><br /></div><div style="text-align: left;">康芳夫，自稱為「虛業家」，又被稱為「傳說的製作人」（伝説のプロデューサー），是個以活動策劃為主的傳奇人物。他所策劃的活動都相當具有爭議性，例如漫畫中所介紹的「奧利佛旋風」，就是一個以具有 47 條染色體（人類為 46 條，黑猩猩為 48 條）的未知生物為主角的巡迴活動，更誇張的是康芳夫甚至懸賞一千萬，找來沒什麼名氣的女明星來與奧利佛（<a href="http://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%AA%E3%83%90%E3%83%BC%E5%90%9B">オリバー君</a>）上床，看看是不是真的能夠繁衍出後代。</div><div style="text-align: left;"><br /></div><div style="text-align: left;">康芳夫其他還策劃過的活動像是「孟加拉虎 VS 空手道家的格鬥」、「派遣探險隊尋找尼斯湖水怪」（隊長是石原慎太郎），以及出版爭議性作品<a href="http://blog.aqualuna.me/2005/07/blog-post_1155.html">《家畜人鴉俘》</a>。據說，浦沢直樹的漫畫《二十世紀少年》中的万丈目胤舟，就是以康芳夫作為角色原型。</div><div style="text-align: left;"><br /></div><div style="text-align: left;">康芳夫至今（2011年底）仍活在世上。據維基百科上的記載，目前主要是在進行《家畜人鴉俘》的電影化工作。</div><div style="text-align: left;"><br /></div><div style="text-align: left;"><br /></div><div style="text-align: left;"><span style="font-size: large;">3. 傷寒瑪莉（Typhoid Mary, 本名 Mary Mallon）</span></div><div style="text-align: left;"><br /></div><div style="text-align: left;">本篇由荒木飛呂彥親自作畫。內容主要是講一個傷寒的帶原者瑪莉，由於自身體質因素不會發病，但卻相當執著於從事廚房的工作，因而使得接觸到她料理的其他人都相繼染上傷寒。這在傷寒仍有 10% 致死率的二十世紀初期，可是相當令社會恐慌的不定時炸彈。</div><div style="text-align: left;"><br /></div><div style="text-align: left;">與本書其他故事相比，其實我覺得〈傷寒瑪莉〉的故事本身相對平淡，但在荒木的作畫之下，反而顯得特別荒謬有趣。尤其是瑪莉在一戶只有老人與小孩在的屋子裡幫傭時，眼睛看不清楚的老人差點誤把小嬰兒當成火雞吃下去這一段，那種讓人為之捏一把冷汗的描寫功力實在令人印象深刻。</div><div style="text-align: left;"><br /></div><div style="text-align: left;"><br /></div><div style="text-align: left;"><span style="font-size: large;">4. 溫徹斯特神祕屋</span></div><div style="text-align: left;"><br /></div><div style="text-align: left;">同樣也是由荒木飛呂彥親自作畫的一篇。這篇也是我覺得故事本身比較普通的一篇，怎麼剛好荒木老師畫的都是這種比較不痛不癢的故事？這個故事主要是在講一間奇怪的房子，這間房子外表看上去美觀大方，然而裡面卻有 160 個房間，10000 個窗，2000 扇門，40 個樓梯間。房子裡頭結構怪異，有些房間甚至地上冷不防冒出個窗子，一不小心就會掉到樓下去，還有些像是有進無出或有出無進的樓梯，整個房子就是一個怪異的組合。</div><div style="text-align: left;"><br /></div><div style="text-align: left;">是什麼樣的人基於什麼樣的理由而蓋了這麼一個房子呢？房子的主人是溫徹斯特夫人，他的丈夫是美國著名「溫徹斯特步槍」的發明人，因為「溫徹斯特步槍」而賺進了大筆的財富。溫徹斯特夫人在丈夫與女兒相繼去世之後，悲痛欲絕，這時占星師告訴夫人，由於她丈夫所發明的武器奪走了許多人的性命，使得她的家庭受到了詛咒，因此必須建造許多房間給槍下亡魂居住，以破除詛咒，而這些房間建得是越怪越好。</div><div style="text-align: left;"><br /></div><div style="text-align: left;">迷信的溫徹斯特夫人於是開始整修原本只有八間房間的洋房。從 1884 年開始，到 1922 年夫人以 82 歲高齡去世的整整 38 年中，房子一直都是處於改建的狀態中。由於溫徹斯特夫人繼承了大筆的遺產，因此雖然房子不斷改造，但是所用的建材與設計都是當時最新的，整個屋子裡就安裝了三部電梯。這棟屋子現在已成了知名的旅遊景點，有機會去加州的話一定要過去一探究竟。</div><div style="text-align: left;"><br /></div><div style="text-align: left;"><br /></div><div style="text-align: left;"><span style="font-size: large;">5. 戈利亞兄弟（The Collyer Brothers）</span></div><div style="text-align: left;"><br /></div><div style="text-align: left;">戈利亞兄弟沒有什麼驚人的事蹟，他們之所以出名，就是因為他們足不出戶地把自己關在家裡，可說是「繭居族」的先驅。這兩兄弟從 1929 年起，就過著與外界完全隔離的隱居生活，然而他們並不是住在杳無人跡的深山叢林裡，而是住在紐約哈林區的一戶大宅邸中。</div><div style="text-align: left;"><br /></div><div style="text-align: left;">兩兄弟就這樣相依為命過了二、三十年，直到死去才由警察進入屋中發現。除了閉戶不出，另一個奇特之處就在於早年弟弟曾經不斷的在外面撿東西回來家裡放，這些撿回來的東西多半是垃圾，但是弟弟總想著也許有一天會用到，於是就帶回家了。也因此家中堆積了大量的垃圾，造成移動上的不便。除此之外，弟弟還在家裡安置了各種陷阱，以阻撓入侵者進入家中。</div><div style="text-align: left;"><br /></div><div style="text-align: left;">當警察接獲通報前往兩兄弟所居住的大宅去尋找遺體時，大門根本被雜物所塞滿無法進入。之後好不容易找到一扇窗戶可以進入，但還是花了約兩個小時的時間才找到哥哥荷馬（Homer）的遺體，這時哥哥大約死去 10 個小時左右。然而弟弟蘭格雷（Langley）卻不見蹤影，警察們只好一邊清除家中雜物，一邊尋找弟弟的下落。一直過了三個星期，才終於看到弟弟的遺體，死因是因為當弟弟要拿食物給行動不便的哥哥時，誤中了自己所設下的陷阱。</div><div style="text-align: left;"><br /></div><div style="text-align: left;">最後警察們從兩兄弟的屋子裡清出了 136 噸的垃圾，其中還包括了 14 架鋼琴。底下的連結中有些照片，是當時清除垃圾時的一些實況：</div><div style="text-align: left;"><a href="http://piperbasenji.blogspot.com/2010/07/collyer-brothers.html">Follow the Piper: The Collyer Brothers</a></div><div style="text-align: left;"><br /></div><div style="text-align: left;"><br /></div><div style="text-align: left;"><span style="font-size: large;">6. 尼古拉‧特斯拉（Никола Тесла</span><span style="font-size: large;">）</span></div><div style="text-align: left;"><br /></div><div style="text-align: left;">這位應該是六篇故事中最廣為人知的人物了，不過與宿敵愛迪生相比，特斯拉的知名度仍舊低了許多。今天日常生活中隨處可見的交流電，就是出自於特斯拉的發明，在許多方面可說是比愛迪生更為天才的一個科學家。當然，或許如漫畫中所描述，愛迪生的成就是辛勤努力得來，「天才是百分之一的靈感，百分之九十九的汗水」，因此對於特斯拉的天份有著嫉妒之心也說不一定。</div><div style="text-align: left;"><br /></div><div style="text-align: left;">關於特斯拉事蹟的記載比較多，這裡就不多作介紹了。</div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[玩起來直覺就是好遊戲 - Drop of Life]]></title>
    <link href="http://tzengyuxio.me/blog/2011/12/23/drop-of-life/"/>
    <updated>2011-12-23T00:23:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2011/12/23/drop-of-life</id>
    <content type="html"><![CDATA[<p>最近新出了一款風格獨特且非常治癒的遊戲，Drop of Life。在介紹之前，先看看他的片頭動畫與遊戲畫面吧：<br /><br /><div class="separator" style="clear: both; text-align: center;"><object width="320" height="266" class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://2.gvt0.com/vi/aanC-KZX0-o/0.jpg"><param name="movie" value="http://www.youtube.com/v/aanC-KZX0-o&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><embed width="320" height="266"  src="http://www.youtube.com/v/aanC-KZX0-o&fs=1&source=uds" type="application/x-shockwave-flash"></embed></object></div><br /><br />遊戲的背景很簡單，玩家要扮演的就是一個水珠，要淨化地下的土壤，並讓種子開出花朵。雖然對於關卡解謎的遊戲而言，故事不是最重要，不過整個遊戲的設計都是圍繞著這個故事主題去發揮，讓人覺得耳目一新，這一點後面會再說明。遊戲最主要的操作有三種：傾斜手機來讓水珠向前或向後移動；點擊畫面讓水珠跳躍；以及對手機吹氣可以讓水珠結成冰塊，摩擦冰塊則恢復成為水珠。傾斜、點擊與吹氣，算是充分利用了 iPhone 的各種輸入方式。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-mQdAj5OZCUs/TvNYuUFMPzI/AAAAAAAAJDM/0h4Mx4zT9VM/s1600/Photo+11-12-16+%25E4%25B8%258A%25E5%258D%25884+30+47.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://2.bp.blogspot.com/-mQdAj5OZCUs/TvNYuUFMPzI/AAAAAAAAJDM/0h4Mx4zT9VM/s320/Photo+11-12-16+%25E4%25B8%258A%25E5%258D%25884+30+47.png" width="213" /></a></div><br />關卡的進行有點類似 Loco Roco，基本上，玩家只要能從頭走到尾，找到最後的種子，就算過關了。不過通往終點的路上免不了有些障礙，許多設計都很有意思，必須充分利用水珠與冰塊的性質差異來進行，例如有些障礙物必須藉由冰塊的撞擊才能敲破，有些平面冰塊可以直接滑過，而水珠則是黏在上頭慢慢移動。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-oMWfqVeZjac/TvNY0B5A-6I/AAAAAAAAJDs/_vr61dRsGV8/s1600/Photo+11-12-22+%25E4%25B8%258B%25E5%258D%258811+39+14.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://2.bp.blogspot.com/-oMWfqVeZjac/TvNY0B5A-6I/AAAAAAAAJDs/_vr61dRsGV8/s320/Photo+11-12-22+%25E4%25B8%258B%25E5%258D%258811+39+14.png" width="213" /></a></div><br />另外關卡中有些地方有積水，基本上只要水珠掉到水中就會消滅，只好回到先前的 check point 繼續開始。不過遊戲的設計中沒有真正的 Game Over，水珠或冰塊破掉了，可以無限次嘗試。遊戲的關卡設計的不錯，單純要過關的話都不難，可以順利讓種子開出小白花；不過如果想要取得每關中能讓種子開出小黃花的四葉草，或是要收集散落的拼圖圖塊，就得稍稍動些腦筋，注意有沒有容易被忽略掉的路線。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-a50nwDAGrNo/TvNYy5uJlbI/AAAAAAAAJDk/q3udcDMQHqo/s1600/Photo+11-12-22+%25E4%25B8%258B%25E5%258D%258811+35+01.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://3.bp.blogspot.com/-a50nwDAGrNo/TvNYy5uJlbI/AAAAAAAAJDk/q3udcDMQHqo/s320/Photo+11-12-22+%25E4%25B8%258B%25E5%258D%258811+35+01.png" width="213" /></a></div><br />話說回來，這遊戲最讓我驚艷的地方就在於，許多遊戲裡的設計都巧妙結合了主題。例如遊戲裡沒有主選單，一開始就是讓玩家操作水珠在地面上滾動，所以選關的方式跟遊戲方式一樣。每個關卡完成的程度會用花的大小來表示，如果有找到四葉草，就是是黃色的小花，這比 Angry Bird 裡冷冰冰的一二三顆星星表示來得親切許多。最特別的是連工作人員名單都像是可以玩的關卡，只要在選關畫面移動到最右邊的懸崖跳下去，那就是了。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-SQBSqZmLR7I/TvNYv7nb4OI/AAAAAAAAJDU/XtHRUNQS5Mk/s1600/Photo+11-12-22+%25E4%25B8%258B%25E5%258D%258811+31+32.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://1.bp.blogspot.com/-SQBSqZmLR7I/TvNYv7nb4OI/AAAAAAAAJDU/XtHRUNQS5Mk/s320/Photo+11-12-22+%25E4%25B8%258B%25E5%258D%258811+31+32.png" width="213" /></a></div><br />最後、最後，最重要的是，這款遊戲是免費下載的喔。下載完後可以玩到第一大關，如果玩了喜歡的話，只要 0.99 鎂就可以解開完整的遊戲版本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[麻辣開鎖王 THE MOVIE]]></title>
    <link href="http://tzengyuxio.me/blog/2011/12/20/saru-lock-the-movie/"/>
    <updated>2011-12-20T09:12:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2011/12/20/saru-lock-the-movie</id>
    <content type="html"><![CDATA[<p>這部作品我最先看過的是漫畫版，看過一兩集之後，感覺開鎖這題材新鮮，故事內容有趣，此外還帶點色色的內容，算是不錯的休閒小品；然而也就僅此而已，沒有太大的動力驅使我繼續追下去。想不到事隔多年，《麻辣開鎖王》這部漫畫竟然紅到出了日劇，甚至還拍了電影版，讓人不由得好奇漫畫後來的發展。<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-zwTw0T6xraA/Tu_QwT79oII/AAAAAAAAJCQ/50cyq117egU/s1600/p544531113.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://2.bp.blogspot.com/-zwTw0T6xraA/Tu_QwT79oII/AAAAAAAAJCQ/50cyq117egU/s320/p544531113.jpg" width="227" /></a></div><br />日劇的部份我沒看，我就直接看電影版了，電影版看上去是獨立的故事，應該是沒影響吧。對於漫畫劇情的印象我也只記得那個老戴著頭巾滿頭銀髮的主角。不過當電影版市原隼人所飾演的主角登場時，倒是讓人覺得異常親切，真的有漫畫人物再現的感覺。<br /><br />電影的故事一般般，這邊我就不多提了，總之就是個主角像天真的傻子般地一直相信女主角，卻又一直被背叛，最後仍用真心感動了對方（但還是沒有在一起）的故事。關於電影的另一條支線劇情，小西真奈美所飾演的美女警官看似與惡人勾結，但彷彿好像似乎又懷抱著某種理想，想要改革警界的樣子。說真的，關於小西真奈美與<a href="http://reader.aqualuna.me/search/label/%E8%A5%BF%E6%9D%91%E9%9B%85%E5%BD%A5">西村雅彥</a>這條線的警察故事，也許是我看得不夠認真吧，一直到電影結束之後還是搞不太懂他們之間的關係，或是這些警察到底肚子裡懷著什麼鬼胎。<br /><br />反倒讓我覺得這電影最值得一提的，就是飾演女主角「マユミ」的比嘉愛未了。我開始知道比嘉愛未這個演員，是在《マルモのおきて》這部日劇，雖然比嘉是女主角，但是《マルモのおきて》這部戲真正的主角是那兩個小孩，比嘉可以發揮的戲份並不多，也沒有特別驚艷之處，給我的印象就是個「乾淨、可愛又耐看的女演員」。<br /><br />然而看到比嘉在《麻辣開鎖王 THE MOVIE》 中的表現，我對她的印象簡直是一整個加分到破表。比嘉在戲中有著多重扮相，又清純、又剛烈、又成熟、又性感，<span style="color: red;">如果說今天要拍一部《魯邦三世》真人版，那比嘉愛未絕對是「峰不二子」的不二人選。</span>當猿丸與マユミ偷了組織的錢溜到貨車後廂時，雖然主角還被蒙在鼓裡，不過這時看電影的觀眾應該都對於「マユミ是個騙子，想要黑吃黑」這件事情了然於心了，然而當マユミ在車上娓娓道出她之所以要偷走皮箱是因為有「淒慘的身世」時，我竟然有相信她的衝動！只能說女人真是太可怕了！<br /><br />最後，如果各位有機會看這部電影，記得當演員名單開始上的時候千萬別離席，後面還有一小段劇情。雖然不影響整個故事，可是這一小段畫面卻有畫龍點睛的效果，讓人在看完電影之後還能在心理留下一段甜甜的滋味。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[讀《往復書簡》]]></title>
    <link href="http://tzengyuxio.me/blog/2011/12/20/wanfushujian/"/>
    <updated>2011-12-20T06:58:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2011/12/20/wanfushujian</id>
    <content type="html"><![CDATA[<p>我很喜歡湊佳苗的《告白》。記得當初這小說的中文版剛上市時，我在書店翻了一下，當場驚為天人，二話不說，立刻就決定帶去櫃檯結帳。回家之後更是廢寢忘食地一口氣將整個故事讀完，大呼過癮。<br /><br /><div style="text-align: center;"><a href="http://www.anobii.com/books/%E5%BE%80%E5%BE%A9%E6%9B%B8%E7%B0%A1/9789571354460/018e6d7a84f1d3953a/" title="More about 往復書簡"><img alt="More about 往復書簡" src="http://image.anobii.com/anobi/image_book.php?type=4&amp;item_id=018e6d7a84f1d3953a&amp;time=1323512941" style="padding-bottom: 5px; padding-left: 5px; padding-right: 5px; padding-top: 5px;" title="More about 往復書簡" /></a></div><br /><br />不過儘管對於《告白》如此喜愛，湊佳苗的作品之後在台灣也陸續出了不少本，但我卻一本也沒再看過。原因無他，單純的是自己以為《告白》的筆法與鋪陳太過經典，即使是作者本身也難以超越。直到《往復書簡》的出現，又再次讓我在書店翻了一陣子後決定將這本書帶回家細細品嚐。<br /><br />與《告白》相比，《往復書簡》是由三篇短篇所構成，每個短篇都是經由書信往來的過程來讓讀者慢慢拼湊事實的原貌。文風依然是湊佳苗所擅長的「獨白體」，而情節發展也如同《告白》一般，隨著信件一封封的往來，事實的輪廓看似逐漸鮮明，卻又不斷地被推翻。<br /><br /><b>〈十年後的畢業文集〉</b>作為本書的第一篇，提供了相當的懸疑性與意外感。不過更讓我佩服的是，作者把學生時代同學之間相處時許多微小不易察覺卻著實存在著的細微互動與心結描寫的淋漓盡致。雖然彼此之間都是好朋友，但或多或少仍存在著看不順眼的小地方。在無憂無慮不需擔心工作、生活等瑣碎問題的學生時代，也許終日煩惱的就是這些人際關係上的小小摩擦吧。<br /><br />第二篇<b>〈二十年後的作業〉</b>主題再次圍繞著神職者－－老師－－的這個職業上，算是玩老哏吧，不過這一篇卻是三篇裡面我最喜歡的一篇。貫穿本篇的案件雖然也是一步步揭露，但卻毫不讓人意外，倒是結局的發展讓人感到相當溫馨，也是本書三篇中最讓我喜愛的一篇。<br /><br />至於最後一篇<b>〈十五年後的補習〉</b>，則完完全全是「真相→推翻真相→新的真相→再次推翻真相→更新的真相」這樣的套路。不過由於「舊的真相」與「新的真相」之間的反差並不大，故事讀起來反而比較平淡。除此之外，這篇在閱讀的過程中也不斷給我「這是愛情故事吧？」「不，這不是愛情故事。」「這還是愛情故事吧。」「這果然不是愛情故事。」「這終究還是愛情故事」這樣不斷反覆的感覺，也可以算是一種樂趣吧。<br /><br />總的來說，《往復書簡》仍舊沒有超越《告白》所帶來的震撼，但作為連續幾個陽光午後的午茶良伴，倒是毫不失職。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[真三國無雙 6 初玩心得]]></title>
    <link href="http://tzengyuxio.me/blog/2011/11/01/sangoku-musou-6/"/>
    <updated>2011-11-01T23:52:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2011/11/01/sangoku-musou-6</id>
    <content type="html"><![CDATA[<p>說是初玩，其實也已經把整個魏吳蜀晉四個勢力的故事模式全部過了一遍，加上一些戰史模式的關卡。以下是零散心得：<br /><br /><div class="separator" style="clear: both; text-align: center;"><a href="http://upload.wikimedia.org/wikipedia/zh/0/01/Dynasty_Warriors_7.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="320" src="http://upload.wikimedia.org/wikipedia/zh/0/01/Dynasty_Warriors_7.jpg" width="275" /></a></div><br /><br /><br /><ul><li>用四個字來形容這遊戲，那就是<b>「疲於奔命」</b>。</li><li>六代的故事模式加強了敘事性，不過不能改變歷史總覺得有種莫名的失落。</li><li>每個關卡都只能用同樣角色攻略，讓重玩的樂趣大大降低。</li><li>加上許多關寨不先解決重要事件就不會開門，幾乎每關都必須按照一定次序內容進行，玩過了一次就很難提得起興趣玩第二次。</li><li>大略估計一下，一個關卡平均 15 分鐘，四個勢力共 92 個關卡差不多也要 23 小時的遊戲時數。以整個故事模式的長度而言，還算可以接受。</li><li>魏國的主軸是「霸道」；吳國的主軸是「家族」；蜀國的主軸是「仁之國」；晉的主軸先是「消滅平庸之輩」，之後轉變為「消滅活在遺志中的人」。</li><li>司馬兄弟也太陽光了吧，跟老爸司馬懿完全不同調性。</li><li>本來以為故事會到鐘會反叛魏國與姜維聯手，可惜到了劉禪開城投降就結束了。</li><li>錯字還不少，特別是討伐諸葛誕這個關卡，不只錯字，還有漏字。</li><li>部分關卡開頭前要跟士兵對話這一部分有點雞肋。若不是為了獎盃我還真想直接出征。</li><li>不過雖說雞肋，有些發展還蠻有趣的。例如王元姬和司馬昭的關係，在戰場上只看得出來兩人關係匪淺，可是真正的兩人互動關係都透露在士兵的八卦耳語上。</li><li>另外蜀國劇情中一個一路跟隨劉備的士兵也很有趣，之後不但晉升到卒伯，兩個孩子都還長大成人並且從軍。我每次一可以對話一定就先想把這傢伙找出來看他的人生又有什麼進展。</li><li><strike>（話說一開始看到那個士兵說等戰爭結束要回家鄉娶媳婦這段，我還以為是死亡 flag）</strike></li><li>另外就是經常看到說人名或地名雙關語耍冷的士兵。偶一為之尚可，可是這代裡多到看到有點膩了，好煩 XD</li><li>對話模式中，有些士兵沒有對話，不過遠遠看過去會見到他在打混，走過去一靠近他就立刻精神抖擻起來。這還蠻有趣的。</li><li>弓腰姬跟劉大耳兩個人在戰爭過程中一直放閃光這是哪招？</li><li>除了 Tony さん之外，吳國也多了個 Kenny さん（應該前幾代就有，只是我沒注意到）</li><li>司馬昭的 Ex 技把人當滑板踩還蠻搞笑的啊。特別是你踩在腳上的是頭上頂著皇冠的魏帝曹髦或和蜀帝劉禪。</li><li>這一代真的很愛玩雙關語。司馬懿臨死把劍丟給司馬師，說是「我的權力就交給你運用了」；司馬師臨死也把劍丟給司馬昭，說了一樣的話。看的當下沒會意過來，事後才想到日文中的「劍」與「權」同音。</li><li>關索頭上的花到底是怎麼回事？雲長你都不管一下的嗎？</li><li>再一次佩服三國無雙系列的關卡設計，同樣一張地圖可以變出許許多多的花樣。許多關卡用到同一張地圖，可是由於使用部分不同，或是進軍路線不同，使得玩的感受也截然不同。</li><li>只有一點感受例外，那就是不管地圖怎麼變，都一樣讓人－－<b>「疲於奔命」</b>。</li><li>人生七十才開始，無雙六也是到了戰史模式才開始，開始無止盡的<a href="http://ja.wikipedia.org/wiki/%E3%82%84%E3%82%8A%E8%BE%BC%E3%81%BF">やり込み</a>。</li></ul><div>最後引一段小故事幫諸葛誕平反一下。遊戲中諸葛誕殺了文欽失了人心，於是城內軍民開城欲降。不過東晉時人干寶所著的《晉紀》有如下記載：</div><blockquote class="tr_bq">數百人拱手為列，每斬一人，輒降之，竟不變，至盡，時人比之田橫。</blockquote><div>關於這段敘述，維基百科上「<a href="http://zh.wikipedia.org/wiki/%E8%AB%B8%E8%91%9B%E8%AA%95">諸葛誕</a>」條目的記述如下：</div><blockquote class="tr_bq">&#8230;&#8230;諸葛誕率領數騎逃出壽春，被大將軍司馬胡奮手下士兵殺死。諸葛誕亦被誅滅三族。諸葛誕麾下數百人於壽春被俘，堅決不降，更說：「為諸葛公死，不恨。」行刑時排成一列，每斬一人都招降下一人，但始終無人投降。</blockquote><div>想像這畫面，其實還蠻悲壯的。</div></p>
]]></content>
  </entry>
  
</feed>
