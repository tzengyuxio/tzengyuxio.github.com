<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tzeng Yuxio]]></title>
  <link href="http://tzengyuxio.me/atom.xml" rel="self"/>
  <link href="http://tzengyuxio.me/"/>
  <updated>2012-04-05T09:52:29+08:00</updated>
  <id>http://tzengyuxio.me/</id>
  <author>
    <name><![CDATA[Tzeng Yuxio]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在 Mac 輸入特殊文字符號]]></title>
    <link href="http://tzengyuxio.me/blog/2012/04/05/how-to-input-character-symbol-in-mac/"/>
    <updated>2012-04-05T08:12:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/04/05/how-to-input-character-symbol-in-mac</id>
    <content type="html"><![CDATA[<p>有時候在網路上會看到像「㍿」這樣的文字符號，有沒有好奇這是怎麼打出來的呢？這可不是把四個字打在一個格子裡面，而是這原本就是一個作為符號使用的 Unicode 文字。就好像英文中的 Trade Mark 可以用「™」表示一樣。類似的文字還有（如果底下只看到方框看不到字，表示你瀏覽器所用的字型沒有包含到下面這些 Unicode 字碼）：</p>

<h3>英文</h3>

<ul>
<li>℡ ℻ №</li>
</ul>


<h3>日本年號</h3>

<ul>
<li>㍻ ㍼ ㍽ ㍾</li>
</ul>


<h3>日期時間</h3>

<ul>
<li>㋀ ㋁ ㋂ ㋃ ㋄ ㋅ ㋆ ㋇ ㋈ ㋉ ㋊ ㋋</li>
<li>㏠ ㏡ ㏢ ㏣ ㏤ ㏥ ㏦ ㏧ ㏨ ㏩ ㏪ ㏫ ㏬ ㏭ ㏮ ㏯ ㏰ ㏱ ㏲ ㏳ ㏴ ㏵ ㏶ ㏷ ㏸ ㏹ ㏺ ㏻ ㏼ ㏽ ㏾</li>
<li>㍘ ㍙ ㍚ ㍛ ㍜ ㍝ ㍞ ㍟ ㍠ ㍡ ㍢ ㍣ ㍤ ㍥ ㍦ ㍧ ㍨ ㍩ ㍪ ㍫ ㍬ ㍭ ㍮ ㍯ ㍰</li>
</ul>


<h3>星期</h3>

<ul>
<li>㈪ ㈫ ㈬ ㈭ ㈮ ㈯ ㈰</li>
<li>㈠ ㈡ ㈢ ㈣ ㈤ ㈥ ㈰</li>
</ul>


<h3>加框字</h3>

<ul>
<li>㈱ ㈲ ㈶ ㈳ ㈸ ㈾ ㉀ ㉁ ㈻</li>
<li>㊙ ㊚ ㊛ ㊞ ㊣ ㊤ ㊥ ㊦ ㊧ ㊨ ㊩ ㊰</li>
</ul>


<hr />

<p>那麼，要如何輸入這些特殊符號呢？在 Mac 中很簡單，只要開啟「特殊字元」的輸入視窗。絕大多數 Mac 下的應用程式都可以在選單列的「編輯」或「Edit」最下方找到「特殊字元&#8230;」或「Special Characters…」；通常也可以透過快捷鍵「⌥⌘T」來開啟特殊字元視窗。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-05-special-characters.png" alt="image" /></p>

<p>上面就是特殊字元的輸入視窗。到這邊已經可以輸入各種奇奇怪怪的符號了，不過如果想要輸入像「㍿」或「㊙」則還不夠，得要進「自定列表」加入新的類別。點左上角的齒輪便可開啟自定列表，然後選取以下類別：</p>

<ul>
<li>數字 - 全部</li>
<li>類字母符號 - 全部</li>
<li>框住的字元</li>
</ul>


<p>這樣子就可以輸入上文中提到的文字符號囉！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Maps Quest]]></title>
    <link href="http://tzengyuxio.me/blog/2012/04/02/google-maps-quest/"/>
    <updated>2012-04-02T05:12:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/04/02/google-maps-quest</id>
    <content type="html"><![CDATA[<p>照往例，今年的四月一號 Google 又推出了許多令人驚奇的功能與服務，而且多到令人目不暇給。但今年有個令我最感動的產品，那就是 8-bit 版本的 Google Maps。</p>

<iframe width="640" height="360" src="http://www.youtube.com/embed/rznYifPHxDg?rel=0" frameborder="0" allowfullscreen></iframe>


<p>上面影片中的許多元素，相信都是目前三、四十歲這一代的共同回憶。像是吹卡匣或是撥接時的噪音等等。而影片中那 8-bit 風格的美術與音效，更是所有勇者迷再熟悉也不過的場景了。看完影片後我立刻連上 Google Maps，在 8-bit 的世界中玩了好久，到處探索，就好像自己真的是個勇者一樣四處探險。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-01.png" alt="image" /><br/>
這是離我們最近，也是我們最熟悉的建築物－－天空之塔。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-02.png" alt="image" /><br/>
我所在的位置。透過 8-bit 地圖看來，突然覺得有河流經過是個不錯的地方。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-03.png" alt="image" /><br/>
蕃薯島 XD</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-04.png" alt="image" /><br/>
SEGA MD 大戰略一代中的「遠東（Far East）」地圖就是長這樣。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-05.png" alt="image" /><br/>
北邊大陸上除了有冰原，還有會扣 HP 的毒沼。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-06.png" alt="image" /><br/>
世界地、不，是勇者鬥惡龍三代的地圖。(<a href="http://www.nesmaps.com/maps/DragonWarrior3/DragonWarrior3OverworldMapBG.html">對照版</a>)</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-07.png" alt="image" /><br/>
日邦格的富士山。日邦格這地方的樹木也跟別處不同，是楓紅色的。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-maps-quest-08.png" alt="image" /><br/>
Goolge 總部，感覺怪物很多……</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Analytics 也可以彈鋼琴]]></title>
    <link href="http://tzengyuxio.me/blog/2012/04/01/google-analytics-play-music-for-you/"/>
    <updated>2012-04-01T09:23:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/04/01/google-analytics-play-music-for-you</id>
    <content type="html"><![CDATA[<p><img src="http://tzengyuxio.me/images/2012/2012-04-01-google-analytics-piano.png" alt="image" /></p>

<p>剛剛發現，Google Analytics 的「造訪」按鈕旁多了個音符記號。點下去後會出現 Piano 與 Sitar 兩種樂器可以選，選了之後就會看到下方折線圖的節點會按順序一個一個亮起來，並播放與節點高低對應的音階。</p>

<p>可惜我的折線圖不夠精采，撥出來的音樂平平淡淡，沒有直墜谷底或是步步高昇的激昂起伏。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 的開箱文系列]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/30/octopress-unboxing-collections/"/>
    <updated>2012-03-30T08:44:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/30/octopress-unboxing-collections</id>
    <content type="html"><![CDATA[<p>在安裝 Octopress 的時候，上網找了許多資料，也發現一個有趣的現象，就是大家的第一篇文章幾乎都是要對 Octopress 說幾句話。所以乾脆就來收集一下，看看大家的第一篇都寫些什麼？</p>

<p>以下按照時間順序排列：</p>

<hr />

<h4><a href="http://blog.xdite.net/posts/2011/10/07/migrate-to-octopress/">Migrate to Octopress - Blog.XDite.net</a></h4>

<ul>
<li>Oct 7, 2011 by <strong>XDite</strong></li>
<li>title: <code>migrate-to-octopress</code></li>
<li>這是我所能找到的最早的一篇。相信國內很多用 Octopress 架站的也或多或少受了這篇與 XDite 的影響。</li>
</ul>


<h4><a href="http://tzangms.com/2011/10/09/from-blogofile-to-octopress/">From blogofile to octopress - Oceanic / 人生海海</a></h4>

<ul>
<li>Oct 9, 2011 by <strong>tzangms</strong></li>
<li>title: <code>from-blogofile-to-octopress</code></li>
<li>tzangms 在這篇最後寫道：「不過, 我覺得一定有一些人一定換了這類的 blog 系統之後, 就減少了發文的動力, 像我就是 XD」hmm…我完全可以理解這種「為了想跑步而買新球鞋，買了之後反而減少了跑步動力」的心情 XD</li>
</ul>


<h4><a href="http://hack.sslab.co/blog/2011/10/14/hello/">Hello, Octopress - Hack × StrongSoft</a></h4>

<ul>
<li>Oct 14, 2011 by <strong>StrongSoft</strong></li>
<li>title: <code>hello</code></li>
<li>小小吐槽一下，雖然文中作者有說用了 Octopress 之後，就發現自己「回不去了」－－可是我看你後來還是<em>回去</em>用 blogger 繼續寫文章啊 XD</li>
</ul>


<h4><a href="http://swind.github.com/blog/2011/10/19/ban-jia-hou-di-1pian/">搬家後的第一篇文章-Octopress安裝筆記 - Corleonis</a></h4>

<ul>
<li>Oct 19, 2011 by <strong>swind</strong></li>
<li>title: <code>ban-jia-hou-di-1pian</code></li>
<li>這篇有許多在 Windows 上安裝的心得，有興趣的可以參考看看。</li>
</ul>


<h4><a href="http://blog.eddie.com.tw/2011/10/27/move-to-octopress/">搬到Octopress了 - 高見龍</a></h4>

<ul>
<li>Oct 27, 2011 by <strong>高見龍</strong></li>
<li>title: <code>move-to-octopress</code></li>
<li>我在安裝 Octopress 時有向作者請教過些問題，感謝他的熱心回應。</li>
</ul>


<h4><a href="http://hychen.wuweig.org/blog/2011/11/13/huan-dao-octopress/">換到octopress - 無為閣</a></h4>

<ul>
<li>Nov 13, 2011 by <strong>hychen</strong></li>
<li>title: <code>huan-dao-octopress</code></li>
<li>這篇文章中有一段 Script, 可以幫助作者減輕 Octopress 有一堆指令得記的壓力。</li>
</ul>


<h4><a href="http://blog.yorkxin.org/2011/11/20/hello-octology/">Hello! Octology - YORKXIN×YORKXIN</a></h4>

<ul>
<li>Nov 20, 2011, by <strong>Yu-Cheng Chuang (chitsaou)</strong></li>
<li>title: <code>hello-octology</code></li>
<li>從 WordPress 搬家過來的。這個網站還有許多篇與 Octopress 相關的文章（〈Octopress 搬家記〉系列），很值得參考。</li>
</ul>


<h4><a href="http://blog.hinablue.me/entry/move-to-octopress/">搬家到 Octopress - HINA::工程幼稚園</a></h4>

<ul>
<li>Nov 29, 2011, by <strong>hinablue</strong></li>
<li>title: <code>move-to-octopress</code></li>
<li>從 TextCube 搬家過來的，其實在這之前我沒聽過 TextCube (太孤陋寡聞了我)。</li>
</ul>


<h4><a href="http://whiteball.tw/blog/hello-world/">Hello world! - Whiteball</a></h4>

<ul>
<li>Dec 30, 2011, by <strong>Ching-Han Ho</strong></li>
<li>title: <code>hello-world</code></li>
<li>剛架好 Octopress 的朋友，在迫不及待準備要寫點東西發佈之前可以先看看這篇文章：〈<a href="http://whiteball.tw/blog/before-you-deploy-octopress/">在 Octopress 佈署出去前要注意的小地方</a>〉</li>
</ul>


<h4><a href="http://zespia.tw/blog/2012/01/14/hello-octopress/">Hello Octopress! - Zespia</a></h4>

<ul>
<li>Jan 14, 2012, by <strong>SkyArrow</strong></li>
<li>title: <code>hello-octopress</code></li>
<li>是 Octopress 主題 <a href="http://zespia.tw/Octopress-Theme-Slash/index_tw.html">Slash</a> 的作者。Slash 看上去簡約優雅，有許多人使用。更令人佩服的是，作者目前還只是個高中生！</li>
</ul>


<h4><a href="http://xoyo.name/2012/02/migrate-to-octopress/">博客跟风改用octopress - Mr Sunshine</a></h4>

<ul>
<li>Feb 7, 2012, by <strong>Zhiwei Xiao</strong></li>
<li>title: <code>migrate-to-octopress</code></li>
<li>也是從 WordPress 搬來的，文章中有提供一個將 Octopress 指令整合進 Emacs 的擴展。</li>
</ul>


<h4><a href="http://warwithinme.com/blog/2012/02/blogging-with-octopress/">开始用Octopress写Blog - War Within Me</a></h4>

<ul>
<li>Feb, 20, 2012, by <strong>WWM</strong></li>
<li>title: <code>blogging-with-octopress</code></li>
<li>我很喜歡這個網站的主題設計。作者的文字風格也很有趣，看得出來是宅宅星人（恭維的意味）。另外作者也是個 <a href="http://www.alfredapp.com/">Alfred</a> 愛好者！</li>
</ul>


<hr />

<p>可以看出，幾乎每篇的標題都有 Octopress 這字出現，唯一沒有的一篇是用了 Octology 這個字。而 title 的部份，也不脫 hello / move / migrate 等單字。有趣的是，其中有兩篇是用拼音來寫 title，對於懶得想英文標題句的人，倒也不失為一個簡單省腦的方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 開箱首發文]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/29/octopress-unboxing/"/>
    <updated>2012-03-29T16:55:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/29/octopress-unboxing</id>
    <content type="html"><![CDATA[<p>前天與昨天兩天我都在修改 blogger 的 template－－起因是這樣：我在 Chrome 裝了個 <a href="https://chrome.google.com/webstore/detail/afoibpobokebhgfnknfndkgemglggomo">HTML5 Outliner</a> 的擴充，透過這個擴充，可以查看某個網頁的大綱排列是否如預想的一樣。很顯然，blogger 預設提供的幾個範本並沒有良好的 HTML5 大綱結構，於是我決定動手修改它。</p>

<p>原本以為這是個小工程，沒想到卻花了我整整一夜一天的時間在和 <strong>blogger template</strong> 的語法纏鬥。blogger template 用到了許多神乎奇技的技巧，可以在一個 template 檔案中同時提供桌面與行動等不同平台的版面；同時提供首頁、封存、標籤與單篇等不同文章組合的版面；可以提供各式各樣的參數讓你在後台中只要簡單選選顏色調整大小就可以做出各式各樣的變化。而這些全部都是在一個 XML 檔案裡就可以搞定。</p>

<p>但也正因如此，許多設定與參數都是牽一髮動全身，想改也不曉得從哪邊改才安全。偏偏 blogger template 的設定與參數目前還缺乏文件，網路上能找到的多半是舊版的 template 語法。很多時候看到一個 css class 你只能先用猜的猜他的用途，然後慢慢試誤。最後雖然整出了滿意的結果，也獲得了不少寶貴的經驗－－但心中卻冒出了一個更大的疑問：</p>

<p><strong>「我真的想要再和這個怪物繼續相處下去嗎？」</strong></p>

<p>念頭一起，手也沒停著。立刻就進了不久前才開的 <a href="http://tzengyuxio.tumblr.com/">Tumblr</a> 帳號琢磨了許久。「要轉到 Tumblr 嗎？」我這麼問著自己，然而心裡總覺得還有什麼缺憾沒有被滿足。這時腦袋閃過先前看過的 <a href="http://octopress.org/">Octopress</a>, 數週前第一眼看到時沒什麼興趣，這次決定給它個機會，動手裝個起來玩玩看。</p>

<p>裝的過程還算順利，但也不是完全一帆風順。我遇到了一個 <code>rb-fsevent</code> 編譯錯誤的問題，幸好在 <a href="http://newbsd.com/blog/2012/03/19/my-first-try-install-octopress-on-my-mac-os-x-lion-10-dot-7-3-and-some-thing-stuff/">這篇文章</a> 中找到了解決方式，重點在於一行 <code>xcode-select</code> 指令。</p>

<p>架設好了環境，索性又申請了一個新的域名，這下真的是徹頭徹尾搬了新家。鷹架都搭好了，剩下的就是充實內容了。希望新的環境能夠帶來更愉快的書寫體驗，也期許自己今年能夠有更充實文章記錄。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python 與 Ruby 的模組安裝]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/29/install-module-in-python-and-ruby/"/>
    <updated>2012-03-29T08:39:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/29/install-module-in-python-and-ruby</id>
    <content type="html"><![CDATA[<p>其實這兩個語言的模組安裝都很簡單。不過我不是個成天都在安裝新玩意兒的人，偶爾因為業務需求或是心血來潮想要裝個模組，卻又忘了指令怎下，免不了得又得上網搜尋。</p>

<p>雖說資料不難找，但每次都問 google 也是折騰，索性自己記個筆記，將來若有需要時，翻自己筆記總比上網搜尋來得快速。</p>

<p>更重要的是，才不會因為上網問 google 然後<strong>開一堆網頁邊看又繼續邊開連結搞到最後開了一大堆自己好像有興趣但其實跟原本問題一點也不相干的文章</strong>。我真是太容易<em>分心</em>了。</p>

<h2>Python 的 easy_install</h2>

<p>Python 的 easy_install 人如其名，真的很 easy。比方說我看到 <a href="http://pypi.python.org/pypi/Markdown">Markdown 2.1.1 : Python Package Index</a> 這個套件想要安裝，我只要到終端機輸入下面指令就行了：</p>

<pre><code>$ easy_install markdown
</code></pre>

<p>要刪除模組的話則是輸入：</p>

<pre><code>$ easy_install -m markdown
</code></pre>

<p>easy_install 主要的功能就是安裝，如果需要進一步說明，可以參考</p>

<pre><code>$ easy_install --help
</code></pre>

<h2>Ruby 的 gem</h2>

<p>相比之下，Ruby 的 gem 就不僅僅只是個安裝工具，它是個完整的<strong>套件管理工具</strong>。例如我想安裝一個叫 <a href="http://toodledo.rubyforge.org/toodledo/">toodledo</a> 的套件，可以這麼輸入：</p>

<pre><code>$ gem install toodledo
</code></pre>

<p>或是指定版本號：</p>

<pre><code>$ gem install toodledo --version 1.3.8
</code></pre>

<p>移除的話是：</p>

<pre><code>$ gem uninstall toodledo
</code></pre>

<p>我想知道有沒有跟 markdown 相關的套件，我可以用如下方式尋找：</p>

<pre><code>$ gem list markdown --remote
</code></pre>

<p>如果沒有加上 <code>--remote</code>, 則會列出本機已經安裝的套件。</p>

<pre><code>$ gem list
</code></pre>

<p>更詳細的說明可以參考線上說明。</p>

<pre><code>$ gem help
</code></pre>

<h2>在 Mac 上</h2>

<p>上面這兩個工具程式在 Mac OS X 中都是預設已經安裝在系統中的，省了不少麻煩。安裝的過程如果有遇到權限問題，那麼就在上面所列的指令最前面加上 <code>sudo</code> 再執行就好了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ls Color on Mac]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/29/ls-color-on-mac/"/>
    <updated>2012-03-29T01:44:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/29/ls-color-on-mac</id>
    <content type="html"><![CDATA[<p><img src="http://tzengyuxio.me/images/2012/2012-03-29-ls-color.png" alt="ls color" /></p>

<p>昨天突然心血來潮想到來替 ls 上個顏色。以前用 Linux 時都有很漂亮的 ls 輸出，除此之外也會認真打造個人的 shell 環境。怎知開始用 Mac 兩年多來，都忘記來把 shell 好好調教一番，幾乎一直維持著原汁原味。</p>

<p>是說原本預設的也夠我用了就是，不過有個多采多姿的 ls 輸出不僅能提昇工作效率，光看著心情也會好起來。</p>

<h2>開啟顏色輸出</h2>

<p>在 Linux 要開啟顏色輸出是透過 <code>ls --color</code> 指令。而在 Mac 或 BSD 上則是使用 <code>ls -G</code>。</p>

<p>當然，每次都加這參數也是麻煩。寫程式的都是懶人，所以我在 <code>~/.bashrc</code> 檔案中加入下面這行設定：</p>

<pre><code>alias ls='ls -GF'
</code></pre>

<p>要說明一下的是，上面的設定除了開啟顏色輸出外，還加了 <code>-F</code> 這個能夠在 ls 輸出中加入識別符號的參數。像是目錄的名字後面會加上 &#8216;/&#8217;, 可執行檔會加上 &#8216;*&#8217;,  符號連結 (symbolic link) 會加上 &#8216;@&#8217; 等等。</p>

<h2>顏色的指定</h2>

<p>關於顏色的指定，Linux 使用 <code>LS_COLORS</code> 環境變數，BSD 則是使用 <code>LSCOLORS</code>。兩者的設定方式也不同，這部份網路上資料很好找，就不贅述。</p>

<p>直接說結果，我所使用的顏色組合如下：</p>

<pre><code>export LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD
</code></pre>

<p>將這行加入 <code>~/.bash_profile</code> 就可以享受美美的 ls 了。這個配色設定是從 <a href="https://github.com/seebi/dircolors-solarized/issues/10">LSCOLORS=gxfxbEaEBxxEhEhBaDaCaD</a> 這網頁參考來的。</p>

<p>附帶一提，Mac 或 BSD 的 <code>LSCOLORS</code> 參數只能指定預設檔案類型的顏色，比較常見的類型只有檔案、可執行檔、符號連結三種。Linux 的 <code>LS_COLORS</code> 除了上述這些之外，還可以針對附檔名作指定，像是把 .zip .rar .tgz 等壓縮檔設成黃色；然後 .avi .m4v .mov 等影片檔設成洋紅色之類的。</p>

<h2>補充資訊</h2>

<ol>
<li>BSD 下還有一個環境變數 <code>CLICOLOR</code>, 在 <code>~/.bash_profile</code> 中加入 <code>export CLICOLOR=1</code> 可以得到跟 <code>ls -G</code> 一樣的效果。</li>
<li>如果想要自己配色的，<a href="http://geoff.greer.fm/lscolors/">LSCOLORS Generator</a> 這個網頁提供了一個方便的配色小工具。</li>
<li>喜歡 Solarized 的話，<a href="https://github.com/seebi/dircolors-solarized">seebi/dircolors-solarized</a> 是一個將 Solarized 延伸到 ls color 的專案。可惜只適用在 <strong>GNU ls</strong>, 也就是 Linux 系統上的 ls。</li>
<li>如果你無論如何也想在 Mac 上看到壓縮檔、影片檔、音樂檔等不同類型檔案也有不同顏色，或是想要使用上面提到的 Solarized ls 配色，那麼可以考慮安裝 <a href="http://www.gnu.org/software/coreutils/">Coreutils - GNU core utilities</a> 這套件。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON for Vim]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/26/json-for-vim/"/>
    <updated>2012-03-26T10:42:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/26/json-for-vim</id>
    <content type="html"><![CDATA[<p>剛剛在 Terminal 下開了個新檔要來寫 JSON, 發現 Vim 竟然沒有支援 JSON 的 FileType 與 syntax highlight。想說這問題應該很多人遇過，因此上網找了一下，找到這個 script: <a href="http://www.vim.org/scripts/script.php?script_id=1945">JSON.vim</a>。</p>

<p>不過看了下安裝說明，感覺麻煩了點。於是又找到了<a href="http://www.codeography.com/2010/07/13/json-syntax-highlighting-in-vim.html">這篇文章</a>，只要到 <code>~/.vimrc</code> 加入下面這行，就可以讓 JSON 檔案套用 JavaScript 的 syntax highlight, 簡單明瞭。</p>

<pre class="prettyprint"><code>autocmd BufNewFile,BufRead *.json set ft=javascript</code></pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[關於 Mac 快速檢視 (Quick Look) 的幾個小秘訣]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/11/tips-for-mac-os-x-quick-look/"/>
    <updated>2012-03-11T18:17:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/11/tips-for-mac-os-x-quick-look</id>
    <content type="html"><![CDATA[<p>我用了 Mac 好一段時間了才知道，原來對檔案直接按空白鍵可以開啟快速檢視 (Quick Look)；又隔了好一段時間，才又知道原來快速檢視除了內建的之外，還可以加上些外掛以增加支援檔案類型。下面是一些我所用到的 QuickLook 相關技巧整理。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-03-11-quicklook-of-zip.png" alt="BetterZip Plugin" /></p>

<h2>在 Terminal 下開啟快速檢視</h2>

<p>除了在 Finder 中按空白鍵外，有時候在 Terminal 底下工作時，也可以利用指令來開啟快速檢視，這樣可以減少鍵盤滑鼠的切換以提升效率。開啟的指令如下：</p>

<pre><code>$ qlmanage -p [FILE]
</code></pre>

<p>把 [FILE] 替換成要開啟的檔名即可。不過這指令也不算短，要更方便的話，可以在 <code>~/.bashrc</code> 中加入以下指令別名 (alias)，這樣只要輸入 <code>ql [FILE]</code> 就可以立刻檢視了：</p>

<pre><code>alias ql='qlmanage -p'
</code></pre>

<p>對了，設定檔 .bashrc 預設在 Mac OS X 中是不起作用的，可以參考<a href="http://coder.aqualuna.me/2012/03/bashrc-in-mac-terminal-os-x-lion.html">這篇文章</a>來讓 .bashrc work。</p>

<h2>增加支援檔案類型的 Plugin</h2>

<p>快速檢視本身支援文字、圖片、音樂、影片等基本檔案格式，至於其他不支援的格式則只會顯示一個大大的檔案 icon。透過以下 Plugin 可以增加快速檢視支援的檔案格式，安裝很簡單，只要將下載下來的 <code>*.qlgenerator</code> 檔案放到下面路徑之一：</p>

<ul>
<li><code>(Macintosh HD)/Library/QuickLook/</code> 安裝給本機的所有使用者</li>
<li><code>~/Library/QuickLook/</code> 只安裝給自己使用</li>
</ul>


<h3>壓縮檔 (Archives)</h3>

<p><a href="http://macitbetter.com/BetterZip-Quick-Look-Generator/">BetterZip 2 - The Next Generation of Archiving</a></p>

<p>上面這個外掛預設是暗色背景的，如果喜歡白色背景的（如同文章開頭那張圖），可以考慮下面這個修改版本：</p>

<p><a href="https://github.com/farfanoide/BetterZ-QuickLook-plugin-theme-for-Lion">farfanoide/BetterZ-QuickLook-plugin-theme-for-Lion</a></p>

<h3>程式碼 (Code)</h3>

<p><a href="http://code.google.com/p/qlcolorcode/">qlcolorcode - A Quick Look plugin for source code with syntax highlighting - Google Project Hosting</a></p>

<h3>CSV 檔案</h3>

<p><a href="http://code.google.com/p/quicklook-csv/">quicklook-csv - A QuickLook plugin to quick look CSV files for Mac OS X 10.5+ - Google Project Hosting</a></p>

<h2>快速檢視文字檔案時，可以複製文字</h2>

<p>按空白鍵檢視文字檔案內容很方便，可是有時候如果想要複製文字，就得另外再開啟文字編輯，相當麻煩。在 Terminal 下輸入以下指令，可以讓你在快速檢視文字檔時，也能選取想要的片段，然後按 Cmd+C 複製出來。</p>

<pre><code>$ defaults write com.apple.finder QLEnableTextSelection -bool TRUE; killall Finder
</code></pre>

<h2>用不同的應用程式開啟</h2>

<p>在快速檢視時，右上方會有個按鈕讓你以預設關連的應用程式開啟。如果你想要用其他的應用程式開啟，例如用 Photoshop 開啟圖檔，那麼只要按著右上方按鈕不放，就會出現選單供你選擇想要開啟的應用程式。</p>

<h2>以全螢幕開啟快速檢視</h2>

<p>選取檔案，然後按下 <code>Cmd+Opt+Y</code>，就可以直接以全螢幕方式進入快速檢視，這對影像或是影片格式相當有用。</p>

<p>其實也可以在按著 Opt 的狀態下按空白鍵進入全螢幕的快速檢視，不過像我有安裝 Alfred, <code>Opt+空白鍵</code> 預設會啟動 Alfred 的輸入視窗，因此就沒辦法用來開啟快速檢視了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[設定 Mac Terminal 下的 .bashrc]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/11/dot-bashrc-in-mac-terminal/"/>
    <updated>2012-03-11T09:33:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/11/dot-bashrc-in-mac-terminal</id>
    <content type="html"><![CDATA[<p>今天想要替 Terminal 下一些常用的指令建立 alias, 我按照以前在 FreeBSD/Linux 的習慣，直接進 Terminal，在家目錄 (<code>~/</code>) 下寫了個 <code>.bashrc</code>, 重開 Terminal, 剛剛寫的 alias 卻沒有任何反應。</p>

<p>後來在家目錄下先建了個檔案 <code>.bash_profile</code>, 檔案內容如下：</p>

<pre class="prettyprint"><code>if [ -f ~/.bashrc ]; then
    source ~/.bashrc
fi
</code></pre>


<p>這樣原本寫在 <code>.bashrc</code> 裡的指令稿就會被讀取並且發揮作用了。補充說明，我的作業系統版本為 <strong>Mac OS X Lion (10.7)</strong>。</p>

<p>關於 <code>.bash_profile</code> 與 <code>.bashrc</code> 的差別，簡述如下：</p>

<h3>.bash_profile</h3>

<p>輸入帳號密碼登入時，不論遠端或本地，都會執行此設定檔。</p>

<h3>.bashrc</h3>

<p>在已經登入的情況下，開啟終端機視窗（如 Gnome 的 xterm），在命令提示符號出現前，就會先執行 .bashrc 內的指令。</p>

<p>不過 Mac OS X 的行為是上述流程的例外，詳細可參考本文最後面的連結。</p>

<hr />

<p>參考資訊：</p>

<p><a href="http://macfidelity.de/2008/07/02/mac-customizing-terminal-in-mac-os-x-105/">Customizing Terminal in Mac OS X 10.5 | macfidelity</a></p>

<p>上面這篇文章中的步驟比較多，甚至還要進 Terminal 的「偏好設定」畫面去修改打開 Shell 的指令。不過我自己的操作結果是就算沒有設定那些指令也沒關係，只要有包含文章中那段代碼的 <code>.bash_profile</code>, 就可以讀取 <code>.bashrc</code> 了。</p>

<p>關於 <code>.bash_profile</code> 與 <code>.bashrc</code> 的差別，請見下面這篇文章。</p>

<p><a href="http://www.joshstaiger.org/archives/2005/07/bash_profile_vs.html">.bash_profile vs .bashrc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solarized for google-code-prettify]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/11/solarized-for-google-code-prettify/"/>
    <updated>2012-03-11T07:20:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/11/solarized-for-google-code-prettify</id>
    <content type="html"><![CDATA[<p><a href="http://tzengyuxio.me/blog/2011/08/07/embeded-code-with-google-code-prettify/">我用 google-code-prettify 來做 blog 文章中的代碼上色</a>，google-code-prettify 本身有<a href="http://google-code-prettify.googlecode.com/svn/trunk/styles/index.html">附上幾個 Color Scheme</a>, 然而除了預設的之外，都是以暗色背景為主。</p>

<p>昨天心血來潮將 <a href="http://ethanschoonover.com/solarized">Solarized</a> 這個 Color Scheme 移植到 google-code-prettify 下，同樣也是 dark/light 雙版本。關於 Solarized 的介紹可以參考<a href="http://coder.aqualuna.me/2012/02/zenburn-solarized.html">這篇文章</a>。</p>

<h2>下載 / Download</h2>

<ul>
<li>Solarized Light

<ul>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.css">Normal version</a></li>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.min.css">Minified version</a></li>
</ul>
</li>
<li>Solarized Dark

<ul>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.css">Normal version</a></li>
<li>Download <a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.min.css">Minified version</a></li>
</ul>
</li>
</ul>


<h2>代碼 / Code</h2>

<h3>Solarized Light</h3>

<p>正常排版版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#657b83}
@media screen{
    .str{color:#2aa198}
    .kwd{color:#859900}
    .com{color:#93a1a1}
    .typ{color:#b58900}
    .lit{color:#2aa198}
    .pun,.opn,.clo{color:#657b83}
    .tag{color:#268bd2}
    .atn{color:#93a1a1}
    .atv{color:#2aa198}
    .dec,.var{color:#268bd2}
    .fun{color:red}
}
@media print,projection{
    .str{color:#060}
    .kwd{color:#006;font-weight:bold}
    .com{color:#600;font-style:italic}
    .typ{color:#404;font-weight:bold}
    .lit{color:#044}
    .pun{color:#440}
    .tag{color:#006;font-weight:bold}
    .atn{color:#404}
    .atv{color:#060}
}
pre.prettyprint{padding:5px;border:1px solid #888;background:#fdf6e3}
ol.linenums{margin-top:0;margin-bottom:0}
li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}
li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}
</code></pre>


<p>最小化版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-light.min.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#657b83}@media screen{.str{color:#2aa198}.kwd{color:#859900}.com{color:#93a1a1}.typ{color:#b58900}.lit{color:#2aa198}.pun,.opn,.clo{color:#657b83}.tag{color:#268bd2}.atn{color:#93a1a1}.atv{color:#2aa198}.dec,.var{color:#268bd2}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:5px;border:1px solid #888;background:#fdf6e3}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#eee}
</code></pre>


<h3>Solarized Dark</h3>

<p>正常排版版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#839496}
@media screen{
    .str{color:#2aa198}
    .kwd{color:#859900}
    .com{color:#586175}
    .typ{color:#b58900}
    .lit{color:#2aa198}
    .pun,.opn,.clo{color:#839496}
    .tag{color:#268bd2}
    .atn{color:#586175}
    .atv{color:#2aa198}
    .dec,.var{color:#268bd2}
    .fun{color:red}
}
@media print,projection{
    .str{color:#060}
    .kwd{color:#006;font-weight:bold}
    .com{color:#600;font-style:italic}
    .typ{color:#404;font-weight:bold}
    .lit{color:#044}
    .pun{color:#440}
    .tag{color:#006;font-weight:bold}
    .atn{color:#404}
    .atv{color:#060}
}
pre.prettyprint{padding:5px;border:1px solid #888;background:#002b36}
ol.linenums{margin-top:0;margin-bottom:0}
li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}
li.L1,li.L3,li.L5,li.L7,li.L9{background:#111}
</code></pre>


<p>最小化版本 (<a href="http://dl.dropbox.com/u/1324456/google-code-prettify/solarized-dark.min.css">download</a>)：</p>

<pre class="prettyprint lang-html"><code>.pln{color:#839496}@media screen{.str{color:#2aa198}.kwd{color:#859900}.com{color:#586175}.typ{color:#b58900}.lit{color:#2aa198}.pun,.opn,.clo{color:#839496}.tag{color:#268bd2}.atn{color:#586175}.atv{color:#2aa198}.dec,.var{color:#268bd2}.fun{color:red}}@media print,projection{.str{color:#060}.kwd{color:#006;font-weight:bold}.com{color:#600;font-style:italic}.typ{color:#404;font-weight:bold}.lit{color:#044}.pun{color:#440}.tag{color:#006;font-weight:bold}.atn{color:#404}.atv{color:#060}}pre.prettyprint{padding:5px;border:1px solid #888;background:#002b36}ol.linenums{margin-top:0;margin-bottom:0}li.L0,li.L1,li.L2,li.L3,li.L5,li.L6,li.L7,li.L8{list-style-type:none}li.L1,li.L3,li.L5,li.L7,li.L9{background:#111}
</code></pre>


<h2>範例 / Example (in dark version)</h2>

<pre class="prettyprint lang-java"><code>import java.util.Map;
import java.util.TreeSet;

public class GetEnv {
  /**
   * let's test generics
   * @param args the command line arguments
   */
  public static void main(String[] args) {
    // get a map of environment variables
    Map&lt;String, String&gt; env = System.getenv();
    // build a sorted set out of the keys and iterate
    for(String k: new TreeSet&lt;String&gt;(env.keySet())) {
      System.out.printf("%s = %s\n", k, env.get(k));
    }
  }    
}
</code></pre>


<hr />

<p>網路上有找到<a href="http://subtech.g.hatena.ne.jp/h2u/20110408/1302198319">這篇也有 solarized color for google-pretty-code</a>, 不過只有暗色背景的版本。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BOM (Byte Order Mark) 與 UTF-8]]></title>
    <link href="http://tzengyuxio.me/blog/2012/03/09/bom-byte-order-mark-and-utf-8/"/>
    <updated>2012-03-09T20:28:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/03/09/bom-byte-order-mark-and-utf-8</id>
    <content type="html"><![CDATA[<p>一些個人筆記，省得以後每次遇到還得重新上網搜尋做功課。</p>

<hr />

<p>Byte Order Mark 在 UTF-16 Big Endian 是 &#8220;FE FF&#8221;，Little Endian 是 &#8220;FF FE&#8221;。其中 Mac 系統主要是 Big Endian, PC 系統則是使用 Little Endian。</p>

<p>UTF-8 由於本身特性，不管 Big Endian 或 Little Endian，其 BOM 一律為 &#8220;EF BB BF&#8221;。</p>

<p>不過個人建議，文字文件要儲存的話，<strong>盡量以 UTF-8 格式存</strong>。而以 UTF-8 儲存的文件，<strong>盡量不要放 BOM 進去</strong>。為什麼呢？因為 UTF-8 的一個特色就是能與 ASCII 系統相容，如果文件中沒有包含非拉丁字元的話；要是放了 BOM 進去，就破壞了這相容性。</p>

<h2>在 VIM 中的 BOM 相關操作</h2>

<h3>加入 BOM</h3>

<pre><code>:set bomb
</code></pre>

<h3>移除 BOM</h3>

<pre><code>:set nobomb
</code></pre>

<h3>查詢 BOM 狀態</h3>

<pre><code>:set bomb?
</code></pre>

<h2>在 Terminal / Console 下的 BOM 相關操作</h2>

<h3>查詢包含 UTF-8 BOM 的檔案</h3>

<pre><code>$ grep -rIl $'^\xEF\xBB\xBF' [FILE]
</code></pre>

<h3>找出並移除 UTF-8 的 BOM</h3>

<pre><code>$ grep -rIl $'^\xEF\xBB\xBF' [FILE] | xargs sed -i 's/^\xEF\xBB\xBF//;g'
</code></pre>

<h3>編碼的轉換</h3>

<pre><code>$ iconv -f [FROM_ENCODING] -t [TO_ENCODING] [FILE]
</code></pre>

<p>其中 ENCODING 的部份可以是以下數值：</p>

<ul>
<li>UTF-8 UTF8</li>
<li>UTF-16BE</li>
<li>UTF-16LE</li>
<li>UCS-2BE UNICODEBIG</li>
<li>UCS-2LE UNICODELITTLE</li>
</ul>


<p>更多 ENCODING 代碼可以透過 <code>iconv --list</code> 查詢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[幾個我常用的 Alfred 自定搜尋]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/19/alfred-search/"/>
    <updated>2012-02-19T23:45:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/19/alfred-search</id>
    <content type="html"><![CDATA[<p>雖然用了 <a href="http://tzengyuxio.me/search/label/Alfred">Alfred</a> 一段時間，但是直到最近才開始認真挖掘裡面的設定。其實 Alfred 安裝好不用特別設定，就已經很好用了，像是程式本身預設許多網頁搜尋，從常見的 Google、Yahoo!、Amazon 與維基百科，到比較少人知道但很好用的 <a href="http://www.wolframalpha.com/">wolfram</a> 等，都是現成裝好就可以用的。</p>


<p><img src="https://lh6.googleusercontent.com/-6Z65mn0aLAo/T0EV13h5vFI/AAAAAAAAJdU/ijKmwmls5p8/s800/alfred_custom_search.png" alt="Alfred Custom Search" /></p>


<p>不過每個人常用網站不同，在軟體的預設網站之外一定有遺珠之憾。好在 Alfred 也有提供自定搜尋選項的功能，以下就來分享我自己設定的 Alfred Custom Search。</p>


<p>這些 Custom Search 的安裝方式很簡單，只要將底下以 alfredapp 開頭的一串文字複製起來，叫出 Alfred 的指令視窗（預設是使用 ⌥Space），貼上剛才複製的文字，按下 Enter 就好了。</p>


<h2>奇摩字典搜尋</h2>


<ul><li>Keyword: dict</li><li><p>說明：就是查字典。dict 後面可以接中文詞或是英文單字。</p><p>alfredapp://customsearch/Yahoo%21%E5%A5%87%E6%91%A9%E5%AD%97%E5%85%B8%E6%9F%A5%E8%A9%A2/dict/utf8/url=http://tw.dictionary.yahoo.com/dictionary?p={query}</p></li></ul>


<h2>flickr Creative Common 搜尋</h2>


<ul><li>Keyword: fcc</li><li><p>說明：Alfred 已經有內建 flickr 搜尋了，不過並不是任何找到的圖片都可以隨意使用。如果你有在寫 blog 並且會上 flickr 找圖片來點綴文章的話，這個搜尋可以幫助你找到合適的圖片。</p><p>alfredapp://customsearch/Search%20Flickr%20CC%20for/fcc/ascii/url=http://www.flickr.com/search/?q={query}&amp;l=commderiv&amp;ss=0&amp;ct=0&amp;mt=all&amp;w=all&amp;adv=1</p></li></ul>


<h2>世界時間查詢</h2>


<ul><li>Keyword: time</li><li><p>說明：Time.is 是個簡單但方便的網站，可以以城市名稱查詢該地目前時間。安裝好此 Custom Search 後，就能用 &#8221;<code>time tokyo</code>&#8221; 或 &#8221;<code>time 東京</code>&#8221; 的語法來查詢當地時間。</p><p>alfredapp://customsearch/%E7%9B%AE%E5%89%8D%E7%9A%84%E6%99%82%E9%96%93%EF%BC%8C%E5%9C%A8/time/ascii/url=http://time.is/{query}</p></li></ul>


<h2>線上音樂搜尋</h2>


<ul><li>Keyword: gs</li><li><p>說明：Grooveshark 是很大的線上音樂網站，找到就可以直接串流播放了，中英文搜尋都 OK。</p><p>alfredapp://customsearch/Search%20Grooveshark%20for/gs/ascii/url=http://grooveshark.com/#/search?q={query}</p></li></ul>


<h2>Stack Overflow 搜尋</h2>


<ul><li>Keyword: so</li><li><p>說明：寫程式的人幾乎都得拜訪的聖地。google 程式問題時幾乎都會找到這邊來，乾脆就直接在 Stack Overflow 上搜尋吧。</p><p>alfredapp://customsearch/Search%20Stack%20Overflow%20for/so/ascii/url=http://stackoverflow.com/search?q={query}</p></li></ul>


<h2>Apple Developer Connection 搜尋</h2>


<ul><li>Keyword: adc</li><li><p>說明：對 Apple 開發者很方便的搜尋。</p><p>alfredapp://customsearch/Search%20ADC%20for/adc/ascii/url=http://developer.apple.com/library/mac/search/?q={query}</p></li></ul>


<h2>PChome 線上購物 搜尋</h2>


<ul><li>Keyword: pchome</li><li><p>說明：台灣最大的購物網站&#8230;&#8230;吧？我沒有數據，單純只是自己蠻常用的。</p><p>alfredapp://customsearch/Search%20PChome%20for/pchome/ascii/url=http://ecshweb.pchome.com.tw/search/v1/{query}</p></li></ul>


<h2>Mac App Store 搜尋</h2>


<ul><li>Keyword: mas</li><li><p>說明：尋找 Mac App Store 裡面的應用程式，也是我相當常用到的功能。</p><p>alfredapp://customsearch/%10Search%20Mac%20App%20Store%20for/mas/ascii/url=macappstore://ax.search.itunes.apple.com/WebObjects/MZSearch.woa/wa/search?q={query}</p></li></ul>


<h2>博客來搜尋（僅書籍）</h2>


<ul><li>Keyword: books</li><li><p>說明：博客來相信我就不用介紹了吧。以下的語法專門用來查詢書籍，如果要查包含書籍以外的物品，可以用下面的語法來查詢。</p><p>alfredapp://customsearch/Search%20%E5%8D%9A%E5%AE%A2%E4%BE%86%E6%9B%B8%E7%B1%8D%20for/books/ascii/url=http://search.books.com.tw/exep/prod<em>search.php?cat=BKA&amp;key={query}&amp;apid=books&amp;areaid=head</em>wel_search</p></li></ul>


<h2>博客來搜尋（全站）</h2>


<ul><li>Keyword: bkl</li><li><p>說明：同上，就不另外說明了。</p><p>alfredapp://customsearch/Search%20%E5%8D%9A%E5%AE%A2%E4%BE%86%20for/bkl/ascii/url=http://search.books.com.tw/exep/prod<em>search.php?cat=all&amp;key={query}&amp;apid=books&amp;areaid=head</em>wel_search</p></li></ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Growl 與 Notification Center 隨便聊]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/17/growl-and-notification-center/"/>
    <updated>2012-02-17T17:39:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/17/growl-and-notification-center</id>
    <content type="html"><![CDATA[<p>今天聽到 OSX 下一版本 Mountain Lion 的消息，大更新不多，主要都是將 iOS 上的一些應用搬到 Mac 上來，而其中最吸引我注意的大概就是通知中心（Notification Center）了。</p>


<p>繼續聊下去前，先聊聊我理想中的電腦工作環境，要能提供兩個基本功能：</p>


<ol><li>單一而簡潔的指令輸入，可以快速鍵入指令進行工作；</li><li>單一而簡潔的訊息輸出，將執行結果與事件統一一處發送通知。</li></ol>


<p>說起來很簡單，說穿了也不過就是文字列模式下的延伸概念。關於第一點，現在已經有許多應用程式可以做到了，例如在 Windows 有 <a href="http://blog.aqualuna.me/search/label/Launchy">Launchy</a>, Mac 則有 <a href="http://blog.aqualuna.me/search/label/Alfred">Alfred</a>, 都是很棒的應用，直接熱鍵啟動執行指令，就可以開始進行工作，能有效節省時間。</p>


<p>然而由於圖形作業系統多個視窗各自為政的關係，要建構第二點的環境其實有些困難。在 Windows，當電腦連上外接設備，或是硬碟空間時，會有小小黃色的 Tooltip 通知視窗；當 MSN 有人傳訊息來時，有 MSN 的通知泡泡；防毒軟體的病毒更新碼有段時間沒更新時，會有防毒軟體的提醒對話泡泡。每個軟體都有每個軟體自己的通知與設定，顯示停留的時間與樣式也都個不相同。假設今天如果我要進入專注模式，想要暫時關掉所有外來的通知時，我得一個一個自己去設定，然後要放鬆時還得一個一個去打開，這會是多惱人的一件事情？</p>


<p>好在 Mac 上有 Growl, 一個第三方廠商所寫的訊息通知中心軟體。Growl 提供了公開 API, 讓軟體開發商可以支援將訊息發送到 Growl 作顯示。以我目前的電腦來看，就包含了以下程式的訊息通知：</p>


<ul><li>1Password</li><li>Adium</li><li>Alfred</li><li>Cappuccino</li><li>Dropbox</li><li>GrowlTunes</li><li>HardwareGrowler</li><li>Insync</li><li>Pomodoro</li></ul>


<p>這些不同的程式都可以透過相同的窗口向我報告，當我不想要干擾時，也可以很輕鬆的全部關掉。也正因為有如此多的軟體支援 Growl, 所以就算我不喜歡 Growl 他那爪子般的 icon, 不喜歡他把 GrowlTunes 與 HardwareGrowler 在 App Store 裡另外拆開來賣，但我還是購買並安裝了這套軟體。</p>


<p>回到最初所提的，下一版的 OSX 將會把 iOS 上的訊息中心給整合進來，我想最為首當其衝的就是 Growl 了。前面所提到的「單一簡潔的輸入」與「單一簡潔的輸出」，這工作由作業系統來做自然是再合適也不過了。因此不難想像，隨著應用程式逐漸支援新的訊息中心，Growl 將逐漸失去其既有的優勢。</p>


<p>只是就目前看來，Mountain Lion 的更新項目實在不多，如果到時候不是免費升級，而且賣得還跟 Lion 一樣貴的話，我實在很難下得了手花錢進行升級……</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 更換資料夾圖示的方法]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/13/change-folder-icon-in-mac/"/>
    <updated>2012-02-13T13:19:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/13/change-folder-icon-in-mac</id>
    <content type="html"><![CDATA[<p>最近想把 Mac 裡一些常用的資料夾換個圖示，找到的步驟如下：</p>


<ol><li>選取資料夾，開啟該資料夾的「簡介」視窗。</li><li>將下載好的 .icns 圖示檔拉到「簡介」視窗最上方的小圖示上，就可以換掉原有圖示了。</li></ol>


<p>我照了這個方法作，不過從網路上下載的 .icns 圖示檔，有些拉上去後可以成功更換資料夾圖示，有些卻不行。研究了半天也搞不清楚為什麼有些成功有些不行。後來找到了另外一個換圖示的方法，不僅更簡單，而且除了 .icns 檔案外，也適用於任何圖檔。方法如下：</p>


<ol><li>用「預覽程式」開啟你要用來當資料夾圖示的 .icns 檔，或其他圖檔。當然，尺寸最好是 512x512。</li><li>開啟後，依序按下⌘A（全選），⌘C（複製）。</li><li>然後選取想要更換圖示的資料夾，開啟該資料夾的「簡介」視窗。</li><li>點選「簡介」視窗最上方的小圖示，按下⌘V（貼上），大功告成！</li></ol>


<p>這個方法除了資料夾外，也可以用來更改磁碟映像檔的圖示。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging with Markdown]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/10/blogging-with-markdown/"/>
    <updated>2012-02-10T13:24:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/10/blogging-with-markdown</id>
    <content type="html"><![CDATA[<h1>用 Markdown 寫部落格</h1>


<p>前陣子<a href="http://coder.aqualuna.me/2011/10/asciidoc-markdown-restructuredtext.html">比較了一些輕量級標記語言</a>，想作為之後自己撰寫文件的格式依據。其中 reStructuredText 太過複雜，就不考慮了；剩下的 AsciiDoc 與 Markdown 兩者中，剛開始我比較喜歡 AsciiDoc 多一些。因為 AsciiDoc 有支援表格的語法，而 Markdown 則必須透過 Inline HTML 的方式，這麼一來如果文章中想包含表格，免不了還是得塞入一堆礙眼的 HTML 語法。</p>


<p>不過比起 AsciiDoc, Markdown 的應用支援顯然要來得廣泛得多，除了 GitHub 與 BitBucket 等網站外，有相當多的工具或編輯器支援 Markdown 語法，例如 Day One, iA Writer 或是 Byword，這方面壓倒性勝過 AsciiDoc。於是乎 Markdown 便逐漸成為我的首選，至於不能製作表格的問題嘛，反正作表格的機會也不是那麼多，大部分時候也可以用清單方式來呈現資料，所以倒不是太大問題。</p>


<p>決定用 Markdown 作為主要規範後，第一個想到的就是用 Markdown 來寫 blog。不過 blogger 本身沒有支援 Markdown 語法，也沒有外掛或工具支援直接將 Markdown 寫好的文章發佈。大部分用 Markdown 在 blogger 寫文章的方式，都與 <a href="http://notely.blogspot.com/2011/08/how-to-use-markdown-in-blogspot-posts.html">Notely: How to use Markdown in Blogspot posts</a> 這篇文章的作業流程大同小異：</p>


<ol><li>在你的電腦中用文字編輯器撰寫文章並儲存成檔案（原作者 Joel 使用 yyyy-mm-dd post title.txt 的檔案命名方式）</li><li>開啟 <a href="http://daringfireball.net/projects/markdown/dingus">Daring Fireball: Markdown Web Dingus</a> 網站，複製貼上文章內容，進行轉換。</li><li>最後，將轉換完成的 HTML 碼貼到 blogspot 的新文章中。</li></ol>


<p>另外，貼上時要注意以下兩點：</p>


<ol><li>在貼上新文章時，確定文字輸入區上方的模式是在「HTML」下而非「撰寫」。</li><li>開啟右側「文章設定」最下方的選項，<ol><li>「撰寫模式」勾選<strong>解譯輸入的 HTML</strong>。</li><li>「換行符號」勾選<strong>使用 &lt;br&gt; 標記</strong>。</li></ol></li></ol>


<p>我目前也是採用類似的流程。比較特別要提的有以下幾點：</p>


<ol><li>標題除了作為檔名外，檔案內的第一行也會放上一級標題；最後一行則是列出這篇文章的標籤。所以在轉換為 HTML 時，要去首尾行。</li><li>檔案存放在 dropbox 空間中。這樣可以確保文章有多份備份。</li><li>文章是<a href="http://blog.aqualuna.me/2012/02/byword-ia-writer.html">用 iA Writer 寫</a>的。寫完之後用<a href="http://coder.aqualuna.me/2012/02/os-x-markdown-html.html">〈在 OS X 中隨時隨地將 Markdown 轉為 HTML〉</a>這一篇提到的方法轉換為 HTML 碼，這樣就不用再開啟線上轉換的網頁了。</li></ol>


<hr /><p>這篇文章就是用上述流程所寫的，你可以<a href="http://dl.dropbox.com/u/1324456/2012-02-10%20Blogging%20with%20Markdown.md">到這邊看看原始模樣</a>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[代碼配色，從 Zenburn 到 Solarized]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/10/from-zenburn-to-solarized/"/>
    <updated>2012-02-10T08:40:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/10/from-zenburn-to-solarized</id>
    <content type="html"><![CDATA[<p>這些年來，我的代碼配色方案都是以 <a href="http://coder.aqualuna.me/search/label/Zenburn">zenburn</a> 為首選。深色底，低對比，對眼睛舒服，代碼的段落也清晰。zenburn 也是網路上很受歡迎的配色，這有一個好處，就是越多人用就越有可能被 porting 到不同的 IDE 或 Editor 上，所以從 Visual Studio 到 Eclipse 再到 XCode 都可以<a href="http://slinky.imukuppi.org/zenburnpage/">找到現成的 zenburn 設定</a>。</p>


<p><img src="https://lh4.googleusercontent.com/-m9F65JqmUDI/TzRk4vBNMkI/AAAAAAAAJVc/mShL8z4NQAc/s640/vim_zenburn.png" alt="zenburn @ vim" /></p>


<p>上圖就是目前在用的 zenburn。由於用這麼久都已經習慣了，從沒有想過會有第二種配色讓我如此滿意，結果前天突然發現 <a href="http://ethanschoonover.com/solarized">Solarized</a> 這一組配色，當場就被迷住了，我才認識這組配色不到 24 小時，就把 zenburn 從我的 vimrc 中換掉了。</p>


<ul><li>官方網站：<a href="http://ethanschoonover.com/solarized">Solarized - Ethan Schoonover</a></li><li>GitHub 檔案庫：<a href="https://github.com/altercation/solarized">altercation / solarized - GitHub</a></li></ul>


<p>說起來，會注意到 Solarized 也是無心插柳。原本是在找 markdown + blogger 的 solution, 沒有找著，倒是見到了一個以 github 為基礎的 blog framework, 叫 Octopress。我對 <a href="http://octopress.org/">Octopress</a> 沒有太多興趣，純粹好奇它的技術架構（畢竟以 SCM 作為 blog 後端，是很有趣的想法），所以研究了一下。然後意外地在<a href="http://blog.lyhdev.com/2011/10/octopress-github-markdown.html">〈使用 Octopress + GitHub 免費架設部落格，以 Markdown 語法快速發表文章〉</a>這篇文章中意外地注意到 Solarized 這組配色。</p>


<p>Solarized 最令我覺得神奇的地方，就在於同一組基本色，可以任意搭配淺白色或淺黑色背景，都一樣清晰明瞭。它的色盤也控制在 16 色內，所以即使在終端機模式下使用也不會突兀。在官方網站上，也列出了 Visual Studio 與 Xcode 等 IDE 的配色支援；for eclipse 的配色網路上搜尋得到，不過官網上沒列出，不曉得是不是名字相衝的緣故（太陽 vs. 日蝕）=P</p>


<p>我在終端機純文字模式下的 Vim 與圖形介面的 MacVim 分別指定了 Light 與 Dark 兩種配色。這樣在 Vim 中編輯時，只要瞄一下我就可以知道現在是在終端機模式下還是獨立的 Mac App。</p>


<p><img src="https://lh3.googleusercontent.com/-wTKa4GLQKZE/TzRk46EP8GI/AAAAAAAAJVY/uhEJUnmBN14/s640/vim_solarized_yin.png" alt="solarized(yin) @ vim" /></p>


<p><img src="https://lh4.googleusercontent.com/-nIid_yCO9y4/TzRk4nK58FI/AAAAAAAAJVU/Sbt62oMbNAY/s640/macvim_solarized_yang.png" alt="solarized(yang) @ macvim" /></p>


<p>另外這配色除了用在程式碼外，也有提供給一般應用程式使用的版本，例如常見的 putty, OSX 自帶的 Terminal, 以及 iTerm 2 等。一樣都可以在 Solarized 放在 GitHub 上的 Repository 上找到。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Byword, iA Writer 以及一些其他的]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/10/markdown-editor/"/>
    <updated>2012-02-10T03:00:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/10/markdown-editor</id>
    <content type="html"><![CDATA[<p>我發現我是編輯器控。</p>

<p><img src="http://tzengyuxio.me/images/2012/2012-02-10-iawriter.png" alt="image" /></p>

<p>前些時日<a href="http://coder.aqualuna.me/2011/10/asciidoc-markdown-restructuredtext.html">研究了幾個輕量級標記語言</a>，最後情定 Markdown，結果沒多久就開始在想「Markdown 要用什麼編輯器來寫比較好？」雖然已經有了 Vim 這個強力武器，也支援 Markdown（沒有什麼語法是 Vim 支援不了的），但總是想找個更體面點的編輯器來感受一下輕量級標記語言之美，最好是即便在純文字模式下也能清楚標示出 Markdown 的語法。</p>

<p>經過簡單的搜尋，適合 Markdown 的編輯器大概鎖定了 <a href="http://bywordapp.com/">Byword</a> 與 <a href="http://www.iawriter.com/">iA Writer</a> 這兩套。然而這兩套軟體都沒有試用下載，價格也不算低，我不想兩套都買，只好上網找些比較的文章來看，看是哪一套軟體較好。這兩套軟體有個共同的特色，就是具有專注模式（focus mode），最近的編輯器市場似乎有個潮流，好幾套編輯器都強調介面的簡化，讓使用者專注在文字輸入 (distract-free writing) 上。果然分心是打文章的大敵，一不小心就會忘記寫到哪邊，然後一篇短短的文章寫個老半天這樣（笑）。</p>

<p>以專注於文章撰寫為訴求的編輯器，除了 Byword 與 iA Writer 外，比較有名的還有 <a href="http://www.hogbaysoftware.com/products/writeroom">WriteRoom</a> 以及 <a href="http://www.ommwriter.com/en/">OmmWriter</a>，找資料時也跟著看了不少評論，底下就一起寫一下介紹與心得吧。</p>

<h2>WRITEROOM</h2>

<p>這一套應該是最早出現的專注型編輯器吧，首頁的副標寫的就是 &#8220;Distraction free writing.&#8221; 有 Mac 和 iPhone 版，Mac 版在寫這篇文章時賣 $9.99，不過在許多文章中看到他的歷史價格是 $25，也許因為是最早推出的專注型編輯器的關係吧，那時還缺乏競爭對手。</p>

<p>另外，WriteRoom 似乎尚未支援 Markdown 語法的樣子，我在 App Store 的敘述中和官網的介紹裡都沒有看到。這樣的話，反而有語法標記的 Vim 還來得有用些，而且 Vim 也可以切換到 WriteRoom 模式（<a href="http://www.vim.org/scripts/script.php?script_id=2231">方法一</a>, <a href="http://mutelight.org/articles/vim-is-writeroom-level-2">方法二</a>）</p>

<h2>OMMWRITER</h2>

<p>這是很特別的一款編輯器，他讓使用者在輸入文字時，能夠完全進入到一個<strong>禪的境界</strong>。當使用者在打字時，除了簡單卻不擾人的打字音效外，背景同時也會播放輕柔淡雅的音樂。介面簡單，可以做些簡單的字型與背景設定，平常打字時介面則會自動隱藏。本文所介紹的編輯器都是以 MAC 為主，不過 OmmWriter 也有 PC 版本，都可以免費下載。</p>

<p>不過我不喜歡他的編輯區外面有個虛線的框，除此之外，我工作通常時也不需要背景音樂。對了，這一款也沒有支援 Markdown 語法。如果不是因為 Markdown 這點，我想免費且跨平台的 OmmWriter 應該是不錯的選擇。</p>

<h2>BYWORD</h2>

<p>這款在 WriteRoom 和 iA Writer for iPad 之後推出，算是結合了 WriterRoom 的專注模式與 iA Writer 優雅介面兩方面特色。售價 $9.99, 還算平易近人。我喜歡 Byword 的雙色模式，可以選擇要以白色或是黑色作背景。Byword 的 focus 模式作的也比 iA Writer 好，除了可以自己選擇 focus 的範圍（一句、一段或幾行）外，focus 模式時上下邊緣漸層淡出的設計也很別緻。</p>

<p>Byword 支援 Rich Text 與 Markdown 兩種格式。不過老實說，雖然從 Windows 的小作家就有 Rich Text 了，可是我用了這麼多年電腦，真的很少見到（更不用說自己寫了）Rich Text 格式的文件，要嘛就純文字，要嘛就 Word/HTML, Rich Text 實在是個不上不下的格式。</p>

<p>我喜歡 Byword 的地方還有一點，就是他可以直接將 Markdown 輸出成 HTML, 這對於寫 blog 很方便，寫好後轉換貼上就好。iA Writer 雖然也可以寫 Markdown, 但就沒辦法像 Byword 這樣直接轉換。不過我最後還是選了 iA Writer, 為什麼呢？</p>

<h2>IA WRITER</h2>

<p>我對 iA Writer 第一眼的感覺就是它的 Markdown 排版是很棒的設計。與其他軟體所不同，iA Writer 利用它左邊的空白處（Margin）來處理標題與清單列表的前綴標記，相當有創意。</p>

<p>在此引用一下 <a href="http://brooksreview.net/2011/05/ia-writer/">Review: iA Writer for Mac</a> 這篇文章中的一段話，作為 Byword 與 iA Writer 的比較：</p>

<blockquote><p>Byword is for people that know they want to do all their writing in one app. Writer is for people that just want to open something and write.（Byword 是給那些清楚自己要在一個 app 中完成所有撰寫工作的人。而 Writer 則是設計給想要打開個什麼然後就開始寫字的人。）</p></blockquote>

<p>iA Writer 看上去是個很簡單的編輯器，它也真的很簡單，簡單卻又不簡單。這話怎麼說呢？iA Writer 完全沒有任何自定項目：沒有偏好設定視窗；不能改變字型、背景、顏色；只有支援 Markdown, 還強迫一定得是 Markdown，不能取消標記功能；不管視窗拉多寬，每行固定 64 個字母寬。完全沒有妥協餘地。</p>

<p>然而在這麼限制重重的環境下，iA Writer 卻能帶給我一種「嗯，就是這麼剛好。」的感覺，在 iA Writer 裡面打字似乎是天經地義極為自然的一件事，一點都不會想要去改動什麼設定。它微白又略略帶點紋路的背景，配上青藍色閃爍的游標，順眼而不搶眼。整個程式的設計都是圍繞在打字本身的體驗上，至於各種花俏功能、排版的格式樣式、巨集或是插入範本、分割視窗遠端編輯什麼的，通通都不管。</p>

<p>當然沒有程式是完美的，然而 iA Writer 已經很接近完美了。前面說過，我喜歡 Byword 的雙色模式，不過用了 iA Writer 後，覺得雙色背景的選擇也是多餘。而 Byword 可以直接輸出成 HTML 這個功能，也可以透過<a href="http://coder.aqualuna.me/2012/02/os-x-markdown-html.html">在 Automator 新增服務</a>的方式，讓 iA Writer 也能直接輸出 HTML 結果。</p>

<p>實際使用一陣子後，iA Writer 倒是有兩個地方我覺得可以再改進的。一個是 Markdown 的連結模式區別不夠明顯，同顏色的連結與連結文字混淆在正文中容易造成閱讀不便。另外一個可改進之處是中文與英文文字對齊方式不同，中文預設對齊字型的降部（Descenders）底緣，如果一行中有英文的話，該行內的中文字會與英文一樣對齊基線（Baseline），這使得中英夾雜的文章中看起來會有行高不同的錯覺。</p>

<p>iA Writer 在 App Store 的定價 $19.99，比起 Byword 倒是高了不少。不過最近似乎是在促銷，只要 $8.99，反倒比 Byword 便宜了些。喜歡用純文字寫文章的朋友，不妨考慮看看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在 OS X 中隨時隨地將 Markdown 轉為 HTML]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/10/markdown-to-html-in-osx/"/>
    <updated>2012-02-10T00:03:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/10/markdown-to-html-in-osx</id>
    <content type="html"><![CDATA[<p>很多人喜歡用 Markdown 寫純文字的文件，包括我。簡單又有規範，而且幾乎所有文書軟體／編輯器都可以開啟（應該沒有不支援純文字的編輯器吧？），也可以轉成 HTML 在網路上發表。</p>


<p>在 Markdown 作者 John Gruber 的網站上有提供了一個 perl 寫的 Markdown 轉換指令稿，可以將 Markdown 轉換成 HTML。不過每次要轉檔都要進終端機下指令也是麻煩，今天剛好看到一篇文章，可以在 OS X 中加入一項服務，透過該服務，任何只要提供文字編輯的應用程式，都可以經由右鍵選單輕鬆將 Markdown 轉換成 HTML。</p>


<p>原始文章： <br /><a href="http://gothick.org.uk/2010/08/04/installing-markdown-as-a-os-x-service-using-automator-in-snow-leopard/">Installing Markdown as an OS X Services Menu Item Using Automator</a></p>


<p>懶得看原文的也可以看下面步驟。原文中的作法是將轉好的 HTML 直接取代掉原始 Markdown，因為我的需求不同，所以以下的步驟還會加上將轉好的 HTML 放到剪貼簿中。</p>


<p>先下載 John Gruber 所寫轉換指令稿：<a href="http://daringfireball.net/projects/downloads/Markdown_1.0.1.zip">Markdown.pl</a> <br />下載後找個地方存放，我是放在 &#8220;/usr/local/bin/&#8221; 下面。</p>


<p>然後開啟 Automator，選擇新增一項「服務」</p>


<p><img src="https://lh4.googleusercontent.com/-4jbqH4ULE6w/TzPgHEeogEI/AAAAAAAAJSc/bgQzB6TYjgY/s800/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258B%25E5%258D%25887.51.41.jpg" alt="automator service" title="" /></p>


<p>接著會在視窗中看到如下內容。勾選「輸出會取代所選文字」，如果你只複製到剪貼簿而不需替換掉原本文字，可以不用勾選。</p>


<p><img src="https://lh4.googleusercontent.com/-LuRLdVga0Y4/TzPgKjA6mHI/AAAAAAAAJS8/58PItFCGXgk/s800/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258A%25E5%258D%258811.14.07.png" alt="replace selected text" title="" /></p>


<p>在左側程式庫列表中找到「執行 Shell 工序指令」，拉到右側。然後在文字區域中輸入 &#8220;/usr/local/bin/Markdown.pl&#8221; （請依照下載時所存放位置作適當修改）</p>


<p><img src="https://lh5.googleusercontent.com/-Q8wzbS2X0Dw/TzPgHcbkCGI/AAAAAAAAJSo/xw4nFzqOFCA/s640/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258B%25E5%258D%25889.26.17.jpg" alt="run shell script" title="" /></p>


<p><img src="https://lh3.googleusercontent.com/-10YQiOu5AW4/TzPgG5s0EBI/AAAAAAAAJSU/4eNQAfG3Yrg/s640/%25E6%259C%25AA%25E5%2591%25BD%25E5%2590%258D.jpg" alt="type the path" title="" /></p>


<p>如果只是要產生 HTML 碼，到上個步驟就可以了。若還要把轉換後的 HTML 存到剪貼簿中，一樣在左側程式庫列表中找到「拷貝到剪貼板」，然後拉到右側剛剛的指令下方。</p>


<p><img src="https://lh6.googleusercontent.com/-TJAWpA8GPnk/TzPgGgTcfwI/AAAAAAAAJSY/8PGij1g0vIk/s640/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258B%25E5%258D%258812.03.42.jpg" alt="copy to clipboard" title="" /></p>


<p>存檔，大功告成！</p>


<p><img src="https://lh4.googleusercontent.com/-G-8wSTDEsNc/TzPgK0JVenI/AAAAAAAAJS4/96P8mzPIa9k/s800/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258A%25E5%258D%258811.18.21.png" alt="save and finish" title="" /></p>


<p>接下來實驗看看。打開「文字編輯」或是任何可以編寫純文字的程式，隨便打一段 Markdown 指令。輸入完後全選，叫出右鍵選單，可以看到我們剛才辛苦的結晶：</p>


<p><img src="https://lh5.googleusercontent.com/-R9N1rdjFFw8/TzPgGUUk5TI/AAAAAAAAJSQ/Y1AvgdQZ85c/s640/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258B%25E5%258D%258811.00.51.jpg" alt="markdown to html" title="" /></p>


<p>用力給他按下去－－噹啦～全部變成 HTML 了，很方便不是？</p>


<p><img src="https://lh3.googleusercontent.com/-Qa59zBrnckQ/TzPsFo4ZL-I/AAAAAAAAJUA/WbZnbPmarsk/s800/%25E8%259E%25A2%25E5%25B9%2595%25E5%25BF%25AB%25E7%2585%25A7%25202012-02-09%2520%25E4%25B8%258B%25E5%258D%258811.03.25.png" alt="markdown to html converted" title="" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[光鮮亮麗背後的真相]]></title>
    <link href="http://tzengyuxio.me/blog/2012/02/07/the-truth-is-out-there/"/>
    <updated>2012-02-07T15:28:00+08:00</updated>
    <id>http://tzengyuxio.me/blog/2012/02/07/the-truth-is-out-there</id>
    <content type="html"><![CDATA[<p>今天看到很多人都在傳這一張圖片：<br /><br /><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="http://4.bp.blogspot.com/-nNDkxbLYxhE/TzDT_oeil8I/AAAAAAAAJR0/pAl3R9IUK_g/s1600/340307_265973053470862_147881708613331_595080_640973686_o.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" src="http://4.bp.blogspot.com/-nNDkxbLYxhE/TzDT_oeil8I/AAAAAAAAJR0/pAl3R9IUK_g/s1600/340307_265973053470862_147881708613331_595080_640973686_o.jpg" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;"><table align="center" cellpadding="0" cellspacing="0" class="tr-caption-container" style="margin-left: auto; margin-right: auto; text-align: center;"><tbody><tr><td class="tr-caption" style="font-size: 13px;">source: www.7even.com.tw</td></tr></tbody></table><div style="font-size: medium; text-align: left;"></div></td></tr></tbody></table>乍看好像邪惡組織比較吸引人。但是別忘了，那些擁有偉大目標、為了實現夢想沒日沒夜地努力、即使失敗也不氣餒，能夠指揮組織行動，最後還笑容滿面的，都是<strong>邪惡組織的頭目級領導人物</strong>啊！真正加入邪惡組織後，底下就是最血淋淋的職場寫照：<br /><br /><div class="separator" style="clear: both; text-align: center;"><object class="BLOGGER-youtube-video" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0" data-thumbnail-src="http://0.gvt0.com/vi/35Kc4jM2Sew/0.jpg" height="266" width="320"><param name="movie" value="http://www.youtube.com/v/35Kc4jM2Sew&fs=1&source=uds" /><param name="bgcolor" value="#FFFFFF" /><embed width="320" height="266"  src="http://www.youtube.com/v/35Kc4jM2Sew&fs=1&source=uds" type="application/x-shockwave-flash"></embed></object></div><br /><br />少年們，醒醒吧！<br /><a href="http://wiki.komica.org/wiki3/?%E6%88%90%E5%8F%A5%2F%E5%88%A5%E5%86%8D%E7%9B%B8%E4%BF%A1%E6%B2%92%E6%9C%89%E6%A0%B9%E6%93%9A%E7%9A%84%E8%AA%AA%E6%B3%95%E4%BA%86">別再相信沒有根據的說法了</a>！<br /><br /><em> * * </em><br />以下是更多誘拐有為年輕人加入邪惡組織的宣傳稿：<br /><ul><li><a href="http://n.yam.com/cardu/fn/201202/20120201058967.html">智慧科技帶動遊戲熱　逾八成想轉戰遊戲業-財經新聞-yam蕃薯藤新聞</a></li><li><a href="http://www.nownews.com/2012/01/31/91-2780266.htm">6成9上班族想進遊戲業　期望薪資37386元 | 頭條新聞 | NOWnews 今日新聞網</a></li></ul></p>
]]></content>
  </entry>
  
</feed>
